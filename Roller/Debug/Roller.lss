
Roller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000049c0  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000510  20000000  000049c0  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000041c  20000520  00004ee0  00010510  2**5
                  ALLOC
  3 .stack        00001004  2000093c  000052fc  00010510  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00010510  2**0
                  CONTENTS, READONLY
  5 .comment      00000071  00000000  00000000  0001053a  2**0
                  CONTENTS, READONLY
  6 .debug_info   00018f23  00000000  00000000  000105ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c83  00000000  00000000  000294ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000ca8  00000000  00000000  0002d151  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macro  00031328  00000000  00000000  0002ddf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0001711a  00000000  00000000  0005f121  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000ea419  00000000  00000000  0007623b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000952e  00000000  00000000  00160654  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c60  00000000  00000000  00169b82  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001e34  00000000  00000000  0016a7e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20001940 	.word	0x20001940
       4:	000045c1 	.word	0x000045c1
       8:	00001205 	.word	0x00001205
       c:	000045bd 	.word	0x000045bd
      10:	000045bd 	.word	0x000045bd
      14:	000045bd 	.word	0x000045bd
      18:	000045bd 	.word	0x000045bd
	...
      2c:	000045bd 	.word	0x000045bd
      30:	000045bd 	.word	0x000045bd
      34:	00000000 	.word	0x00000000
      38:	000045bd 	.word	0x000045bd
      3c:	000045bd 	.word	0x000045bd
      40:	000045bd 	.word	0x000045bd
      44:	00001731 	.word	0x00001731
      48:	00001745 	.word	0x00001745
      4c:	00001759 	.word	0x00001759
      50:	0000176d 	.word	0x0000176d
      54:	00001781 	.word	0x00001781
      58:	00001795 	.word	0x00001795
      5c:	000017a9 	.word	0x000017a9
      60:	000017bd 	.word	0x000017bd
      64:	000017d1 	.word	0x000017d1
      68:	000017e5 	.word	0x000017e5
      6c:	000017f9 	.word	0x000017f9
      70:	0000180d 	.word	0x0000180d
      74:	00001821 	.word	0x00001821
      78:	00001835 	.word	0x00001835
      7c:	00001849 	.word	0x00001849
      80:	0000185d 	.word	0x0000185d
      84:	000045bd 	.word	0x000045bd
      88:	000025c5 	.word	0x000025c5
      8c:	000045bd 	.word	0x000045bd
      90:	000045bd 	.word	0x000045bd
      94:	000045bd 	.word	0x000045bd
      98:	000045bd 	.word	0x000045bd
      9c:	000045bd 	.word	0x000045bd
      a0:	000045bd 	.word	0x000045bd
      a4:	00001331 	.word	0x00001331
      a8:	00001349 	.word	0x00001349
      ac:	00001361 	.word	0x00001361
      b0:	00001379 	.word	0x00001379
      b4:	00001391 	.word	0x00001391
      b8:	000013a9 	.word	0x000013a9
      bc:	000013c1 	.word	0x000013c1
      c0:	000013d9 	.word	0x000013d9
      c4:	000013f1 	.word	0x000013f1
      c8:	00001409 	.word	0x00001409
      cc:	00001421 	.word	0x00001421
      d0:	00001439 	.word	0x00001439
      d4:	000045bd 	.word	0x000045bd
      d8:	000045bd 	.word	0x000045bd
      dc:	000045bd 	.word	0x000045bd
      e0:	000045bd 	.word	0x000045bd
      e4:	000045bd 	.word	0x000045bd
      e8:	000045bd 	.word	0x000045bd
      ec:	000045bd 	.word	0x000045bd
      f0:	000045bd 	.word	0x000045bd
      f4:	00001219 	.word	0x00001219
      f8:	0000122d 	.word	0x0000122d
      fc:	00001241 	.word	0x00001241
     100:	00001255 	.word	0x00001255
     104:	00001269 	.word	0x00001269
     108:	0000127d 	.word	0x0000127d
     10c:	00001291 	.word	0x00001291
     110:	000012a5 	.word	0x000012a5
     114:	000045bd 	.word	0x000045bd
     118:	000045bd 	.word	0x000045bd
     11c:	000045bd 	.word	0x000045bd
     120:	000045bd 	.word	0x000045bd
     124:	000045bd 	.word	0x000045bd
     128:	000045bd 	.word	0x000045bd
     12c:	000045bd 	.word	0x000045bd
     130:	000045bd 	.word	0x000045bd
     134:	000045bd 	.word	0x000045bd
     138:	000045bd 	.word	0x000045bd
     13c:	000045bd 	.word	0x000045bd
     140:	000045bd 	.word	0x000045bd
     144:	000045bd 	.word	0x000045bd
     148:	000045bd 	.word	0x000045bd
     14c:	000045bd 	.word	0x000045bd
     150:	000045bd 	.word	0x000045bd
     154:	000045bd 	.word	0x000045bd
     158:	000045bd 	.word	0x000045bd
     15c:	000045bd 	.word	0x000045bd
     160:	000045bd 	.word	0x000045bd
     164:	000045bd 	.word	0x000045bd
     168:	000045bd 	.word	0x000045bd
     16c:	000045bd 	.word	0x000045bd
     170:	000045bd 	.word	0x000045bd
     174:	000045bd 	.word	0x000045bd
     178:	000045bd 	.word	0x000045bd
     17c:	00001699 	.word	0x00001699

00000180 <deregister_tm_clones>:
     180:	b508      	push	{r3, lr}
     182:	4805      	ldr	r0, [pc, #20]	; (198 <deregister_tm_clones+0x18>)
     184:	4b05      	ldr	r3, [pc, #20]	; (19c <deregister_tm_clones+0x1c>)
     186:	1a19      	subs	r1, r3, r0
     188:	2906      	cmp	r1, #6
     18a:	d800      	bhi.n	18e <deregister_tm_clones+0xe>
     18c:	bd08      	pop	{r3, pc}
     18e:	4a04      	ldr	r2, [pc, #16]	; (1a0 <deregister_tm_clones+0x20>)
     190:	2a00      	cmp	r2, #0
     192:	d0fb      	beq.n	18c <deregister_tm_clones+0xc>
     194:	4790      	blx	r2
     196:	e7f9      	b.n	18c <deregister_tm_clones+0xc>
     198:	000049c0 	.word	0x000049c0
     19c:	000049c3 	.word	0x000049c3
     1a0:	00000000 	.word	0x00000000

000001a4 <register_tm_clones>:
     1a4:	b508      	push	{r3, lr}
     1a6:	4807      	ldr	r0, [pc, #28]	; (1c4 <register_tm_clones+0x20>)
     1a8:	4b07      	ldr	r3, [pc, #28]	; (1c8 <register_tm_clones+0x24>)
     1aa:	1a19      	subs	r1, r3, r0
     1ac:	108a      	asrs	r2, r1, #2
     1ae:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
     1b2:	1059      	asrs	r1, r3, #1
     1b4:	d100      	bne.n	1b8 <register_tm_clones+0x14>
     1b6:	bd08      	pop	{r3, pc}
     1b8:	4a04      	ldr	r2, [pc, #16]	; (1cc <register_tm_clones+0x28>)
     1ba:	2a00      	cmp	r2, #0
     1bc:	d0fb      	beq.n	1b6 <register_tm_clones+0x12>
     1be:	4790      	blx	r2
     1c0:	e7f9      	b.n	1b6 <register_tm_clones+0x12>
     1c2:	bf00      	nop
     1c4:	000049c0 	.word	0x000049c0
     1c8:	000049c0 	.word	0x000049c0
     1cc:	00000000 	.word	0x00000000

000001d0 <__do_global_dtors_aux>:
     1d0:	b510      	push	{r4, lr}
     1d2:	4c06      	ldr	r4, [pc, #24]	; (1ec <__do_global_dtors_aux+0x1c>)
     1d4:	7823      	ldrb	r3, [r4, #0]
     1d6:	b943      	cbnz	r3, 1ea <__do_global_dtors_aux+0x1a>
     1d8:	f7ff ffd2 	bl	180 <deregister_tm_clones>
     1dc:	4804      	ldr	r0, [pc, #16]	; (1f0 <__do_global_dtors_aux+0x20>)
     1de:	b110      	cbz	r0, 1e6 <__do_global_dtors_aux+0x16>
     1e0:	4804      	ldr	r0, [pc, #16]	; (1f4 <__do_global_dtors_aux+0x24>)
     1e2:	f3af 8000 	nop.w
     1e6:	2101      	movs	r1, #1
     1e8:	7021      	strb	r1, [r4, #0]
     1ea:	bd10      	pop	{r4, pc}
     1ec:	20000520 	.word	0x20000520
     1f0:	00000000 	.word	0x00000000
     1f4:	000049c0 	.word	0x000049c0

000001f8 <frame_dummy>:
     1f8:	b508      	push	{r3, lr}
     1fa:	4b08      	ldr	r3, [pc, #32]	; (21c <frame_dummy+0x24>)
     1fc:	b11b      	cbz	r3, 206 <frame_dummy+0xe>
     1fe:	4808      	ldr	r0, [pc, #32]	; (220 <frame_dummy+0x28>)
     200:	4908      	ldr	r1, [pc, #32]	; (224 <frame_dummy+0x2c>)
     202:	f3af 8000 	nop.w
     206:	4808      	ldr	r0, [pc, #32]	; (228 <frame_dummy+0x30>)
     208:	6801      	ldr	r1, [r0, #0]
     20a:	b111      	cbz	r1, 212 <frame_dummy+0x1a>
     20c:	4a07      	ldr	r2, [pc, #28]	; (22c <frame_dummy+0x34>)
     20e:	b102      	cbz	r2, 212 <frame_dummy+0x1a>
     210:	4790      	blx	r2
     212:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     216:	f7ff bfc5 	b.w	1a4 <register_tm_clones>
     21a:	bf00      	nop
     21c:	00000000 	.word	0x00000000
     220:	000049c0 	.word	0x000049c0
     224:	20000524 	.word	0x20000524
     228:	000049c0 	.word	0x000049c0
     22c:	00000000 	.word	0x00000000

00000230 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
     230:	f240 53d4 	movw	r3, #1492	; 0x5d4
     234:	f2c2 0300 	movt	r3, #8192	; 0x2000
     238:	781a      	ldrb	r2, [r3, #0]
     23a:	f102 30ff 	add.w	r0, r2, #4294967295
     23e:	b2c1      	uxtb	r1, r0
     240:	7019      	strb	r1, [r3, #0]
     242:	4770      	bx	lr

00000244 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
     244:	f04f 0000 	mov.w	r0, #0
     248:	4770      	bx	lr
     24a:	bf00      	nop

0000024c <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
     24c:	f04f 0000 	mov.w	r0, #0
     250:	4770      	bx	lr
     252:	bf00      	nop

00000254 <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
     254:	f640 03d8 	movw	r3, #2264	; 0x8d8
     258:	f2c2 0300 	movt	r3, #8192	; 0x2000
     25c:	7818      	ldrb	r0, [r3, #0]
     25e:	f010 0f80 	tst.w	r0, #128	; 0x80
     262:	d020      	beq.n	2a6 <udi_cdc_comm_setup+0x52>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     264:	f000 0160 	and.w	r1, r0, #96	; 0x60
     268:	2920      	cmp	r1, #32
     26a:	d147      	bne.n	2fc <udi_cdc_comm_setup+0xa8>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
     26c:	f640 02d8 	movw	r2, #2264	; 0x8d8
     270:	f2c2 0200 	movt	r2, #8192	; 0x2000
     274:	7853      	ldrb	r3, [r2, #1]
     276:	2b21      	cmp	r3, #33	; 0x21
     278:	d143      	bne.n	302 <udi_cdc_comm_setup+0xae>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
     27a:	f640 00d8 	movw	r0, #2264	; 0x8d8
     27e:	f2c2 0000 	movt	r0, #8192	; 0x2000
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
     282:	88c1      	ldrh	r1, [r0, #6]
     284:	2907      	cmp	r1, #7
     286:	d13f      	bne.n	308 <udi_cdc_comm_setup+0xb4>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
     288:	f640 03d8 	movw	r3, #2264	; 0x8d8
     28c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     290:	f240 523c 	movw	r2, #1340	; 0x53c
     294:	f2c2 0200 	movt	r2, #8192	; 0x2000
     298:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
     29a:	f04f 0007 	mov.w	r0, #7
     29e:	8198      	strh	r0, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
     2a0:	f04f 0001 	mov.w	r0, #1
     2a4:	4770      	bx	lr
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     2a6:	f000 0160 	and.w	r1, r0, #96	; 0x60
     2aa:	2920      	cmp	r1, #32
     2ac:	d12f      	bne.n	30e <udi_cdc_comm_setup+0xba>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
     2ae:	f640 02d8 	movw	r2, #2264	; 0x8d8
     2b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
     2b6:	7850      	ldrb	r0, [r2, #1]
     2b8:	2820      	cmp	r0, #32
     2ba:	d004      	beq.n	2c6 <udi_cdc_comm_setup+0x72>
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
     2bc:	2822      	cmp	r0, #34	; 0x22
     2be:	bf14      	ite	ne
     2c0:	2000      	movne	r0, #0
     2c2:	2001      	moveq	r0, #1
     2c4:	4770      	bx	lr
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
     2c6:	f640 03d8 	movw	r3, #2264	; 0x8d8
     2ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
     2ce:	88d8      	ldrh	r0, [r3, #6]
     2d0:	2807      	cmp	r0, #7
     2d2:	d11f      	bne.n	314 <udi_cdc_comm_setup+0xc0>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
     2d4:	f640 01d8 	movw	r1, #2264	; 0x8d8
     2d8:	f2c2 0100 	movt	r1, #8192	; 0x2000
     2dc:	f240 321d 	movw	r2, #797	; 0x31d
     2e0:	f2c0 0200 	movt	r2, #0
     2e4:	610a      	str	r2, [r1, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
     2e6:	f240 533c 	movw	r3, #1340	; 0x53c
     2ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
     2ee:	608b      	str	r3, [r1, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
     2f0:	f04f 0007 	mov.w	r0, #7
     2f4:	8188      	strh	r0, [r1, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
     2f6:	f04f 0001 	mov.w	r0, #1
     2fa:	4770      	bx	lr
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
     2fc:	f04f 0000 	mov.w	r0, #0
     300:	4770      	bx	lr
     302:	f04f 0000 	mov.w	r0, #0
     306:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
     308:	f04f 0000 	mov.w	r0, #0
     30c:	4770      	bx	lr
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
     30e:	f04f 0000 	mov.w	r0, #0
     312:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
     314:	f04f 0000 	mov.w	r0, #0
				return true;
			}
		}
	}
	return false;  // request Not supported
}
     318:	4770      	bx	lr
     31a:	bf00      	nop

0000031c <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
     31c:	4770      	bx	lr
     31e:	bf00      	nop

00000320 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
     320:	b530      	push	{r4, r5, lr}
     322:	b083      	sub	sp, #12

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
     324:	f240 53e8 	movw	r3, #1512	; 0x5e8
     328:	f2c2 0300 	movt	r3, #8192	; 0x2000
     32c:	7818      	ldrb	r0, [r3, #0]
     32e:	2800      	cmp	r0, #0
     330:	f040 80de 	bne.w	4f0 <udi_cdc_tx_send+0x1d0>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
     334:	f242 119d 	movw	r1, #8605	; 0x219d
     338:	f2c0 0100 	movt	r1, #0
     33c:	4788      	blx	r1
     33e:	b160      	cbz	r0, 35a <udi_cdc_tx_send+0x3a>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
     340:	f240 54dc 	movw	r4, #1500	; 0x5dc
     344:	f2c2 0400 	movt	r4, #8192	; 0x2000
     348:	8824      	ldrh	r4, [r4, #0]
     34a:	f242 10f1 	movw	r0, #8689	; 0x21f1
     34e:	f2c0 0000 	movt	r0, #0
     352:	4780      	blx	r0
     354:	4284      	cmp	r4, r0
     356:	d10d      	bne.n	374 <udi_cdc_tx_send+0x54>
     358:	e0ca      	b.n	4f0 <udi_cdc_tx_send+0x1d0>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
     35a:	f240 52dc 	movw	r2, #1500	; 0x5dc
     35e:	f2c2 0200 	movt	r2, #8192	; 0x2000
     362:	8814      	ldrh	r4, [r2, #0]
     364:	f242 13e1 	movw	r3, #8673	; 0x21e1
     368:	f2c0 0300 	movt	r3, #0
     36c:	4798      	blx	r3
     36e:	4284      	cmp	r4, r0
     370:	f000 80be 	beq.w	4f0 <udi_cdc_tx_send+0x1d0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     374:	f3ef 8510 	mrs	r5, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
     378:	f1d5 0501 	rsbs	r5, r5, #1
     37c:	bf38      	it	cc
     37e:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     380:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     382:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     386:	f240 01d4 	movw	r1, #212	; 0xd4
     38a:	f2c2 0100 	movt	r1, #8192	; 0x2000
     38e:	f04f 0200 	mov.w	r2, #0
     392:	700a      	strb	r2, [r1, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
     394:	f240 5348 	movw	r3, #1352	; 0x548
     398:	f2c2 0300 	movt	r3, #8192	; 0x2000
     39c:	781c      	ldrb	r4, [r3, #0]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
     39e:	f240 504c 	movw	r0, #1356	; 0x54c
     3a2:	f2c2 0000 	movt	r0, #8192	; 0x2000
     3a6:	f830 1014 	ldrh.w	r1, [r0, r4, lsl #1]
     3aa:	bb79      	cbnz	r1, 40c <udi_cdc_tx_send+0xec>
		sof_zlp_counter++;
     3ac:	f240 53e0 	movw	r3, #1504	; 0x5e0
     3b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     3b4:	881a      	ldrh	r2, [r3, #0]
     3b6:	f102 0201 	add.w	r2, r2, #1
     3ba:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
     3bc:	f242 109d 	movw	r0, #8605	; 0x219d
     3c0:	f2c0 0000 	movt	r0, #0
     3c4:	4780      	blx	r0
     3c6:	b930      	cbnz	r0, 3d6 <udi_cdc_tx_send+0xb6>
     3c8:	f240 51e0 	movw	r1, #1504	; 0x5e0
     3cc:	f2c2 0100 	movt	r1, #8192	; 0x2000
     3d0:	880b      	ldrh	r3, [r1, #0]
     3d2:	2b63      	cmp	r3, #99	; 0x63
     3d4:	d90d      	bls.n	3f2 <udi_cdc_tx_send+0xd2>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
     3d6:	f242 129d 	movw	r2, #8605	; 0x219d
     3da:	f2c0 0200 	movt	r2, #0
     3de:	4790      	blx	r2
     3e0:	b1a0      	cbz	r0, 40c <udi_cdc_tx_send+0xec>
     3e2:	f240 50e0 	movw	r0, #1504	; 0x5e0
     3e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
     3ea:	8801      	ldrh	r1, [r0, #0]
     3ec:	f5b1 7f48 	cmp.w	r1, #800	; 0x320
     3f0:	d20c      	bcs.n	40c <udi_cdc_tx_send+0xec>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     3f2:	2d00      	cmp	r5, #0
     3f4:	d07c      	beq.n	4f0 <udi_cdc_tx_send+0x1d0>
		cpu_irq_enable();
     3f6:	f240 03d4 	movw	r3, #212	; 0xd4
     3fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
     3fe:	f04f 0201 	mov.w	r2, #1
     402:	701a      	strb	r2, [r3, #0]
     404:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     408:	b662      	cpsie	i
     40a:	e071      	b.n	4f0 <udi_cdc_tx_send+0x1d0>
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
     40c:	f240 53e0 	movw	r3, #1504	; 0x5e0
     410:	f2c2 0300 	movt	r3, #8192	; 0x2000
     414:	f04f 0200 	mov.w	r2, #0
     418:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
     41a:	f240 607c 	movw	r0, #1660	; 0x67c
     41e:	f2c2 0000 	movt	r0, #8192	; 0x2000
     422:	7801      	ldrb	r1, [r0, #0]
     424:	b949      	cbnz	r1, 43a <udi_cdc_tx_send+0x11a>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     426:	4294      	cmp	r4, r2
     428:	bf14      	ite	ne
     42a:	2200      	movne	r2, #0
     42c:	2201      	moveq	r2, #1
     42e:	f240 5348 	movw	r3, #1352	; 0x548
     432:	f2c2 0300 	movt	r3, #8192	; 0x2000
     436:	701a      	strb	r2, [r3, #0]
     438:	e003      	b.n	442 <udi_cdc_tx_send+0x122>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
     43a:	f1d4 0401 	rsbs	r4, r4, #1
     43e:	bf38      	it	cc
     440:	2400      	movcc	r4, #0
	}
	udi_cdc_tx_trans_ongoing[port] = true;
     442:	f240 50e8 	movw	r0, #1512	; 0x5e8
     446:	f2c2 0000 	movt	r0, #8192	; 0x2000
     44a:	f04f 0201 	mov.w	r2, #1
     44e:	7002      	strb	r2, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     450:	b13d      	cbz	r5, 462 <udi_cdc_tx_send+0x142>
		cpu_irq_enable();
     452:	f240 05d4 	movw	r5, #212	; 0xd4
     456:	f2c2 0500 	movt	r5, #8192	; 0x2000
     45a:	702a      	strb	r2, [r5, #0]
     45c:	f3bf 8f5f 	dmb	sy
     460:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
     462:	4625      	mov	r5, r4
     464:	f240 514c 	movw	r1, #1356	; 0x54c
     468:	f2c2 0100 	movt	r1, #8192	; 0x2000
     46c:	f831 4014 	ldrh.w	r4, [r1, r4, lsl #1]
     470:	3c40      	subs	r4, #64	; 0x40
     472:	bf18      	it	ne
     474:	2401      	movne	r4, #1
	if (b_short_packet) {
     476:	b1dc      	cbz	r4, 4b0 <udi_cdc_tx_send+0x190>
		if (udd_is_high_speed()) {
     478:	f242 129d 	movw	r2, #8605	; 0x219d
     47c:	f2c0 0200 	movt	r2, #0
     480:	4790      	blx	r2
     482:	b150      	cbz	r0, 49a <udi_cdc_tx_send+0x17a>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
     484:	f242 10f1 	movw	r0, #8689	; 0x21f1
     488:	f2c0 0000 	movt	r0, #0
     48c:	4780      	blx	r0
     48e:	f240 52dc 	movw	r2, #1500	; 0x5dc
     492:	f2c2 0200 	movt	r2, #8192	; 0x2000
     496:	8010      	strh	r0, [r2, #0]
     498:	e011      	b.n	4be <udi_cdc_tx_send+0x19e>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
     49a:	f242 11e1 	movw	r1, #8673	; 0x21e1
     49e:	f2c0 0100 	movt	r1, #0
     4a2:	4788      	blx	r1
     4a4:	f240 53dc 	movw	r3, #1500	; 0x5dc
     4a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ac:	8018      	strh	r0, [r3, #0]
     4ae:	e006      	b.n	4be <udi_cdc_tx_send+0x19e>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
     4b0:	f240 53dc 	movw	r3, #1500	; 0x5dc
     4b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4b8:	f04f 0000 	mov.w	r0, #0
     4bc:	8018      	strh	r0, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
     4be:	f240 514c 	movw	r1, #1356	; 0x54c
     4c2:	f2c2 0100 	movt	r1, #8192	; 0x2000
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
     4c6:	f831 3015 	ldrh.w	r3, [r1, r5, lsl #1]
     4ca:	f240 5009 	movw	r0, #1289	; 0x509
     4ce:	f2c0 0000 	movt	r0, #0
     4d2:	9000      	str	r0, [sp, #0]
     4d4:	f04f 0081 	mov.w	r0, #129	; 0x81
     4d8:	4621      	mov	r1, r4
     4da:	f240 5450 	movw	r4, #1360	; 0x550
     4de:	f2c2 0400 	movt	r4, #8192	; 0x2000
     4e2:	eb04 1285 	add.w	r2, r4, r5, lsl #6
     4e6:	f242 3471 	movw	r4, #9073	; 0x2371
     4ea:	f2c0 0400 	movt	r4, #0
     4ee:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
     4f0:	b003      	add	sp, #12
     4f2:	bd30      	pop	{r4, r5, pc}

000004f4 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
     4f4:	b508      	push	{r3, lr}
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
     4f6:	f04f 0000 	mov.w	r0, #0
     4fa:	f240 3321 	movw	r3, #801	; 0x321
     4fe:	f2c0 0300 	movt	r3, #0
     502:	4798      	blx	r3
     504:	bd08      	pop	{r3, pc}
     506:	bf00      	nop

00000508 <udi_cdc_data_sent>:
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
     508:	b508      	push	{r3, lr}
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
     50a:	b9e8      	cbnz	r0, 548 <udi_cdc_data_sent+0x40>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
     50c:	f240 5348 	movw	r3, #1352	; 0x548
     510:	f2c2 0300 	movt	r3, #8192	; 0x2000
     514:	7819      	ldrb	r1, [r3, #0]
     516:	f1d1 0101 	rsbs	r1, r1, #1
     51a:	bf38      	it	cc
     51c:	2100      	movcc	r1, #0
     51e:	f240 534c 	movw	r3, #1356	; 0x54c
     522:	f2c2 0300 	movt	r3, #8192	; 0x2000
     526:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
     52a:	f240 617c 	movw	r1, #1660	; 0x67c
     52e:	f2c2 0100 	movt	r1, #8192	; 0x2000
     532:	7008      	strb	r0, [r1, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
     534:	f240 52e8 	movw	r2, #1512	; 0x5e8
     538:	f2c2 0200 	movt	r2, #8192	; 0x2000
     53c:	7010      	strb	r0, [r2, #0]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
     53e:	f240 3321 	movw	r3, #801	; 0x321
     542:	f2c0 0300 	movt	r3, #0
     546:	4798      	blx	r3
     548:	bd08      	pop	{r3, pc}
     54a:	bf00      	nop

0000054c <udi_cdc_data_disable>:
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
}

void udi_cdc_data_disable(void)
{
     54c:	b508      	push	{r3, lr}
	uint8_t port;
	UNUSED(port);

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
     54e:	f240 5345 	movw	r3, #1349	; 0x545
     552:	f2c2 0300 	movt	r3, #8192	; 0x2000
     556:	781a      	ldrb	r2, [r3, #0]
     558:	f102 30ff 	add.w	r0, r2, #4294967295
     55c:	b2c1      	uxtb	r1, r0
     55e:	7019      	strb	r1, [r3, #0]
	port = udi_cdc_nb_data_enabled;
     560:	7818      	ldrb	r0, [r3, #0]
	UDI_CDC_DISABLE_EXT(port);
     562:	f244 7399 	movw	r3, #18329	; 0x4799
     566:	f2c0 0300 	movt	r3, #0
     56a:	4798      	blx	r3
	udi_cdc_data_running = false;
     56c:	f240 5044 	movw	r0, #1348	; 0x544
     570:	f2c2 0000 	movt	r0, #8192	; 0x2000
     574:	f04f 0200 	mov.w	r2, #0
     578:	7002      	strb	r2, [r0, #0]
     57a:	bd08      	pop	{r3, pc}

0000057c <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
     57c:	b508      	push	{r3, lr}
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
     57e:	f04f 0000 	mov.w	r0, #0
     582:	f240 53d4 	movw	r3, #1492	; 0x5d4
     586:	f2c2 0300 	movt	r3, #8192	; 0x2000
     58a:	7018      	strb	r0, [r3, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
     58c:	f240 6180 	movw	r1, #1664	; 0x680
     590:	f2c2 0100 	movt	r1, #8192	; 0x2000
     594:	8008      	strh	r0, [r1, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
     596:	f240 53ec 	movw	r3, #1516	; 0x5ec
     59a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     59e:	f04f 01a1 	mov.w	r1, #161	; 0xa1
     5a2:	7019      	strb	r1, [r3, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
     5a4:	f04f 0120 	mov.w	r1, #32
     5a8:	7059      	strb	r1, [r3, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
     5aa:	8058      	strh	r0, [r3, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
     5ac:	8098      	strh	r0, [r3, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
     5ae:	f04f 0102 	mov.w	r1, #2
     5b2:	80d9      	strh	r1, [r3, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
     5b4:	8118      	strh	r0, [r3, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
     5b6:	f240 533c 	movw	r3, #1340	; 0x53c
     5ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
     5be:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
     5c2:	6019      	str	r1, [r3, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
     5c4:	7118      	strb	r0, [r3, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
     5c6:	7158      	strb	r0, [r3, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
     5c8:	f04f 0208 	mov.w	r2, #8
     5cc:	719a      	strb	r2, [r3, #6]
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
     5ce:	f244 7399 	movw	r3, #18329	; 0x4799
     5d2:	f2c0 0300 	movt	r3, #0
     5d6:	4798      	blx	r3
     5d8:	b158      	cbz	r0, 5f2 <udi_cdc_comm_enable+0x76>
		return false;
	}
	udi_cdc_nb_comm_enabled++;
     5da:	f240 50d4 	movw	r0, #1492	; 0x5d4
     5de:	f2c2 0000 	movt	r0, #8192	; 0x2000
     5e2:	7801      	ldrb	r1, [r0, #0]
     5e4:	f101 0101 	add.w	r1, r1, #1
     5e8:	b2ca      	uxtb	r2, r1
     5ea:	7002      	strb	r2, [r0, #0]
	return true;
     5ec:	f04f 0001 	mov.w	r0, #1
     5f0:	bd08      	pop	{r3, pc}
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
     5f2:	f04f 0000 	mov.w	r0, #0
	}
	udi_cdc_nb_comm_enabled++;
	return true;
}
     5f6:	bd08      	pop	{r3, pc}

000005f8 <udi_cdc_multi_get_nb_received_data>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     5f8:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     5fc:	b672      	cpsid	i
     5fe:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     602:	f240 02d4 	movw	r2, #212	; 0xd4
     606:	f2c2 0200 	movt	r2, #8192	; 0x2000
     60a:	f04f 0100 	mov.w	r1, #0
     60e:	7011      	strb	r1, [r2, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
     610:	f240 50d8 	movw	r0, #1496	; 0x5d8
     614:	f2c2 0000 	movt	r0, #8192	; 0x2000
     618:	8802      	ldrh	r2, [r0, #0]
     61a:	b290      	uxth	r0, r2
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
     61c:	f240 51e4 	movw	r1, #1508	; 0x5e4
     620:	f2c2 0100 	movt	r1, #8192	; 0x2000
     624:	7809      	ldrb	r1, [r1, #0]
     626:	f240 52d0 	movw	r2, #1488	; 0x5d0
     62a:	f2c2 0200 	movt	r2, #8192	; 0x2000
     62e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
     632:	1a08      	subs	r0, r1, r0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     634:	b94b      	cbnz	r3, 64a <udi_cdc_multi_get_nb_received_data+0x52>
		cpu_irq_enable();
     636:	f240 03d4 	movw	r3, #212	; 0xd4
     63a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     63e:	f04f 0201 	mov.w	r2, #1
     642:	701a      	strb	r2, [r3, #0]
     644:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     648:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
     64a:	4770      	bx	lr

0000064c <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
     64c:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
     64e:	f240 53f9 	movw	r3, #1529	; 0x5f9
     652:	f2c0 0300 	movt	r3, #0
     656:	4798      	blx	r3
}
     658:	3000      	adds	r0, #0
     65a:	bf18      	it	ne
     65c:	2001      	movne	r0, #1
     65e:	bd08      	pop	{r3, pc}

00000660 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
     660:	b510      	push	{r4, lr}
     662:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     664:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
     668:	f1d3 0001 	rsbs	r0, r3, #1
     66c:	bf38      	it	cc
     66e:	2000      	movcc	r0, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     670:	b672      	cpsid	i
     672:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     676:	f240 02d4 	movw	r2, #212	; 0xd4
     67a:	f2c2 0200 	movt	r2, #8192	; 0x2000
     67e:	f04f 0100 	mov.w	r1, #0
     682:	7011      	strb	r1, [r2, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
     684:	f240 54e4 	movw	r4, #1508	; 0x5e4
     688:	f2c2 0400 	movt	r4, #8192	; 0x2000
     68c:	7824      	ldrb	r4, [r4, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
     68e:	f240 6378 	movw	r3, #1656	; 0x678
     692:	f2c2 0300 	movt	r3, #8192	; 0x2000
     696:	781a      	ldrb	r2, [r3, #0]
     698:	b96a      	cbnz	r2, 6b6 <udi_cdc_rx_start+0x56>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
     69a:	f240 51d8 	movw	r1, #1496	; 0x5d8
     69e:	f2c2 0100 	movt	r1, #8192	; 0x2000
     6a2:	880b      	ldrh	r3, [r1, #0]
     6a4:	b29a      	uxth	r2, r3
     6a6:	f240 51d0 	movw	r1, #1488	; 0x5d0
     6aa:	f2c2 0100 	movt	r1, #8192	; 0x2000
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
     6ae:	f831 3014 	ldrh.w	r3, [r1, r4, lsl #1]
     6b2:	4293      	cmp	r3, r2
     6b4:	d90e      	bls.n	6d4 <udi_cdc_rx_start+0x74>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     6b6:	2800      	cmp	r0, #0
     6b8:	d052      	beq.n	760 <udi_cdc_rx_start+0x100>
		cpu_irq_enable();
     6ba:	f240 01d4 	movw	r1, #212	; 0xd4
     6be:	f2c2 0100 	movt	r1, #8192	; 0x2000
     6c2:	f04f 0201 	mov.w	r2, #1
     6c6:	700a      	strb	r2, [r1, #0]
     6c8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     6cc:	b662      	cpsie	i
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
     6ce:	f04f 0000 	mov.w	r0, #0
     6d2:	e047      	b.n	764 <udi_cdc_rx_start+0x104>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
     6d4:	f240 52d8 	movw	r2, #1496	; 0x5d8
     6d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
     6dc:	f04f 0100 	mov.w	r1, #0
     6e0:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
     6e2:	428c      	cmp	r4, r1
     6e4:	bf14      	ite	ne
     6e6:	2100      	movne	r1, #0
     6e8:	2101      	moveq	r1, #1
     6ea:	f240 53e4 	movw	r3, #1508	; 0x5e4
     6ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
     6f2:	7019      	strb	r1, [r3, #0]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
     6f4:	f240 6278 	movw	r2, #1656	; 0x678
     6f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
     6fc:	f04f 0101 	mov.w	r1, #1
     700:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     702:	b138      	cbz	r0, 714 <udi_cdc_rx_start+0xb4>
		cpu_irq_enable();
     704:	f240 00d4 	movw	r0, #212	; 0xd4
     708:	f2c2 0000 	movt	r0, #8192	; 0x2000
     70c:	7001      	strb	r1, [r0, #0]
     70e:	f3bf 8f5f 	dmb	sy
     712:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
     714:	f04f 0000 	mov.w	r0, #0
     718:	f240 624d 	movw	r2, #1613	; 0x64d
     71c:	f2c0 0200 	movt	r2, #0
     720:	4790      	blx	r2
     722:	b130      	cbz	r0, 732 <udi_cdc_rx_start+0xd2>
		UDI_CDC_RX_NOTIFY(port);
     724:	f04f 0000 	mov.w	r0, #0
     728:	f244 71c5 	movw	r1, #18373	; 0x47c5
     72c:	f2c0 0100 	movt	r1, #0
     730:	4788      	blx	r1
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
     732:	f240 7069 	movw	r0, #1897	; 0x769
     736:	f2c0 0000 	movt	r0, #0
     73a:	9000      	str	r0, [sp, #0]
     73c:	f04f 0002 	mov.w	r0, #2
     740:	f04f 0101 	mov.w	r1, #1
     744:	f240 53f8 	movw	r3, #1528	; 0x5f8
     748:	f2c2 0300 	movt	r3, #8192	; 0x2000
     74c:	eb03 1284 	add.w	r2, r3, r4, lsl #6
     750:	f04f 0340 	mov.w	r3, #64	; 0x40
     754:	f242 3471 	movw	r4, #9073	; 0x2371
     758:	f2c0 0400 	movt	r4, #0
     75c:	47a0      	blx	r4
     75e:	e001      	b.n	764 <udi_cdc_rx_start+0x104>
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
     760:	f04f 0000 	mov.w	r0, #0
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
     764:	b002      	add	sp, #8
     766:	bd10      	pop	{r4, pc}

00000768 <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
     768:	b510      	push	{r4, lr}
     76a:	b082      	sub	sp, #8
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
     76c:	bb88      	cbnz	r0, 7d2 <udi_cdc_data_received+0x6a>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
     76e:	f240 53e4 	movw	r3, #1508	; 0x5e4
     772:	f2c2 0300 	movt	r3, #8192	; 0x2000
     776:	7818      	ldrb	r0, [r3, #0]
     778:	f1d0 0301 	rsbs	r3, r0, #1
     77c:	bf38      	it	cc
     77e:	2300      	movcc	r3, #0
	if (!n) {
     780:	b9a9      	cbnz	r1, 7ae <udi_cdc_data_received+0x46>
		udd_ep_run( ep,
     782:	f240 7469 	movw	r4, #1897	; 0x769
     786:	f2c0 0400 	movt	r4, #0
     78a:	9400      	str	r4, [sp, #0]
     78c:	4610      	mov	r0, r2
     78e:	f04f 0101 	mov.w	r1, #1
     792:	f240 52f8 	movw	r2, #1528	; 0x5f8
     796:	f2c2 0200 	movt	r2, #8192	; 0x2000
     79a:	eb02 1283 	add.w	r2, r2, r3, lsl #6
     79e:	f04f 0340 	mov.w	r3, #64	; 0x40
     7a2:	f242 3471 	movw	r4, #9073	; 0x2371
     7a6:	f2c0 0400 	movt	r4, #0
     7aa:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
     7ac:	e011      	b.n	7d2 <udi_cdc_data_received+0x6a>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
     7ae:	f240 52d0 	movw	r2, #1488	; 0x5d0
     7b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
     7b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
     7ba:	f04f 0000 	mov.w	r0, #0
     7be:	f240 6178 	movw	r1, #1656	; 0x678
     7c2:	f2c2 0100 	movt	r1, #8192	; 0x2000
     7c6:	7008      	strb	r0, [r1, #0]
	udi_cdc_rx_start(port);
     7c8:	f240 6361 	movw	r3, #1633	; 0x661
     7cc:	f2c0 0300 	movt	r3, #0
     7d0:	4798      	blx	r3
}
     7d2:	b002      	add	sp, #8
     7d4:	bd10      	pop	{r4, pc}
     7d6:	bf00      	nop

000007d8 <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
     7d8:	b538      	push	{r3, r4, r5, lr}
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
     7da:	f04f 0400 	mov.w	r4, #0
     7de:	f240 5345 	movw	r3, #1349	; 0x545
     7e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     7e6:	701c      	strb	r4, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
     7e8:	f240 50e8 	movw	r0, #1512	; 0x5e8
     7ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
     7f0:	7004      	strb	r4, [r0, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
     7f2:	f240 617c 	movw	r1, #1660	; 0x67c
     7f6:	f2c2 0100 	movt	r1, #8192	; 0x2000
     7fa:	700c      	strb	r4, [r1, #0]
	udi_cdc_tx_buf_sel[port] = 0;
     7fc:	f240 5248 	movw	r2, #1352	; 0x548
     800:	f2c2 0200 	movt	r2, #8192	; 0x2000
     804:	7014      	strb	r4, [r2, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
     806:	f240 534c 	movw	r3, #1356	; 0x54c
     80a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     80e:	4625      	mov	r5, r4
     810:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
     812:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
     814:	f240 50dc 	movw	r0, #1500	; 0x5dc
     818:	f2c2 0000 	movt	r0, #8192	; 0x2000
     81c:	8004      	strh	r4, [r0, #0]
	udi_cdc_tx_send(port);
     81e:	4620      	mov	r0, r4
     820:	f240 3121 	movw	r1, #801	; 0x321
     824:	f2c0 0100 	movt	r1, #0
     828:	4788      	blx	r1

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
     82a:	f240 6278 	movw	r2, #1656	; 0x678
     82e:	f2c2 0200 	movt	r2, #8192	; 0x2000
     832:	7014      	strb	r4, [r2, #0]
	udi_cdc_rx_buf_sel[port] = 0;
     834:	f240 53e4 	movw	r3, #1508	; 0x5e4
     838:	f2c2 0300 	movt	r3, #8192	; 0x2000
     83c:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
     83e:	f240 50d0 	movw	r0, #1488	; 0x5d0
     842:	f2c2 0000 	movt	r0, #8192	; 0x2000
     846:	8004      	strh	r4, [r0, #0]
	udi_cdc_rx_pos[port] = 0;
     848:	f240 51d8 	movw	r1, #1496	; 0x5d8
     84c:	f2c2 0100 	movt	r1, #8192	; 0x2000
     850:	800c      	strh	r4, [r1, #0]
	if (!udi_cdc_rx_start(port)) {
     852:	4620      	mov	r0, r4
     854:	f240 6261 	movw	r2, #1633	; 0x661
     858:	f2c0 0200 	movt	r2, #0
     85c:	4790      	blx	r2
     85e:	b198      	cbz	r0, 888 <udi_cdc_data_enable+0xb0>
		return false;
	}
	udi_cdc_nb_data_enabled++;
     860:	f240 5345 	movw	r3, #1349	; 0x545
     864:	f2c2 0300 	movt	r3, #8192	; 0x2000
     868:	7818      	ldrb	r0, [r3, #0]
     86a:	f100 0001 	add.w	r0, r0, #1
     86e:	b2c1      	uxtb	r1, r0
     870:	7019      	strb	r1, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
     872:	781a      	ldrb	r2, [r3, #0]
     874:	2a01      	cmp	r2, #1
     876:	d10a      	bne.n	88e <udi_cdc_data_enable+0xb6>
		udi_cdc_data_running = true;
     878:	f04f 0001 	mov.w	r0, #1
     87c:	f240 5344 	movw	r3, #1348	; 0x544
     880:	f2c2 0300 	movt	r3, #8192	; 0x2000
     884:	7018      	strb	r0, [r3, #0]
     886:	bd38      	pop	{r3, r4, r5, pc}
	udi_cdc_rx_trans_ongoing[port] = false;
	udi_cdc_rx_buf_sel[port] = 0;
	udi_cdc_rx_buf_nb[port][0] = 0;
	udi_cdc_rx_pos[port] = 0;
	if (!udi_cdc_rx_start(port)) {
		return false;
     888:	f04f 0000 	mov.w	r0, #0
     88c:	bd38      	pop	{r3, r4, r5, pc}
	}
	udi_cdc_nb_data_enabled++;
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
		udi_cdc_data_running = true;
	}
	return true;
     88e:	f04f 0001 	mov.w	r0, #1
}
     892:	bd38      	pop	{r3, r4, r5, pc}

00000894 <udi_cdc_is_rx_ready>:
{
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
}

bool udi_cdc_is_rx_ready(void)
{
     894:	b508      	push	{r3, lr}
	return udi_cdc_multi_is_rx_ready(0);
     896:	f04f 0000 	mov.w	r0, #0
     89a:	f240 634d 	movw	r3, #1613	; 0x64d
     89e:	f2c0 0300 	movt	r3, #0
     8a2:	4798      	blx	r3
}
     8a4:	bd08      	pop	{r3, pc}
     8a6:	bf00      	nop

000008a8 <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
     8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8ac:	b083      	sub	sp, #12

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
     8ae:	f240 533c 	movw	r3, #1340	; 0x53c
     8b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     8b6:	f893 b006 	ldrb.w	fp, [r3, #6]
     8ba:	f1bb 0f09 	cmp.w	fp, #9
     8be:	bf14      	ite	ne
     8c0:	f04f 0b00 	movne.w	fp, #0
     8c4:	f04f 0b01 	moveq.w	fp, #1
}

int udi_cdc_multi_getc(uint8_t port)
{
	irqflags_t flags;
	int rx_data = 0;
     8c8:	f04f 0a00 	mov.w	sl, #0
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
     8cc:	f240 04d4 	movw	r4, #212	; 0xd4
     8d0:	f2c2 0400 	movt	r4, #8192	; 0x2000
     8d4:	46d1      	mov	r9, sl
     8d6:	46d0      	mov	r8, sl
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
     8d8:	f240 55d8 	movw	r5, #1496	; 0x5d8
     8dc:	f2c2 0500 	movt	r5, #8192	; 0x2000
	buf_sel = udi_cdc_rx_buf_sel[port];
     8e0:	f240 57e4 	movw	r7, #1508	; 0x5e4
     8e4:	f2c2 0700 	movt	r7, #8192	; 0x2000
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
     8e8:	f240 56d0 	movw	r6, #1488	; 0x5d0
     8ec:	f2c2 0600 	movt	r6, #8192	; 0x2000
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
     8f0:	f240 50f8 	movw	r0, #1528	; 0x5f8
     8f4:	f2c2 0000 	movt	r0, #8192	; 0x2000
     8f8:	9001      	str	r0, [sp, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     8fa:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     8fe:	b672      	cpsid	i
     900:	f3bf 8f5f 	dmb	sy
     904:	f884 8000 	strb.w	r8, [r4]
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
     908:	882a      	ldrh	r2, [r5, #0]
     90a:	b293      	uxth	r3, r2
	buf_sel = udi_cdc_rx_buf_sel[port];
     90c:	7838      	ldrb	r0, [r7, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
     90e:	b929      	cbnz	r1, 91c <udi_cdc_multi_getc+0x74>
		cpu_irq_enable();
     910:	f04f 0101 	mov.w	r1, #1
     914:	7021      	strb	r1, [r4, #0]
     916:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     91a:	b662      	cpsie	i
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
     91c:	f836 2010 	ldrh.w	r2, [r6, r0, lsl #1]
     920:	429a      	cmp	r2, r3
     922:	d809      	bhi.n	938 <udi_cdc_multi_getc+0x90>
		if (!udi_cdc_data_running) {
     924:	f240 5044 	movw	r0, #1348	; 0x544
     928:	f2c2 0000 	movt	r0, #8192	; 0x2000
     92c:	7802      	ldrb	r2, [r0, #0]
     92e:	2a00      	cmp	r2, #0
     930:	d1e3      	bne.n	8fa <udi_cdc_multi_getc+0x52>
			return 0;
     932:	f04f 0a00 	mov.w	sl, #0
     936:	e016      	b.n	966 <udi_cdc_multi_getc+0xbe>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
     938:	eb03 1080 	add.w	r0, r3, r0, lsl #6
     93c:	9901      	ldr	r1, [sp, #4]
     93e:	5c0a      	ldrb	r2, [r1, r0]
     940:	ea4a 0a02 	orr.w	sl, sl, r2
	udi_cdc_rx_pos[port] = pos+1;
     944:	f103 0301 	add.w	r3, r3, #1
     948:	b29b      	uxth	r3, r3
     94a:	802b      	strh	r3, [r5, #0]

	udi_cdc_rx_start(port);
     94c:	4648      	mov	r0, r9
     94e:	f240 6161 	movw	r1, #1633	; 0x661
     952:	f2c0 0100 	movt	r1, #0
     956:	4788      	blx	r1

	if (b_databit_9) {
     958:	f1bb 0f00 	cmp.w	fp, #0
     95c:	d003      	beq.n	966 <udi_cdc_multi_getc+0xbe>
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
     95e:	ea4f 2a0a 	mov.w	sl, sl, lsl #8

	udi_cdc_rx_start(port);

	if (b_databit_9) {
		// Receive MSB
		b_databit_9 = false;
     962:	46cb      	mov	fp, r9
		rx_data = rx_data << 8;
		goto udi_cdc_getc_process_one_byte;
     964:	e7c9      	b.n	8fa <udi_cdc_multi_getc+0x52>
	}
	return rx_data;
}
     966:	4650      	mov	r0, sl
     968:	b003      	add	sp, #12
     96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     96e:	bf00      	nop

00000970 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
     970:	b508      	push	{r3, lr}
	return udi_cdc_multi_getc(0);
     972:	f04f 0000 	mov.w	r0, #0
     976:	f640 03a9 	movw	r3, #2217	; 0x8a9
     97a:	f2c0 0300 	movt	r3, #0
     97e:	4798      	blx	r3
}
     980:	bd08      	pop	{r3, pc}
     982:	bf00      	nop

00000984 <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     984:	f240 6384 	movw	r3, #1668	; 0x684
     988:	f2c2 0300 	movt	r3, #8192	; 0x2000
     98c:	6818      	ldr	r0, [r3, #0]
     98e:	6801      	ldr	r1, [r0, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     990:	884a      	ldrh	r2, [r1, #2]
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
     992:	1888      	adds	r0, r1, r2
     994:	4770      	bx	lr
     996:	bf00      	nop

00000998 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
     998:	b538      	push	{r3, r4, r5, lr}
     99a:	4605      	mov	r5, r0
     99c:	460c      	mov	r4, r1
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
     99e:	f640 1385 	movw	r3, #2437	; 0x985
     9a2:	f2c0 0300 	movt	r3, #0
     9a6:	4798      	blx	r3
     9a8:	4602      	mov	r2, r0
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     9aa:	7828      	ldrb	r0, [r5, #0]
     9ac:	1828      	adds	r0, r5, r0
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     9ae:	4282      	cmp	r2, r0
     9b0:	d911      	bls.n	9d6 <udc_next_desc_in_iface+0x3e>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     9b2:	7841      	ldrb	r1, [r0, #1]
     9b4:	2904      	cmp	r1, #4
     9b6:	d011      	beq.n	9dc <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     9b8:	42a1      	cmp	r1, r4
     9ba:	d105      	bne.n	9c8 <udc_next_desc_in_iface+0x30>
     9bc:	bd38      	pop	{r3, r4, r5, pc}
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     9be:	7841      	ldrb	r1, [r0, #1]
     9c0:	2904      	cmp	r1, #4
     9c2:	d00e      	beq.n	9e2 <udc_next_desc_in_iface+0x4a>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     9c4:	42a1      	cmp	r1, r4
     9c6:	d00e      	beq.n	9e6 <udc_next_desc_in_iface+0x4e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     9c8:	7803      	ldrb	r3, [r0, #0]
     9ca:	18c0      	adds	r0, r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     9cc:	4282      	cmp	r2, r0
     9ce:	d8f6      	bhi.n	9be <udc_next_desc_in_iface+0x26>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
     9d0:	f04f 0000 	mov.w	r0, #0
     9d4:	bd38      	pop	{r3, r4, r5, pc}
     9d6:	f04f 0000 	mov.w	r0, #0
     9da:	bd38      	pop	{r3, r4, r5, pc}
     9dc:	f04f 0000 	mov.w	r0, #0
     9e0:	bd38      	pop	{r3, r4, r5, pc}
     9e2:	f04f 0000 	mov.w	r0, #0
}
     9e6:	bd38      	pop	{r3, r4, r5, pc}

000009e8 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
     9e8:	b570      	push	{r4, r5, r6, lr}
     9ea:	4605      	mov	r5, r0
     9ec:	460e      	mov	r6, r1
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
     9ee:	f240 638e 	movw	r3, #1678	; 0x68e
     9f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     9f6:	7818      	ldrb	r0, [r3, #0]
     9f8:	2800      	cmp	r0, #0
     9fa:	d031      	beq.n	a60 <udc_update_iface_desc+0x78>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     9fc:	f240 6184 	movw	r1, #1668	; 0x684
     a00:	f2c2 0100 	movt	r1, #8192	; 0x2000
     a04:	680a      	ldr	r2, [r1, #0]
     a06:	6814      	ldr	r4, [r2, #0]
     a08:	7923      	ldrb	r3, [r4, #4]
     a0a:	42ab      	cmp	r3, r5
     a0c:	d92b      	bls.n	a66 <udc_update_iface_desc+0x7e>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
     a0e:	f240 6090 	movw	r0, #1680	; 0x690
     a12:	f2c2 0000 	movt	r0, #8192	; 0x2000
     a16:	6004      	str	r4, [r0, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
     a18:	f640 1185 	movw	r1, #2437	; 0x985
     a1c:	f2c0 0100 	movt	r1, #0
     a20:	4788      	blx	r1
	while (ptr_end_desc >
     a22:	4284      	cmp	r4, r0
     a24:	d222      	bcs.n	a6c <udc_update_iface_desc+0x84>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
     a26:	7862      	ldrb	r2, [r4, #1]
     a28:	2a04      	cmp	r2, #4
     a2a:	d10d      	bne.n	a48 <udc_update_iface_desc+0x60>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     a2c:	78a3      	ldrb	r3, [r4, #2]
     a2e:	42ab      	cmp	r3, r5
     a30:	d10a      	bne.n	a48 <udc_update_iface_desc+0x60>
     a32:	78e1      	ldrb	r1, [r4, #3]
     a34:	42b1      	cmp	r1, r6
     a36:	d107      	bne.n	a48 <udc_update_iface_desc+0x60>
     a38:	f240 6390 	movw	r3, #1680	; 0x690
     a3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     a40:	601c      	str	r4, [r3, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
     a42:	f04f 0001 	mov.w	r0, #1
     a46:	bd70      	pop	{r4, r5, r6, pc}
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     a48:	7822      	ldrb	r2, [r4, #0]
     a4a:	18a4      	adds	r4, r4, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
     a4c:	42a0      	cmp	r0, r4
     a4e:	d8ea      	bhi.n	a26 <udc_update_iface_desc+0x3e>
     a50:	f240 6090 	movw	r0, #1680	; 0x690
     a54:	f2c2 0000 	movt	r0, #8192	; 0x2000
     a58:	6004      	str	r4, [r0, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
     a5a:	f04f 0000 	mov.w	r0, #0
     a5e:	bd70      	pop	{r4, r5, r6, pc}
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
     a60:	f04f 0000 	mov.w	r0, #0
     a64:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
     a66:	f04f 0000 	mov.w	r0, #0
     a6a:	bd70      	pop	{r4, r5, r6, pc}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
     a6c:	f04f 0000 	mov.w	r0, #0
}
     a70:	bd70      	pop	{r4, r5, r6, pc}
     a72:	bf00      	nop

00000a74 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
     a74:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
     a76:	f640 03d8 	movw	r3, #2264	; 0x8d8
     a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     a7e:	8858      	ldrh	r0, [r3, #2]
     a80:	f000 007f 	and.w	r0, r0, #127	; 0x7f
     a84:	f242 11a5 	movw	r1, #8613	; 0x21a5
     a88:	f2c0 0100 	movt	r1, #0
     a8c:	4788      	blx	r1
     a8e:	bd08      	pop	{r3, pc}

00000a90 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
     a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     a94:	4680      	mov	r8, r0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
     a96:	f640 13e9 	movw	r3, #2537	; 0x9e9
     a9a:	f2c0 0300 	movt	r3, #0
     a9e:	4798      	blx	r3
     aa0:	b338      	cbz	r0, af2 <udc_iface_enable+0x62>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     aa2:	f240 6090 	movw	r0, #1680	; 0x690
     aa6:	f2c2 0000 	movt	r0, #8192	; 0x2000
     aaa:	6804      	ldr	r4, [r0, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     aac:	f04f 0605 	mov.w	r6, #5
     ab0:	f640 1599 	movw	r5, #2457	; 0x999
     ab4:	f2c0 0500 	movt	r5, #0
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     ab8:	f242 2709 	movw	r7, #8713	; 0x2209
     abc:	f2c0 0700 	movt	r7, #0

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     ac0:	4620      	mov	r0, r4
     ac2:	4631      	mov	r1, r6
     ac4:	47a8      	blx	r5
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
     ac6:	4604      	mov	r4, r0
     ac8:	b138      	cbz	r0, ada <udc_iface_enable+0x4a>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     aca:	7880      	ldrb	r0, [r0, #2]
     acc:	78e1      	ldrb	r1, [r4, #3]
     ace:	88a2      	ldrh	r2, [r4, #4]
     ad0:	47b8      	blx	r7
     ad2:	2800      	cmp	r0, #0
     ad4:	d1f4      	bne.n	ac0 <udc_iface_enable+0x30>
     ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
     ada:	f240 6184 	movw	r1, #1668	; 0x684
     ade:	f2c2 0100 	movt	r1, #8192	; 0x2000
     ae2:	680a      	ldr	r2, [r1, #0]
     ae4:	6853      	ldr	r3, [r2, #4]
     ae6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
     aea:	6801      	ldr	r1, [r0, #0]
     aec:	4788      	blx	r1
     aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
		return false;
     af2:	f04f 0000 	mov.w	r0, #0
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
     af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     afa:	bf00      	nop

00000afc <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
     afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     b00:	4604      	mov	r4, r0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     b02:	f04f 0100 	mov.w	r1, #0
     b06:	f640 13e9 	movw	r3, #2537	; 0x9e9
     b0a:	f2c0 0300 	movt	r3, #0
     b0e:	4798      	blx	r3
     b10:	2800      	cmp	r0, #0
     b12:	d030      	beq.n	b76 <udc_iface_disable+0x7a>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     b14:	f240 6084 	movw	r0, #1668	; 0x684
     b18:	f2c2 0000 	movt	r0, #8192	; 0x2000
     b1c:	6801      	ldr	r1, [r0, #0]
     b1e:	684a      	ldr	r2, [r1, #4]
     b20:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     b24:	f8d8 300c 	ldr.w	r3, [r8, #12]
     b28:	4798      	blx	r3
     b2a:	4601      	mov	r1, r0
     b2c:	4620      	mov	r0, r4
     b2e:	f640 12e9 	movw	r2, #2537	; 0x9e9
     b32:	f2c0 0200 	movt	r2, #0
     b36:	4790      	blx	r2
     b38:	b308      	cbz	r0, b7e <udc_iface_disable+0x82>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     b3a:	f240 6490 	movw	r4, #1680	; 0x690
     b3e:	f2c2 0400 	movt	r4, #8192	; 0x2000
     b42:	6824      	ldr	r4, [r4, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     b44:	f04f 0605 	mov.w	r6, #5
     b48:	f640 1599 	movw	r5, #2457	; 0x999
     b4c:	f2c0 0500 	movt	r5, #0
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
     b50:	f242 5799 	movw	r7, #9625	; 0x2599
     b54:	f2c0 0700 	movt	r7, #0
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     b58:	4620      	mov	r0, r4
     b5a:	4631      	mov	r1, r6
     b5c:	47a8      	blx	r5
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
     b5e:	4604      	mov	r4, r0
     b60:	b110      	cbz	r0, b68 <udc_iface_disable+0x6c>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
     b62:	7880      	ldrb	r0, [r0, #2]
     b64:	47b8      	blx	r7
		}
     b66:	e7f7      	b.n	b58 <udc_iface_disable+0x5c>
	}
#endif

	// Disable interface
	udi_api->disable();
     b68:	f8d8 0004 	ldr.w	r0, [r8, #4]
     b6c:	4780      	blx	r0
	return true;
     b6e:	f04f 0001 	mov.w	r0, #1
     b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
     b76:	f04f 0000 	mov.w	r0, #0
     b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
		return false;
     b7e:	f04f 0000 	mov.w	r0, #0
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
     b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     b86:	bf00      	nop

00000b88 <udc_start>:
}

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
     b88:	b508      	push	{r3, lr}
	udd_enable();
     b8a:	f242 0349 	movw	r3, #8265	; 0x2049
     b8e:	f2c0 0300 	movt	r3, #0
     b92:	4798      	blx	r3
     b94:	bd08      	pop	{r3, pc}
     b96:	bf00      	nop

00000b98 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
     b98:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
     b9a:	f240 638e 	movw	r3, #1678	; 0x68e
     b9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ba2:	7818      	ldrb	r0, [r3, #0]
     ba4:	b1d8      	cbz	r0, bde <udc_reset+0x46>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     ba6:	f240 6184 	movw	r1, #1668	; 0x684
     baa:	f2c2 0100 	movt	r1, #8192	; 0x2000
     bae:	680a      	ldr	r2, [r1, #0]
     bb0:	6813      	ldr	r3, [r2, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     bb2:	7918      	ldrb	r0, [r3, #4]
     bb4:	b198      	cbz	r0, bde <udc_reset+0x46>
     bb6:	f04f 0400 	mov.w	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
     bba:	f640 26fd 	movw	r6, #2813	; 0xafd
     bbe:	f2c0 0600 	movt	r6, #0
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     bc2:	f240 6584 	movw	r5, #1668	; 0x684
     bc6:	f2c2 0500 	movt	r5, #8192	; 0x2000
				iface_num++) {
			udc_iface_disable(iface_num);
     bca:	4620      	mov	r0, r4
     bcc:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     bce:	f104 0401 	add.w	r4, r4, #1
     bd2:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     bd4:	6829      	ldr	r1, [r5, #0]
     bd6:	680a      	ldr	r2, [r1, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     bd8:	7913      	ldrb	r3, [r2, #4]
     bda:	42a3      	cmp	r3, r4
     bdc:	d8f5      	bhi.n	bca <udc_reset+0x32>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
     bde:	f240 608e 	movw	r0, #1678	; 0x68e
     be2:	f2c2 0000 	movt	r0, #8192	; 0x2000
     be6:	f04f 0100 	mov.w	r1, #0
     bea:	7001      	strb	r1, [r0, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
     bec:	f240 638c 	movw	r3, #1676	; 0x68c
     bf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     bf4:	f04f 0201 	mov.w	r2, #1
     bf8:	801a      	strh	r2, [r3, #0]
     bfa:	bd70      	pop	{r4, r5, r6, pc}

00000bfc <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     bfc:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
     bfe:	f240 638e 	movw	r3, #1678	; 0x68e
     c02:	f2c2 0300 	movt	r3, #8192	; 0x2000
     c06:	7818      	ldrb	r0, [r3, #0]
     c08:	b1d8      	cbz	r0, c42 <udc_sof_notify+0x46>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c0a:	f240 6184 	movw	r1, #1668	; 0x684
     c0e:	f2c2 0100 	movt	r1, #8192	; 0x2000
     c12:	680b      	ldr	r3, [r1, #0]
     c14:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     c16:	7910      	ldrb	r0, [r2, #4]
     c18:	b198      	cbz	r0, c42 <udc_sof_notify+0x46>
     c1a:	f04f 0400 	mov.w	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c1e:	f240 6584 	movw	r5, #1668	; 0x684
     c22:	f2c2 0500 	movt	r5, #8192	; 0x2000
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     c26:	685b      	ldr	r3, [r3, #4]
     c28:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
     c2c:	690a      	ldr	r2, [r1, #16]
     c2e:	b102      	cbz	r2, c32 <udc_sof_notify+0x36>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     c30:	4790      	blx	r2
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     c32:	f104 0401 	add.w	r4, r4, #1
     c36:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     c38:	682b      	ldr	r3, [r5, #0]
     c3a:	6818      	ldr	r0, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     c3c:	7901      	ldrb	r1, [r0, #4]
     c3e:	42a1      	cmp	r1, r4
     c40:	d8f1      	bhi.n	c26 <udc_sof_notify+0x2a>
     c42:	bd38      	pop	{r3, r4, r5, pc}

00000c44 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     c46:	f640 03d8 	movw	r3, #2264	; 0x8d8
     c4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     c4e:	f04f 0200 	mov.w	r2, #0
     c52:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
     c54:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
     c56:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
     c58:	7818      	ldrb	r0, [r3, #0]
     c5a:	f010 0f80 	tst.w	r0, #128	; 0x80
     c5e:	f000 82ba 	beq.w	11d6 <__stack_size__+0x1d6>
		if (udd_g_ctrlreq.req.wLength == 0) {
     c62:	f640 02d8 	movw	r2, #2264	; 0x8d8
     c66:	f2c2 0200 	movt	r2, #8192	; 0x2000
     c6a:	88d2      	ldrh	r2, [r2, #6]
     c6c:	2a00      	cmp	r2, #0
     c6e:	f040 82b7 	bne.w	11e0 <__stack_size__+0x1e0>
     c72:	e2a4      	b.n	11be <__stack_size__+0x1be>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     c74:	f010 001f 	ands.w	r0, r0, #31
     c78:	f040 8086 	bne.w	d88 <udc_process_setup+0x144>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     c7c:	f640 01d8 	movw	r1, #2264	; 0x8d8
     c80:	f2c2 0100 	movt	r1, #8192	; 0x2000
     c84:	784b      	ldrb	r3, [r1, #1]
     c86:	2b06      	cmp	r3, #6
     c88:	d016      	beq.n	cb8 <udc_process_setup+0x74>
     c8a:	2b08      	cmp	r3, #8
     c8c:	d069      	beq.n	d62 <udc_process_setup+0x11e>
     c8e:	2b00      	cmp	r3, #0
     c90:	d17a      	bne.n	d88 <udc_process_setup+0x144>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     c92:	2a02      	cmp	r2, #2
     c94:	d10d      	bne.n	cb2 <udc_process_setup+0x6e>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     c96:	f240 608c 	movw	r0, #1676	; 0x68c
     c9a:	f2c2 0000 	movt	r0, #8192	; 0x2000
     c9e:	f04f 0102 	mov.w	r1, #2
     ca2:	f242 13f9 	movw	r3, #8697	; 0x21f9
     ca6:	f2c0 0300 	movt	r3, #0
     caa:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
     cac:	f04f 0001 	mov.w	r0, #1
     cb0:	e20a      	b.n	10c8 <__stack_size__+0xc8>
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
		return false;
     cb2:	f04f 0000 	mov.w	r0, #0
     cb6:	e207      	b.n	10c8 <__stack_size__+0xc8>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     cb8:	f640 00d8 	movw	r0, #2264	; 0x8d8
     cbc:	f2c2 0000 	movt	r0, #8192	; 0x2000
     cc0:	8841      	ldrh	r1, [r0, #2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     cc2:	ea4f 2311 	mov.w	r3, r1, lsr #8
     cc6:	2b02      	cmp	r3, #2
     cc8:	d010      	beq.n	cec <udc_process_setup+0xa8>
     cca:	2b03      	cmp	r3, #3
     ccc:	d025      	beq.n	d1a <udc_process_setup+0xd6>
     cce:	2b01      	cmp	r3, #1
     cd0:	d13b      	bne.n	d4a <udc_process_setup+0x106>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     cd2:	f240 0260 	movw	r2, #96	; 0x60
     cd6:	f2c2 0200 	movt	r2, #8192	; 0x2000
     cda:	6811      	ldr	r1, [r2, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     cdc:	4608      	mov	r0, r1
     cde:	7809      	ldrb	r1, [r1, #0]
     ce0:	f242 13f9 	movw	r3, #8697	; 0x21f9
     ce4:	f2c0 0300 	movt	r3, #0
     ce8:	4798      	blx	r3
     cea:	e01e      	b.n	d2a <udc_process_setup+0xe6>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     cec:	b2c8      	uxtb	r0, r1
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     cee:	f240 0160 	movw	r1, #96	; 0x60
     cf2:	f2c2 0100 	movt	r1, #8192	; 0x2000
     cf6:	680b      	ldr	r3, [r1, #0]
     cf8:	7c5a      	ldrb	r2, [r3, #17]
     cfa:	4282      	cmp	r2, r0
     cfc:	d928      	bls.n	d50 <udc_process_setup+0x10c>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     cfe:	49a6      	ldr	r1, [pc, #664]	; (f98 <udc_process_setup+0x354>)
     d00:	684b      	ldr	r3, [r1, #4]
     d02:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     d06:	4610      	mov	r0, r2
     d08:	8851      	ldrh	r1, [r2, #2]
     d0a:	4ba4      	ldr	r3, [pc, #656]	; (f9c <udc_process_setup+0x358>)
     d0c:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     d0e:	48a4      	ldr	r0, [pc, #656]	; (fa0 <udc_process_setup+0x35c>)
     d10:	6881      	ldr	r1, [r0, #8]
     d12:	f04f 0202 	mov.w	r2, #2
     d16:	704a      	strb	r2, [r1, #1]
     d18:	e007      	b.n	d2a <udc_process_setup+0xe6>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     d1a:	f011 0fff 	tst.w	r1, #255	; 0xff
     d1e:	d11a      	bne.n	d56 <udc_process_setup+0x112>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     d20:	48a0      	ldr	r0, [pc, #640]	; (fa4 <udc_process_setup+0x360>)
     d22:	f04f 0104 	mov.w	r1, #4
     d26:	4a9d      	ldr	r2, [pc, #628]	; (f9c <udc_process_setup+0x358>)
     d28:	4790      	blx	r2
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     d2a:	f640 03d8 	movw	r3, #2264	; 0x8d8
     d2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d32:	88d8      	ldrh	r0, [r3, #6]
     d34:	8999      	ldrh	r1, [r3, #12]
     d36:	4281      	cmp	r1, r0
     d38:	d910      	bls.n	d5c <udc_process_setup+0x118>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     d3a:	f640 02d8 	movw	r2, #2264	; 0x8d8
     d3e:	f2c2 0200 	movt	r2, #8192	; 0x2000
     d42:	8190      	strh	r0, [r2, #12]
	}
	return true;
     d44:	f04f 0001 	mov.w	r0, #1
     d48:	e1be      	b.n	10c8 <__stack_size__+0xc8>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     d4a:	f04f 0000 	mov.w	r0, #0
     d4e:	e1bb      	b.n	10c8 <__stack_size__+0xc8>
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
     d50:	f04f 0000 	mov.w	r0, #0
     d54:	e1b8      	b.n	10c8 <__stack_size__+0xc8>
#endif

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
     d56:	f04f 0000 	mov.w	r0, #0
     d5a:	e1b5      	b.n	10c8 <__stack_size__+0xc8>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
	}
	return true;
     d5c:	f04f 0001 	mov.w	r0, #1
     d60:	e1b2      	b.n	10c8 <__stack_size__+0xc8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     d62:	2a01      	cmp	r2, #1
     d64:	d10d      	bne.n	d82 <udc_process_setup+0x13e>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     d66:	f240 608e 	movw	r0, #1678	; 0x68e
     d6a:	f2c2 0000 	movt	r0, #8192	; 0x2000
     d6e:	f04f 0101 	mov.w	r1, #1
     d72:	f242 12f9 	movw	r2, #8697	; 0x21f9
     d76:	f2c0 0200 	movt	r2, #0
     d7a:	4790      	blx	r2
	return true;
     d7c:	f04f 0001 	mov.w	r0, #1
     d80:	e1a2      	b.n	10c8 <__stack_size__+0xc8>
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
		return false;
     d82:	f04f 0000 	mov.w	r0, #0
     d86:	e19f      	b.n	10c8 <__stack_size__+0xc8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     d88:	2801      	cmp	r0, #1
     d8a:	d134      	bne.n	df6 <udc_process_setup+0x1b2>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     d8c:	f640 01d8 	movw	r1, #2264	; 0x8d8
     d90:	f2c2 0100 	movt	r1, #8192	; 0x2000
     d94:	784b      	ldrb	r3, [r1, #1]
     d96:	2b0a      	cmp	r3, #10
     d98:	d12d      	bne.n	df6 <udc_process_setup+0x1b2>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     d9a:	2a01      	cmp	r2, #1
     d9c:	d11f      	bne.n	dde <udc_process_setup+0x19a>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     d9e:	4882      	ldr	r0, [pc, #520]	; (fa8 <udc_process_setup+0x364>)
     da0:	7803      	ldrb	r3, [r0, #0]
     da2:	b1fb      	cbz	r3, de4 <udc_process_setup+0x1a0>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     da4:	4c7e      	ldr	r4, [pc, #504]	; (fa0 <udc_process_setup+0x35c>)
     da6:	7924      	ldrb	r4, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     da8:	4d80      	ldr	r5, [pc, #512]	; (fac <udc_process_setup+0x368>)
     daa:	682d      	ldr	r5, [r5, #0]
     dac:	6829      	ldr	r1, [r5, #0]
     dae:	790a      	ldrb	r2, [r1, #4]
     db0:	42a2      	cmp	r2, r4
     db2:	d91a      	bls.n	dea <udc_process_setup+0x1a6>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     db4:	4620      	mov	r0, r4
     db6:	f04f 0100 	mov.w	r1, #0
     dba:	4b7d      	ldr	r3, [pc, #500]	; (fb0 <udc_process_setup+0x36c>)
     dbc:	4798      	blx	r3
     dbe:	b1b8      	cbz	r0, df0 <udc_process_setup+0x1ac>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     dc0:	6868      	ldr	r0, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
     dc2:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
     dc6:	68ca      	ldr	r2, [r1, #12]
     dc8:	4790      	blx	r2
     dca:	4b7a      	ldr	r3, [pc, #488]	; (fb4 <udc_process_setup+0x370>)
     dcc:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     dce:	4618      	mov	r0, r3
     dd0:	f04f 0101 	mov.w	r1, #1
     dd4:	4a71      	ldr	r2, [pc, #452]	; (f9c <udc_process_setup+0x358>)
     dd6:	4790      	blx	r2
	return true;
     dd8:	f04f 0001 	mov.w	r0, #1
     ddc:	e174      	b.n	10c8 <__stack_size__+0xc8>
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
		return false; // Error in request
     dde:	f04f 0000 	mov.w	r0, #0
     de2:	e171      	b.n	10c8 <__stack_size__+0xc8>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
     de4:	f04f 0000 	mov.w	r0, #0
     de8:	e16e      	b.n	10c8 <__stack_size__+0xc8>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
     dea:	f04f 0000 	mov.w	r0, #0
     dee:	e16b      	b.n	10c8 <__stack_size__+0xc8>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
		return false;
     df0:	f04f 0000 	mov.w	r0, #0
     df4:	e168      	b.n	10c8 <__stack_size__+0xc8>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     df6:	2802      	cmp	r0, #2
     df8:	f040 8168 	bne.w	10cc <__stack_size__+0xcc>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     dfc:	f640 00d8 	movw	r0, #2264	; 0x8d8
     e00:	f2c2 0000 	movt	r0, #8192	; 0x2000
     e04:	7841      	ldrb	r1, [r0, #1]
     e06:	2900      	cmp	r1, #0
     e08:	f040 8156 	bne.w	10b8 <__stack_size__+0xb8>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     e0c:	2a02      	cmp	r2, #2
     e0e:	d10d      	bne.n	e2c <udc_process_setup+0x1e8>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     e10:	4a63      	ldr	r2, [pc, #396]	; (fa0 <udc_process_setup+0x35c>)
     e12:	7910      	ldrb	r0, [r2, #4]
     e14:	4b68      	ldr	r3, [pc, #416]	; (fb8 <udc_process_setup+0x374>)
     e16:	4798      	blx	r3
     e18:	4968      	ldr	r1, [pc, #416]	; (fbc <udc_process_setup+0x378>)
     e1a:	8008      	strh	r0, [r1, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     e1c:	4608      	mov	r0, r1
     e1e:	f04f 0102 	mov.w	r1, #2
     e22:	4a5e      	ldr	r2, [pc, #376]	; (f9c <udc_process_setup+0x358>)
     e24:	4790      	blx	r2
			sizeof(udc_ep_status));
	return true;
     e26:	f04f 0001 	mov.w	r0, #1
     e2a:	e14d      	b.n	10c8 <__stack_size__+0xc8>
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
		return false;
     e2c:	f04f 0000 	mov.w	r0, #0
     e30:	e14a      	b.n	10c8 <__stack_size__+0xc8>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     e32:	f010 031f 	ands.w	r3, r0, #31
     e36:	f040 80c3 	bne.w	fc0 <udc_process_setup+0x37c>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     e3a:	f640 01d8 	movw	r1, #2264	; 0x8d8
     e3e:	f2c2 0100 	movt	r1, #8192	; 0x2000
     e42:	784a      	ldrb	r2, [r1, #1]
     e44:	f102 30ff 	add.w	r0, r2, #4294967295
     e48:	2808      	cmp	r0, #8
     e4a:	f200 80b9 	bhi.w	fc0 <udc_process_setup+0x37c>
     e4e:	e8df f010 	tbh	[pc, r0, lsl #1]
     e52:	001e      	.short	0x001e
     e54:	013600b7 	.word	0x013600b7
     e58:	000900b7 	.word	0x000900b7
     e5c:	00b700b7 	.word	0x00b700b7
     e60:	003c00b7 	.word	0x003c00b7
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     e64:	f640 00d8 	movw	r0, #2264	; 0x8d8
     e68:	f2c2 0000 	movt	r0, #8192	; 0x2000
     e6c:	88c1      	ldrh	r1, [r0, #6]
     e6e:	b959      	cbnz	r1, e88 <udc_process_setup+0x244>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     e70:	f640 03d8 	movw	r3, #2264	; 0x8d8
     e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
     e78:	f640 2275 	movw	r2, #2677	; 0xa75
     e7c:	f2c0 0200 	movt	r2, #0
     e80:	611a      	str	r2, [r3, #16]
	return true;
     e82:	f04f 0001 	mov.w	r0, #1
     e86:	e11f      	b.n	10c8 <__stack_size__+0xc8>
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     e88:	f04f 0000 	mov.w	r0, #0
     e8c:	e11c      	b.n	10c8 <__stack_size__+0xc8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     e8e:	f640 00d8 	movw	r0, #2264	; 0x8d8
     e92:	f2c2 0000 	movt	r0, #8192	; 0x2000
     e96:	88c1      	ldrh	r1, [r0, #6]
     e98:	b989      	cbnz	r1, ebe <udc_process_setup+0x27a>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     e9a:	f640 03d8 	movw	r3, #2264	; 0x8d8
     e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ea2:	885a      	ldrh	r2, [r3, #2]
     ea4:	2a01      	cmp	r2, #1
     ea6:	d10d      	bne.n	ec4 <udc_process_setup+0x280>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     ea8:	f240 608c 	movw	r0, #1676	; 0x68c
     eac:	f2c2 0000 	movt	r0, #8192	; 0x2000
     eb0:	8801      	ldrh	r1, [r0, #0]
     eb2:	f021 0302 	bic.w	r3, r1, #2
     eb6:	8003      	strh	r3, [r0, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
     eb8:	f04f 0001 	mov.w	r0, #1
     ebc:	e104      	b.n	10c8 <__stack_size__+0xc8>
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     ebe:	f04f 0000 	mov.w	r0, #0
     ec2:	e101      	b.n	10c8 <__stack_size__+0xc8>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
	}
	return false;
     ec4:	f04f 0000 	mov.w	r0, #0
     ec8:	e0fe      	b.n	10c8 <__stack_size__+0xc8>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     eca:	f640 02d8 	movw	r2, #2264	; 0x8d8
     ece:	f2c2 0200 	movt	r2, #8192	; 0x2000
     ed2:	88d0      	ldrh	r0, [r2, #6]
     ed4:	2800      	cmp	r0, #0
     ed6:	d14c      	bne.n	f72 <udc_process_setup+0x32e>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     ed8:	f242 11d1 	movw	r1, #8657	; 0x21d1
     edc:	f2c0 0100 	movt	r1, #0
     ee0:	4788      	blx	r1
     ee2:	2800      	cmp	r0, #0
     ee4:	d048      	beq.n	f78 <udc_process_setup+0x334>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     ee6:	f640 03d8 	movw	r3, #2264	; 0x8d8
     eea:	f2c2 0300 	movt	r3, #8192	; 0x2000
     eee:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
     ef0:	f240 0060 	movw	r0, #96	; 0x60
     ef4:	f2c2 0000 	movt	r0, #8192	; 0x2000
     ef8:	6801      	ldr	r1, [r0, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     efa:	7c4b      	ldrb	r3, [r1, #17]
     efc:	429a      	cmp	r2, r3
     efe:	dc3e      	bgt.n	f7e <udc_process_setup+0x33a>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     f00:	f640 3299 	movw	r2, #2969	; 0xb99
     f04:	f2c0 0200 	movt	r2, #0
     f08:	4790      	blx	r2

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     f0a:	f640 00d8 	movw	r0, #2264	; 0x8d8
     f0e:	f2c2 0000 	movt	r0, #8192	; 0x2000
     f12:	7881      	ldrb	r1, [r0, #2]
     f14:	f240 638e 	movw	r3, #1678	; 0x68e
     f18:	f2c2 0300 	movt	r3, #8192	; 0x2000
     f1c:	7019      	strb	r1, [r3, #0]
	if (udc_num_configuration == 0) {
     f1e:	b389      	cbz	r1, f84 <udc_process_setup+0x340>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     f20:	f101 33ff 	add.w	r3, r1, #4294967295
     f24:	f240 0260 	movw	r2, #96	; 0x60
     f28:	f2c2 0200 	movt	r2, #8192	; 0x2000
     f2c:	6852      	ldr	r2, [r2, #4]
     f2e:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
     f32:	f240 6184 	movw	r1, #1668	; 0x684
     f36:	f2c2 0100 	movt	r1, #8192	; 0x2000
     f3a:	6008      	str	r0, [r1, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     f40:	791a      	ldrb	r2, [r3, #4]
     f42:	b312      	cbz	r2, f8a <udc_process_setup+0x346>
     f44:	f04f 0400 	mov.w	r4, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     f48:	4626      	mov	r6, r4
     f4a:	f640 2591 	movw	r5, #2705	; 0xa91
     f4e:	f2c0 0500 	movt	r5, #0
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f52:	460f      	mov	r7, r1
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     f54:	4620      	mov	r0, r4
     f56:	4631      	mov	r1, r6
     f58:	47a8      	blx	r5
     f5a:	b1c8      	cbz	r0, f90 <udc_process_setup+0x34c>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     f5c:	f104 0401 	add.w	r4, r4, #1
     f60:	b2e4      	uxtb	r4, r4
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     f62:	6838      	ldr	r0, [r7, #0]
     f64:	6801      	ldr	r1, [r0, #0]
     f66:	790b      	ldrb	r3, [r1, #4]
     f68:	42a3      	cmp	r3, r4
     f6a:	d8f3      	bhi.n	f54 <udc_process_setup+0x310>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
     f6c:	f04f 0001 	mov.w	r0, #1
     f70:	e0aa      	b.n	10c8 <__stack_size__+0xc8>
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
		return false;
     f72:	f04f 0000 	mov.w	r0, #0
     f76:	e0a7      	b.n	10c8 <__stack_size__+0xc8>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
		return false;
     f78:	f04f 0000 	mov.w	r0, #0
     f7c:	e0a4      	b.n	10c8 <__stack_size__+0xc8>
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
     f7e:	f04f 0000 	mov.w	r0, #0
     f82:	e0a1      	b.n	10c8 <__stack_size__+0xc8>
	udc_reset();

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
	if (udc_num_configuration == 0) {
		return true; // Default empty configuration requested
     f84:	f04f 0001 	mov.w	r0, #1
     f88:	e09e      	b.n	10c8 <__stack_size__+0xc8>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
     f8a:	f04f 0001 	mov.w	r0, #1
     f8e:	e09b      	b.n	10c8 <__stack_size__+0xc8>
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
     f90:	f04f 0000 	mov.w	r0, #0
     f94:	e098      	b.n	10c8 <__stack_size__+0xc8>
     f96:	bf00      	nop
     f98:	20000060 	.word	0x20000060
     f9c:	000021f9 	.word	0x000021f9
     fa0:	200008d8 	.word	0x200008d8
     fa4:	200000d0 	.word	0x200000d0
     fa8:	2000068e 	.word	0x2000068e
     fac:	20000684 	.word	0x20000684
     fb0:	000009e9 	.word	0x000009e9
     fb4:	20000688 	.word	0x20000688
     fb8:	000022b9 	.word	0x000022b9
     fbc:	2000068a 	.word	0x2000068a
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     fc0:	2b01      	cmp	r3, #1
     fc2:	d12d      	bne.n	1020 <__stack_size__+0x20>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     fc4:	f640 01d8 	movw	r1, #2264	; 0x8d8
     fc8:	f2c2 0100 	movt	r1, #8192	; 0x2000
     fcc:	784a      	ldrb	r2, [r1, #1]
     fce:	2a0b      	cmp	r2, #11
     fd0:	d126      	bne.n	1020 <__stack_size__+0x20>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     fd2:	f640 00d8 	movw	r0, #2264	; 0x8d8
     fd6:	f2c2 0000 	movt	r0, #8192	; 0x2000
     fda:	88c2      	ldrh	r2, [r0, #6]
     fdc:	b9ba      	cbnz	r2, 100e <__stack_size__+0xe>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     fde:	f240 638e 	movw	r3, #1678	; 0x68e
     fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     fe6:	7819      	ldrb	r1, [r3, #0]
     fe8:	b1a1      	cbz	r1, 1014 <__stack_size__+0x14>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     fea:	f640 05d8 	movw	r5, #2264	; 0x8d8
     fee:	f2c2 0500 	movt	r5, #8192	; 0x2000
     ff2:	792c      	ldrb	r4, [r5, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     ff4:	886d      	ldrh	r5, [r5, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     ff6:	4620      	mov	r0, r4
     ff8:	f640 22fd 	movw	r2, #2813	; 0xafd
     ffc:	f2c0 0200 	movt	r2, #0
    1000:	4790      	blx	r2
    1002:	b150      	cbz	r0, 101a <__stack_size__+0x1a>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1004:	4620      	mov	r0, r4
    1006:	b2e9      	uxtb	r1, r5
    1008:	4b78      	ldr	r3, [pc, #480]	; (11ec <__stack_size__+0x1ec>)
    100a:	4798      	blx	r3
    100c:	e05c      	b.n	10c8 <__stack_size__+0xc8>
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
		return false; // Error in request
    100e:	f04f 0000 	mov.w	r0, #0
    1012:	e059      	b.n	10c8 <__stack_size__+0xc8>
	}
	if (!udc_num_configuration) {
		return false; // The device is not is configured state yet
    1014:	f04f 0000 	mov.w	r0, #0
    1018:	e056      	b.n	10c8 <__stack_size__+0xc8>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
		return false;
    101a:	f04f 0000 	mov.w	r0, #0
    101e:	e053      	b.n	10c8 <__stack_size__+0xc8>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1020:	2b02      	cmp	r3, #2
    1022:	d153      	bne.n	10cc <__stack_size__+0xcc>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1024:	f640 03d8 	movw	r3, #2264	; 0x8d8
    1028:	f2c2 0300 	movt	r3, #8192	; 0x2000
    102c:	7858      	ldrb	r0, [r3, #1]
    102e:	2801      	cmp	r0, #1
    1030:	d002      	beq.n	1038 <__stack_size__+0x38>
    1032:	2803      	cmp	r0, #3
    1034:	d146      	bne.n	10c4 <__stack_size__+0xc4>
    1036:	e01c      	b.n	1072 <__stack_size__+0x72>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1038:	f640 03d8 	movw	r3, #2264	; 0x8d8
    103c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1040:	88d8      	ldrh	r0, [r3, #6]
    1042:	b980      	cbnz	r0, 1066 <__stack_size__+0x66>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1044:	f640 01d8 	movw	r1, #2264	; 0x8d8
    1048:	f2c2 0100 	movt	r1, #8192	; 0x2000
    104c:	884a      	ldrh	r2, [r1, #2]
    104e:	b96a      	cbnz	r2, 106c <__stack_size__+0x6c>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1050:	f640 03d8 	movw	r3, #2264	; 0x8d8
    1054:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1058:	7918      	ldrb	r0, [r3, #4]
    105a:	f242 21d1 	movw	r1, #8913	; 0x22d1
    105e:	f2c0 0100 	movt	r1, #0
    1062:	4788      	blx	r1
    1064:	e030      	b.n	10c8 <__stack_size__+0xc8>
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    1066:	f04f 0000 	mov.w	r0, #0
    106a:	e02d      	b.n	10c8 <__stack_size__+0xc8>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    106c:	f04f 0000 	mov.w	r0, #0
    1070:	e02a      	b.n	10c8 <__stack_size__+0xc8>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
    1072:	f640 01d8 	movw	r1, #2264	; 0x8d8
    1076:	f2c2 0100 	movt	r1, #8192	; 0x2000
    107a:	88ca      	ldrh	r2, [r1, #6]
    107c:	b9b2      	cbnz	r2, 10ac <__stack_size__+0xac>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    107e:	f640 03d8 	movw	r3, #2264	; 0x8d8
    1082:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1086:	8858      	ldrh	r0, [r3, #2]
    1088:	b998      	cbnz	r0, 10b2 <__stack_size__+0xb2>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    108a:	f640 04d8 	movw	r4, #2264	; 0x8d8
    108e:	f2c2 0400 	movt	r4, #8192	; 0x2000
    1092:	7920      	ldrb	r0, [r4, #4]
    1094:	f242 41c5 	movw	r1, #9413	; 0x24c5
    1098:	f2c0 0100 	movt	r1, #0
    109c:	4788      	blx	r1
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    109e:	7920      	ldrb	r0, [r4, #4]
    10a0:	f242 5269 	movw	r2, #9577	; 0x2569
    10a4:	f2c0 0200 	movt	r2, #0
    10a8:	4790      	blx	r2
    10aa:	e00d      	b.n	10c8 <__stack_size__+0xc8>
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
		return false;
    10ac:	f04f 0000 	mov.w	r0, #0
    10b0:	e00a      	b.n	10c8 <__stack_size__+0xc8>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
	}
	return false;
    10b2:	f04f 0000 	mov.w	r0, #0
    10b6:	e007      	b.n	10c8 <__stack_size__+0xc8>
				break;
			}
		}
#endif
	}
	return false;
    10b8:	f04f 0000 	mov.w	r0, #0
    10bc:	e004      	b.n	10c8 <__stack_size__+0xc8>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    10be:	f04f 0000 	mov.w	r0, #0
    10c2:	e001      	b.n	10c8 <__stack_size__+0xc8>
				break;
			}
		}
#endif
	}
	return false;
    10c4:	f04f 0000 	mov.w	r0, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
    10c8:	2800      	cmp	r0, #0
    10ca:	d17b      	bne.n	11c4 <__stack_size__+0x1c4>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    10cc:	f640 03d8 	movw	r3, #2264	; 0x8d8
    10d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    10d4:	7818      	ldrb	r0, [r3, #0]
    10d6:	f000 011f 	and.w	r1, r0, #31
    10da:	2901      	cmp	r1, #1
    10dc:	d12d      	bne.n	113a <__stack_size__+0x13a>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    10de:	f240 628e 	movw	r2, #1678	; 0x68e
    10e2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    10e6:	7813      	ldrb	r3, [r2, #0]
    10e8:	b33b      	cbz	r3, 113a <__stack_size__+0x13a>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    10ea:	f640 04d8 	movw	r4, #2264	; 0x8d8
    10ee:	f2c2 0400 	movt	r4, #8192	; 0x2000
    10f2:	7924      	ldrb	r4, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    10f4:	f240 6584 	movw	r5, #1668	; 0x684
    10f8:	f2c2 0500 	movt	r5, #8192	; 0x2000
    10fc:	682d      	ldr	r5, [r5, #0]
    10fe:	6828      	ldr	r0, [r5, #0]
    1100:	7901      	ldrb	r1, [r0, #4]
    1102:	42a1      	cmp	r1, r4
    1104:	d919      	bls.n	113a <__stack_size__+0x13a>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1106:	4620      	mov	r0, r4
    1108:	f04f 0100 	mov.w	r1, #0
    110c:	f640 12e9 	movw	r2, #2537	; 0x9e9
    1110:	f2c0 0200 	movt	r2, #0
    1114:	4790      	blx	r2
    1116:	b180      	cbz	r0, 113a <__stack_size__+0x13a>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1118:	686b      	ldr	r3, [r5, #4]
    111a:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    111e:	68e8      	ldr	r0, [r5, #12]
    1120:	4780      	blx	r0
    1122:	4601      	mov	r1, r0
    1124:	4620      	mov	r0, r4
    1126:	f640 12e9 	movw	r2, #2537	; 0x9e9
    112a:	f2c0 0200 	movt	r2, #0
    112e:	4790      	blx	r2
    1130:	b118      	cbz	r0, 113a <__stack_size__+0x13a>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1132:	68a9      	ldr	r1, [r5, #8]
    1134:	4788      	blx	r1
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
    1136:	2800      	cmp	r0, #0
    1138:	d147      	bne.n	11ca <__stack_size__+0x1ca>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    113a:	f640 03d8 	movw	r3, #2264	; 0x8d8
    113e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1142:	7818      	ldrb	r0, [r3, #0]
    1144:	f000 021f 	and.w	r2, r0, #31
    1148:	2a02      	cmp	r2, #2
    114a:	d141      	bne.n	11d0 <__stack_size__+0x1d0>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    114c:	f240 618e 	movw	r1, #1678	; 0x68e
    1150:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1154:	780b      	ldrb	r3, [r1, #0]
    1156:	b333      	cbz	r3, 11a6 <__stack_size__+0x1a6>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1158:	f240 6084 	movw	r0, #1668	; 0x684
    115c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1160:	6803      	ldr	r3, [r0, #0]
    1162:	681a      	ldr	r2, [r3, #0]
    1164:	7911      	ldrb	r1, [r2, #4]
    1166:	b309      	cbz	r1, 11ac <__stack_size__+0x1ac>
    1168:	f04f 0400 	mov.w	r4, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    116c:	f640 16e9 	movw	r6, #2537	; 0x9e9
    1170:	f2c0 0600 	movt	r6, #0
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1174:	f240 6784 	movw	r7, #1668	; 0x684
    1178:	f2c2 0700 	movt	r7, #8192	; 0x2000
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    117c:	685d      	ldr	r5, [r3, #4]
    117e:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1182:	68eb      	ldr	r3, [r5, #12]
    1184:	4798      	blx	r3
    1186:	4601      	mov	r1, r0
    1188:	4620      	mov	r0, r4
    118a:	47b0      	blx	r6
    118c:	b188      	cbz	r0, 11b2 <__stack_size__+0x1b2>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    118e:	68a8      	ldr	r0, [r5, #8]
    1190:	4780      	blx	r0
    1192:	b988      	cbnz	r0, 11b8 <__stack_size__+0x1b8>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1194:	f104 0401 	add.w	r4, r4, #1
    1198:	b2e4      	uxtb	r4, r4
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    119a:	683b      	ldr	r3, [r7, #0]
    119c:	681a      	ldr	r2, [r3, #0]
    119e:	7911      	ldrb	r1, [r2, #4]
    11a0:	42a1      	cmp	r1, r4
    11a2:	d8eb      	bhi.n	117c <__stack_size__+0x17c>
    11a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
    11a6:	f04f 0000 	mov.w	r0, #0
    11aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    11ac:	f04f 0000 	mov.w	r0, #0
    11b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
			return false;
    11b2:	f04f 0000 	mov.w	r0, #0
    11b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
    11b8:	f04f 0001 	mov.w	r0, #1
    11bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
    11be:	f04f 0000 	mov.w	r0, #0
    11c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
    11c4:	f04f 0001 	mov.w	r0, #1
    11c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
			return true;
    11ca:	f04f 0001 	mov.w	r0, #1
    11ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    11d0:	f04f 0000 	mov.w	r0, #0
    11d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    11d6:	f010 0f60 	tst.w	r0, #96	; 0x60
    11da:	f47f af77 	bne.w	10cc <__stack_size__+0xcc>
    11de:	e628      	b.n	e32 <udc_process_setup+0x1ee>
    11e0:	f010 0f60 	tst.w	r0, #96	; 0x60
    11e4:	f47f af72 	bne.w	10cc <__stack_size__+0xcc>
    11e8:	e544      	b.n	c74 <udc_process_setup+0x30>
    11ea:	bf00      	nop
    11ec:	00000a91 	.word	0x00000a91

000011f0 <eic_line_interrupt>:
 * eic_line_set_callback() function.
 *
 * \param line_number EIC linel number to handle interrupt for
 */
static void eic_line_interrupt(uint8_t line_number)
{
    11f0:	b508      	push	{r3, lr}
	if (eic_callback_pointer[line_number]) {
    11f2:	f240 73b4 	movw	r3, #1972	; 0x7b4
    11f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    11fa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    11fe:	b100      	cbz	r0, 1202 <eic_line_interrupt+0x12>
		eic_callback_pointer[line_number]();
    1200:	4780      	blx	r0
    1202:	bd08      	pop	{r3, pc}

00001204 <NMI_Handler>:

/**
 * \brief Interrupt handler for EIC NMI.
 */
void NMI_Handler(void)
{
    1204:	b508      	push	{r3, lr}
	eic_line_interrupt(0);
    1206:	f04f 0000 	mov.w	r0, #0
    120a:	f241 13f1 	movw	r3, #4593	; 0x11f1
    120e:	f2c0 0300 	movt	r3, #0
    1212:	4798      	blx	r3
    1214:	bd08      	pop	{r3, pc}
    1216:	bf00      	nop

00001218 <EIC_1_Handler>:

/**
 * \brief Interrupt handler for EIC line 1.
 */
void EIC_1_Handler(void)
{
    1218:	b508      	push	{r3, lr}
	eic_line_interrupt(1);
    121a:	f04f 0001 	mov.w	r0, #1
    121e:	f241 13f1 	movw	r3, #4593	; 0x11f1
    1222:	f2c0 0300 	movt	r3, #0
    1226:	4798      	blx	r3
    1228:	bd08      	pop	{r3, pc}
    122a:	bf00      	nop

0000122c <EIC_2_Handler>:

/**
 * \brief Interrupt handler for EIC line 2.
 */
void EIC_2_Handler(void)
{
    122c:	b508      	push	{r3, lr}
	eic_line_interrupt(2);
    122e:	f04f 0002 	mov.w	r0, #2
    1232:	f241 13f1 	movw	r3, #4593	; 0x11f1
    1236:	f2c0 0300 	movt	r3, #0
    123a:	4798      	blx	r3
    123c:	bd08      	pop	{r3, pc}
    123e:	bf00      	nop

00001240 <EIC_3_Handler>:

/**
 * \brief Interrupt handler for EIC line 3.
 */
void EIC_3_Handler(void)
{
    1240:	b508      	push	{r3, lr}
	eic_line_interrupt(3);
    1242:	f04f 0003 	mov.w	r0, #3
    1246:	f241 13f1 	movw	r3, #4593	; 0x11f1
    124a:	f2c0 0300 	movt	r3, #0
    124e:	4798      	blx	r3
    1250:	bd08      	pop	{r3, pc}
    1252:	bf00      	nop

00001254 <EIC_4_Handler>:

/**
 * \brief Interrupt handler for EIC line 4.
 */
void EIC_4_Handler(void)
{
    1254:	b508      	push	{r3, lr}
	eic_line_interrupt(4);
    1256:	f04f 0004 	mov.w	r0, #4
    125a:	f241 13f1 	movw	r3, #4593	; 0x11f1
    125e:	f2c0 0300 	movt	r3, #0
    1262:	4798      	blx	r3
    1264:	bd08      	pop	{r3, pc}
    1266:	bf00      	nop

00001268 <EIC_5_Handler>:

/**
 * \brief Interrupt handler for EIC line 5.
 */
void EIC_5_Handler(void)
{
    1268:	b508      	push	{r3, lr}
	eic_line_interrupt(5);
    126a:	f04f 0005 	mov.w	r0, #5
    126e:	f241 13f1 	movw	r3, #4593	; 0x11f1
    1272:	f2c0 0300 	movt	r3, #0
    1276:	4798      	blx	r3
    1278:	bd08      	pop	{r3, pc}
    127a:	bf00      	nop

0000127c <EIC_6_Handler>:

/**
 * \brief Interrupt handler for EIC line 6.
 */
void EIC_6_Handler(void)
{
    127c:	b508      	push	{r3, lr}
	eic_line_interrupt(6);
    127e:	f04f 0006 	mov.w	r0, #6
    1282:	f241 13f1 	movw	r3, #4593	; 0x11f1
    1286:	f2c0 0300 	movt	r3, #0
    128a:	4798      	blx	r3
    128c:	bd08      	pop	{r3, pc}
    128e:	bf00      	nop

00001290 <EIC_7_Handler>:

/**
 * \brief Interrupt handler for EIC line 7.
 */
void EIC_7_Handler(void)
{
    1290:	b508      	push	{r3, lr}
	eic_line_interrupt(7);
    1292:	f04f 0007 	mov.w	r0, #7
    1296:	f241 13f1 	movw	r3, #4593	; 0x11f1
    129a:	f2c0 0300 	movt	r3, #0
    129e:	4798      	blx	r3
    12a0:	bd08      	pop	{r3, pc}
    12a2:	bf00      	nop

000012a4 <EIC_8_Handler>:

/**
 * \brief Interrupt handler for EIC line 8.
 */
void EIC_8_Handler(void)
{
    12a4:	b508      	push	{r3, lr}
	eic_line_interrupt(8);
    12a6:	f04f 0008 	mov.w	r0, #8
    12aa:	f241 13f1 	movw	r3, #4593	; 0x11f1
    12ae:	f2c0 0300 	movt	r3, #0
    12b2:	4798      	blx	r3
    12b4:	bd08      	pop	{r3, pc}
    12b6:	bf00      	nop

000012b8 <gpio_common_handler>:

/**
 * Common GPIO handler.
 */
static void gpio_common_handler(uint32_t port_id, uint32_t port_mask)
{
    12b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    12bc:	4606      	mov	r6, r0
	GpioPort *gpio_port = &(GPIO->GPIO_PORT[port_id]);
    12be:	ea4f 2340 	mov.w	r3, r0, lsl #9
    12c2:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
    12c6:	f500 2261 	add.w	r2, r0, #921600	; 0xe1000
	uint32_t i;
	uint32_t int_flags;
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;
    12ca:	f8d2 90d0 	ldr.w	r9, [r2, #208]	; 0xd0
	gpio_port->GPIO_IFRC = (int_flags & port_mask);
    12ce:	ea01 0109 	and.w	r1, r1, r9
    12d2:	f8c2 10d8 	str.w	r1, [r2, #216]	; 0xd8

	for (i = 0; i < gpio_nb_sources; i++) {
    12d6:	f240 6394 	movw	r3, #1684	; 0x694
    12da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    12de:	6818      	ldr	r0, [r3, #0]
    12e0:	b318      	cbz	r0, 132a <gpio_common_handler+0x72>
    12e2:	f04f 0400 	mov.w	r4, #0
    12e6:	4625      	mov	r5, r4
		pin = gpio_int_sources[i].pin;
    12e8:	f240 6798 	movw	r7, #1688	; 0x698
    12ec:	f2c2 0700 	movt	r7, #8192	; 0x2000
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    12f0:	f04f 0a01 	mov.w	sl, #1
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;
	gpio_port->GPIO_IFRC = (int_flags & port_mask);

	for (i = 0; i < gpio_nb_sources; i++) {
    12f4:	f240 6894 	movw	r8, #1684	; 0x694
    12f8:	f2c2 0800 	movt	r8, #8192	; 0x2000
		pin = gpio_int_sources[i].pin;
    12fc:	59e2      	ldr	r2, [r4, r7]
		if ((ioport_pin_to_port_id(pin) == port_id) &&
    12fe:	ebb6 1f52 	cmp.w	r6, r2, lsr #5
    1302:	d10a      	bne.n	131a <gpio_common_handler+0x62>
    1304:	f002 011f 	and.w	r1, r2, #31
    1308:	fa0a f301 	lsl.w	r3, sl, r1
    130c:	ea13 0f09 	tst.w	r3, r9
    1310:	d003      	beq.n	131a <gpio_common_handler+0x62>
}

/**
 * Common GPIO handler.
 */
static void gpio_common_handler(uint32_t port_id, uint32_t port_mask)
    1312:	1938      	adds	r0, r7, r4

	for (i = 0; i < gpio_nb_sources; i++) {
		pin = gpio_int_sources[i].pin;
		if ((ioport_pin_to_port_id(pin) == port_id) &&
				(ioport_pin_to_mask(pin) & int_flags)) {
			if (gpio_int_sources[i].callback != NULL) {
    1314:	6842      	ldr	r2, [r0, #4]
    1316:	b102      	cbz	r2, 131a <gpio_common_handler+0x62>
				gpio_int_sources[i].callback();
    1318:	4790      	blx	r2
	ioport_pin_t pin;

	int_flags = gpio_port->GPIO_IFR;
	gpio_port->GPIO_IFRC = (int_flags & port_mask);

	for (i = 0; i < gpio_nb_sources; i++) {
    131a:	f105 0501 	add.w	r5, r5, #1
    131e:	f104 0408 	add.w	r4, r4, #8
    1322:	f8d8 1000 	ldr.w	r1, [r8]
    1326:	42a9      	cmp	r1, r5
    1328:	d8e8      	bhi.n	12fc <gpio_common_handler+0x44>
    132a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    132e:	bf00      	nop

00001330 <GPIO_0_Handler>:

/**
 * GPIO handler 0 (PA 0..7)
 */
void GPIO_0_Handler(void)
{
    1330:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, GPIO_INT_GROUP_MASK);
    1332:	f04f 0000 	mov.w	r0, #0
    1336:	f04f 01ff 	mov.w	r1, #255	; 0xff
    133a:	f241 23b9 	movw	r3, #4793	; 0x12b9
    133e:	f2c0 0300 	movt	r3, #0
    1342:	4798      	blx	r3
    1344:	bd08      	pop	{r3, pc}
    1346:	bf00      	nop

00001348 <GPIO_1_Handler>:

/**
 * GPIO handler 1 (PA 8..15)
 */
void GPIO_1_Handler(void)
{
    1348:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 8));
    134a:	f04f 0000 	mov.w	r0, #0
    134e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    1352:	f241 23b9 	movw	r3, #4793	; 0x12b9
    1356:	f2c0 0300 	movt	r3, #0
    135a:	4798      	blx	r3
    135c:	bd08      	pop	{r3, pc}
    135e:	bf00      	nop

00001360 <GPIO_2_Handler>:

/**
 * GPIO handler 2 (PA 16..23)
 */
void GPIO_2_Handler(void)
{
    1360:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 16));
    1362:	f04f 0000 	mov.w	r0, #0
    1366:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    136a:	f241 23b9 	movw	r3, #4793	; 0x12b9
    136e:	f2c0 0300 	movt	r3, #0
    1372:	4798      	blx	r3
    1374:	bd08      	pop	{r3, pc}
    1376:	bf00      	nop

00001378 <GPIO_3_Handler>:

/**
 * GPIO handler 3 (PA 24..31)
 */
void GPIO_3_Handler(void)
{
    1378:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOA, (GPIO_INT_GROUP_MASK << 23));
    137a:	f04f 0000 	mov.w	r0, #0
    137e:	f04f 41ff 	mov.w	r1, #2139095040	; 0x7f800000
    1382:	f241 23b9 	movw	r3, #4793	; 0x12b9
    1386:	f2c0 0300 	movt	r3, #0
    138a:	4798      	blx	r3
    138c:	bd08      	pop	{r3, pc}
    138e:	bf00      	nop

00001390 <GPIO_4_Handler>:

/**
 * GPIO handler 4 (PB 0..7)
 */
void GPIO_4_Handler(void)
{
    1390:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, GPIO_INT_GROUP_MASK);
    1392:	f04f 0001 	mov.w	r0, #1
    1396:	f04f 01ff 	mov.w	r1, #255	; 0xff
    139a:	f241 23b9 	movw	r3, #4793	; 0x12b9
    139e:	f2c0 0300 	movt	r3, #0
    13a2:	4798      	blx	r3
    13a4:	bd08      	pop	{r3, pc}
    13a6:	bf00      	nop

000013a8 <GPIO_5_Handler>:

/**
 * GPIO handler 5 (PB 8..15)
 */
void GPIO_5_Handler(void)
{
    13a8:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 8));
    13aa:	f04f 0001 	mov.w	r0, #1
    13ae:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    13b2:	f241 23b9 	movw	r3, #4793	; 0x12b9
    13b6:	f2c0 0300 	movt	r3, #0
    13ba:	4798      	blx	r3
    13bc:	bd08      	pop	{r3, pc}
    13be:	bf00      	nop

000013c0 <GPIO_6_Handler>:

/**
 * GPIO handler 6 (PB 16..23)
 */
void GPIO_6_Handler(void)
{
    13c0:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 16));
    13c2:	f04f 0001 	mov.w	r0, #1
    13c6:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    13ca:	f241 23b9 	movw	r3, #4793	; 0x12b9
    13ce:	f2c0 0300 	movt	r3, #0
    13d2:	4798      	blx	r3
    13d4:	bd08      	pop	{r3, pc}
    13d6:	bf00      	nop

000013d8 <GPIO_7_Handler>:

/**
 * GPIO handler 7 (PB 24..31)
 */
void GPIO_7_Handler(void)
{
    13d8:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOB, (GPIO_INT_GROUP_MASK << 24));
    13da:	f04f 0001 	mov.w	r0, #1
    13de:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    13e2:	f241 23b9 	movw	r3, #4793	; 0x12b9
    13e6:	f2c0 0300 	movt	r3, #0
    13ea:	4798      	blx	r3
    13ec:	bd08      	pop	{r3, pc}
    13ee:	bf00      	nop

000013f0 <GPIO_8_Handler>:

/**
 * GPIO handler 8 (PC 0..7)
 */
void GPIO_8_Handler(void)
{
    13f0:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, GPIO_INT_GROUP_MASK);
    13f2:	f04f 0002 	mov.w	r0, #2
    13f6:	f04f 01ff 	mov.w	r1, #255	; 0xff
    13fa:	f241 23b9 	movw	r3, #4793	; 0x12b9
    13fe:	f2c0 0300 	movt	r3, #0
    1402:	4798      	blx	r3
    1404:	bd08      	pop	{r3, pc}
    1406:	bf00      	nop

00001408 <GPIO_9_Handler>:

/**
 * GPIO handler 9 (PC 8..15)
 */
void GPIO_9_Handler(void)
{
    1408:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 8));
    140a:	f04f 0002 	mov.w	r0, #2
    140e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    1412:	f241 23b9 	movw	r3, #4793	; 0x12b9
    1416:	f2c0 0300 	movt	r3, #0
    141a:	4798      	blx	r3
    141c:	bd08      	pop	{r3, pc}
    141e:	bf00      	nop

00001420 <GPIO_10_Handler>:

/**
 * GPIO handler 10 (PC 16..23)
 */
void GPIO_10_Handler(void)
{
    1420:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 16));
    1422:	f04f 0002 	mov.w	r0, #2
    1426:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    142a:	f241 23b9 	movw	r3, #4793	; 0x12b9
    142e:	f2c0 0300 	movt	r3, #0
    1432:	4798      	blx	r3
    1434:	bd08      	pop	{r3, pc}
    1436:	bf00      	nop

00001438 <GPIO_11_Handler>:

/**
 * GPIO handler 11 (PC 24..31)
 */
void GPIO_11_Handler(void)
{
    1438:	b508      	push	{r3, lr}
	gpio_common_handler(IOPORT_GPIOC, (GPIO_INT_GROUP_MASK << 24));
    143a:	f04f 0002 	mov.w	r0, #2
    143e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    1442:	f241 23b9 	movw	r3, #4793	; 0x12b9
    1446:	f2c0 0300 	movt	r3, #0
    144a:	4798      	blx	r3
    144c:	bd08      	pop	{r3, pc}
    144e:	bf00      	nop

00001450 <lcdca_clk_init>:
 * \brief LCDCA callback function pointer.
 */
lcdca_callback_t lcdca_callback_pointer = NULL;

void lcdca_clk_init(void)
{
    1450:	b508      	push	{r3, lr}
	/* Enable APB clock for LCDCA */
	sysclk_enable_peripheral_clock(LCDCA);
    1452:	f04f 0000 	mov.w	r0, #0
    1456:	f2c4 0008 	movt	r0, #16392	; 0x4008
    145a:	f243 0351 	movw	r3, #12369	; 0x3051
    145e:	f2c0 0300 	movt	r3, #0
    1462:	4798      	blx	r3
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_OSC32RDY);
    1464:	f44f 6080 	mov.w	r0, #1024	; 0x400
    1468:	f2c4 000f 	movt	r0, #16399	; 0x400f
    146c:	6941      	ldr	r1, [r0, #20]

	/* Switch LCD input to selected source clock */
#if (CONF_LCDCA_SOURCE_CLK == OSC_ID_OSC32)
	if (!osc_is_ready(OSC_ID_OSC32)) {
    146e:	f011 0f01 	tst.w	r1, #1
    1472:	d10c      	bne.n	148e <lcdca_clk_init+0x3e>
		break;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		osc_priv_enable_osc32();
    1474:	f642 5251 	movw	r2, #11601	; 0x2d51
    1478:	f2c0 0200 	movt	r2, #0
    147c:	4790      	blx	r2
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(BSCIF->BSCIF_PCLKSR & BSCIF_PCLKSR_OSC32RDY);
    147e:	f44f 6080 	mov.w	r0, #1024	; 0x400
    1482:	f2c4 000f 	movt	r0, #16399	; 0x400f
    1486:	6943      	ldr	r3, [r0, #20]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1488:	f013 0f01 	tst.w	r3, #1
    148c:	d0fb      	beq.n	1486 <lcdca_clk_init+0x36>
    148e:	bd08      	pop	{r3, pc}

00001490 <lcdca_enable>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1490:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1494:	b672      	cpsid	i
    1496:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    149a:	f240 03d4 	movw	r3, #212	; 0xd4
    149e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    14a2:	f04f 0100 	mov.w	r1, #0
    14a6:	7019      	strb	r1, [r3, #0]
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    14a8:	f240 70ac 	movw	r0, #1964	; 0x7ac
    14ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
    14b0:	7983      	ldrb	r3, [r0, #6]
    14b2:	f103 0301 	add.w	r3, r3, #1
    14b6:	7183      	strb	r3, [r0, #6]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    14b8:	b94a      	cbnz	r2, 14ce <lcdca_enable+0x3e>
		cpu_irq_enable();
    14ba:	f240 01d4 	movw	r1, #212	; 0xd4
    14be:	f2c2 0100 	movt	r1, #8192	; 0x2000
    14c2:	f04f 0201 	mov.w	r2, #1
    14c6:	700a      	strb	r2, [r1, #0]
    14c8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    14cc:	b662      	cpsie	i

void lcdca_enable(void)
{
	sleepmgr_lock_mode(SLEEPMGR_RET);
	/* Enable all display memory */
	LCDCA->LCDCA_CFG &= ~LCDCA_CFG_BLANK;
    14ce:	f04f 0000 	mov.w	r0, #0
    14d2:	f2c4 0008 	movt	r0, #16392	; 0x4008
    14d6:	6843      	ldr	r3, [r0, #4]
    14d8:	f023 0104 	bic.w	r1, r3, #4
    14dc:	6041      	str	r1, [r0, #4]
	LCDCA->LCDCA_CR = LCDCA_CR_EN;
    14de:	f04f 0202 	mov.w	r2, #2
    14e2:	6002      	str	r2, [r0, #0]
	/* Clear all display memory */
	LCDCA->LCDCA_CR = LCDCA_CR_CDM;
    14e4:	f44f 7380 	mov.w	r3, #256	; 0x100
    14e8:	6003      	str	r3, [r0, #0]
	/* Wait enable signal */
	while (!(LCDCA->LCDCA_SR & LCDCA_SR_EN)) {
    14ea:	f04f 0000 	mov.w	r0, #0
    14ee:	f2c4 0008 	movt	r0, #16392	; 0x4008
    14f2:	68c1      	ldr	r1, [r0, #12]
    14f4:	f011 0f10 	tst.w	r1, #16
    14f8:	d0fb      	beq.n	14f2 <lcdca_enable+0x62>
	}
}
    14fa:	4770      	bx	lr

000014fc <lcdca_set_contrast>:
	LCDCA->LCDCA_CR = LCDCA_CR_DIS;
}

void lcdca_set_contrast(int8_t contrast)
{
	uint32_t cfg = LCDCA->LCDCA_CFG;
    14fc:	f04f 0300 	mov.w	r3, #0
    1500:	f2c4 0308 	movt	r3, #16392	; 0x4008
    1504:	6859      	ldr	r1, [r3, #4]
	uint32_t fcst_filed;
	int8_t fcst_val_msk = (LCDCA_CFG_FCST_Msk >> (LCDCA_CFG_FCST_Pos + 1));
	int8_t fcst_sign_msk = ((LCDCA_CFG_FCST_Msk >> LCDCA_CFG_FCST_Pos) + 1) >> 1;

	/* Clear previous contrast value */
	cfg &= ~LCDCA_CFG_FCST_Msk;
    1506:	f421 137c 	bic.w	r3, r1, #4128768	; 0x3f0000
	/*
	 * Convert contrast value to the value in FCST field:
	 * FCST is a signed number (two's complement).
	 */
	fcst_filed = (contrast & fcst_val_msk);
    150a:	f000 021f 	and.w	r2, r0, #31
	if (contrast < 0) {
    150e:	2800      	cmp	r0, #0
	cfg &= ~LCDCA_CFG_FCST_Msk;
	/*
	 * Convert contrast value to the value in FCST field:
	 * FCST is a signed number (two's complement).
	 */
	fcst_filed = (contrast & fcst_val_msk);
    1510:	bfac      	ite	ge
    1512:	b252      	sxtbge	r2, r2
	if (contrast < 0) {
		fcst_filed |= fcst_sign_msk;
    1514:	f042 0220 	orrlt.w	r2, r2, #32
	}
	/* Write new value */
	LCDCA->LCDCA_CFG = cfg | LCDCA_CFG_FCST(fcst_filed);
    1518:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
    151c:	f04f 0100 	mov.w	r1, #0
    1520:	f2c4 0108 	movt	r1, #16392	; 0x4008
    1524:	6048      	str	r0, [r1, #4]
    1526:	4770      	bx	lr

00001528 <lcdca_set_config>:
	}
#endif
}

void lcdca_set_config(struct lcdca_config *lcdca_cfg)
{
    1528:	b510      	push	{r4, lr}
	/* Disable LCD controller and frame counter timer */
	LCDCA->LCDCA_CR = LCDCA_CR_DIS | LCDCA_CR_FC0DIS | LCDCA_CR_FC1DIS |
    152a:	f04f 0300 	mov.w	r3, #0
    152e:	f2c4 0308 	movt	r3, #16392	; 0x4008
    1532:	f04f 0255 	mov.w	r2, #85	; 0x55
    1536:	601a      	str	r2, [r3, #0]
		LCDCA_CR_FC2DIS;
	/* Set new timer */
	LCDCA->LCDCA_TIM = LCDCA_TIM_FC2(lcdca_cfg->fc2) |
			LCDCA_TIM_FC1(lcdca_cfg->fc1) |
    1538:	79c1      	ldrb	r1, [r0, #7]
    153a:	ea4f 4401 	mov.w	r4, r1, lsl #16
    153e:	f404 11f8 	and.w	r1, r4, #2031616	; 0x1f0000
{
	/* Disable LCD controller and frame counter timer */
	LCDCA->LCDCA_CR = LCDCA_CR_DIS | LCDCA_CR_FC0DIS | LCDCA_CR_FC1DIS |
		LCDCA_CR_FC2DIS;
	/* Set new timer */
	LCDCA->LCDCA_TIM = LCDCA_TIM_FC2(lcdca_cfg->fc2) |
    1542:	7a02      	ldrb	r2, [r0, #8]
    1544:	ea4f 6402 	mov.w	r4, r2, lsl #24
    1548:	f004 52f8 	and.w	r2, r4, #520093696	; 0x1f000000
    154c:	ea41 0402 	orr.w	r4, r1, r2
			LCDCA_TIM_FC1(lcdca_cfg->fc1) |
			LCDCA_TIM_FC0(lcdca_cfg->fc0) |
    1550:	7981      	ldrb	r1, [r0, #6]
    1552:	ea4f 2201 	mov.w	r2, r1, lsl #8
    1556:	f402 51f8 	and.w	r1, r2, #7936	; 0x1f00
	/* Disable LCD controller and frame counter timer */
	LCDCA->LCDCA_CR = LCDCA_CR_DIS | LCDCA_CR_FC0DIS | LCDCA_CR_FC1DIS |
		LCDCA_CR_FC2DIS;
	/* Set new timer */
	LCDCA->LCDCA_TIM = LCDCA_TIM_FC2(lcdca_cfg->fc2) |
			LCDCA_TIM_FC1(lcdca_cfg->fc1) |
    155a:	430c      	orrs	r4, r1
			LCDCA_TIM_FC0(lcdca_cfg->fc0) |
			LCDCA_TIM_CLKDIV(lcdca_cfg->lcd_clkdiv) |
    155c:	7942      	ldrb	r2, [r0, #5]
    155e:	ea4f 0142 	mov.w	r1, r2, lsl #1
    1562:	f001 020e 	and.w	r2, r1, #14
	LCDCA->LCDCA_CR = LCDCA_CR_DIS | LCDCA_CR_FC0DIS | LCDCA_CR_FC1DIS |
		LCDCA_CR_FC2DIS;
	/* Set new timer */
	LCDCA->LCDCA_TIM = LCDCA_TIM_FC2(lcdca_cfg->fc2) |
			LCDCA_TIM_FC1(lcdca_cfg->fc1) |
			LCDCA_TIM_FC0(lcdca_cfg->fc0) |
    1566:	4314      	orrs	r4, r2
			LCDCA_TIM_CLKDIV(lcdca_cfg->lcd_clkdiv) |
			(uint32_t)lcdca_cfg->lcd_pres;
    1568:	7901      	ldrb	r1, [r0, #4]
		LCDCA_CR_FC2DIS;
	/* Set new timer */
	LCDCA->LCDCA_TIM = LCDCA_TIM_FC2(lcdca_cfg->fc2) |
			LCDCA_TIM_FC1(lcdca_cfg->fc1) |
			LCDCA_TIM_FC0(lcdca_cfg->fc0) |
			LCDCA_TIM_CLKDIV(lcdca_cfg->lcd_clkdiv) |
    156a:	430c      	orrs	r4, r1
{
	/* Disable LCD controller and frame counter timer */
	LCDCA->LCDCA_CR = LCDCA_CR_DIS | LCDCA_CR_FC0DIS | LCDCA_CR_FC1DIS |
		LCDCA_CR_FC2DIS;
	/* Set new timer */
	LCDCA->LCDCA_TIM = LCDCA_TIM_FC2(lcdca_cfg->fc2) |
    156c:	609c      	str	r4, [r3, #8]
			LCDCA_TIM_FC0(lcdca_cfg->fc0) |
			LCDCA_TIM_CLKDIV(lcdca_cfg->lcd_clkdiv) |
			(uint32_t)lcdca_cfg->lcd_pres;

	/* Set basic configuration */
	LCDCA->LCDCA_CFG = LCDCA_CFG_NSU(lcdca_cfg->port_mask) |
    156e:	7803      	ldrb	r3, [r0, #0]
    1570:	ea4f 6403 	mov.w	r4, r3, lsl #24
    1574:	f004 547c 	and.w	r4, r4, #1056964608	; 0x3f000000
			(lcdca_cfg->x_bias ? LCDCA_CFG_XBIAS : 0) |
    1578:	7841      	ldrb	r1, [r0, #1]
			(lcdca_cfg->lp_wave ? 0 : LCDCA_CFG_WMOD) |
    157a:	7882      	ldrb	r2, [r0, #2]
    157c:	2a00      	cmp	r2, #0
    157e:	bf0c      	ite	eq
    1580:	2302      	moveq	r3, #2
    1582:	2300      	movne	r3, #0
			LCDCA_CFG_DUTY(lcdca_cfg->duty_type);
    1584:	78c2      	ldrb	r2, [r0, #3]
    1586:	ea4f 2202 	mov.w	r2, r2, lsl #8
    158a:	f402 7240 	and.w	r2, r2, #768	; 0x300
			LCDCA_TIM_FC0(lcdca_cfg->fc0) |
			LCDCA_TIM_CLKDIV(lcdca_cfg->lcd_clkdiv) |
			(uint32_t)lcdca_cfg->lcd_pres;

	/* Set basic configuration */
	LCDCA->LCDCA_CFG = LCDCA_CFG_NSU(lcdca_cfg->port_mask) |
    158e:	4322      	orrs	r2, r4
			(lcdca_cfg->x_bias ? LCDCA_CFG_XBIAS : 0) |
    1590:	430a      	orrs	r2, r1
			(lcdca_cfg->lp_wave ? 0 : LCDCA_CFG_WMOD) |
    1592:	431a      	orrs	r2, r3
			LCDCA_TIM_FC0(lcdca_cfg->fc0) |
			LCDCA_TIM_CLKDIV(lcdca_cfg->lcd_clkdiv) |
			(uint32_t)lcdca_cfg->lcd_pres;

	/* Set basic configuration */
	LCDCA->LCDCA_CFG = LCDCA_CFG_NSU(lcdca_cfg->port_mask) |
    1594:	f04f 0100 	mov.w	r1, #0
    1598:	f2c4 0108 	movt	r1, #16392	; 0x4008
    159c:	604a      	str	r2, [r1, #4]
			(lcdca_cfg->x_bias ? LCDCA_CFG_XBIAS : 0) |
			(lcdca_cfg->lp_wave ? 0 : LCDCA_CFG_WMOD) |
			LCDCA_CFG_DUTY(lcdca_cfg->duty_type);

	/* Set contrast */
	lcdca_set_contrast(lcdca_cfg->contrast);
    159e:	f990 0009 	ldrsb.w	r0, [r0, #9]
    15a2:	f241 43fd 	movw	r3, #5373	; 0x14fd
    15a6:	f2c0 0300 	movt	r3, #0
    15aa:	4798      	blx	r3
    15ac:	bd10      	pop	{r4, pc}
    15ae:	bf00      	nop

000015b0 <lcdca_enable_timer>:
	LCDCA->LCDCA_DRH3 = LCDCA_DRH3_DATA_Msk;
}

void lcdca_enable_timer(uint8_t lcd_timer)
{
	if (lcd_timer == LCDCA_TIMER_FC0) {
    15b0:	b978      	cbnz	r0, 15d2 <lcdca_enable_timer+0x22>
		LCDCA->LCDCA_CR = LCDCA_CR_FC0EN;
    15b2:	f04f 0000 	mov.w	r0, #0
    15b6:	f2c4 0008 	movt	r0, #16392	; 0x4008
    15ba:	f04f 0208 	mov.w	r2, #8
    15be:	6002      	str	r2, [r0, #0]
		while (!(LCDCA->LCDCA_SR & LCDCA_SR_FC0S)) {
    15c0:	f04f 0100 	mov.w	r1, #0
    15c4:	f2c4 0108 	movt	r1, #16392	; 0x4008
    15c8:	68cb      	ldr	r3, [r1, #12]
    15ca:	f013 0f02 	tst.w	r3, #2
    15ce:	d0fb      	beq.n	15c8 <lcdca_enable_timer+0x18>
    15d0:	4770      	bx	lr
		}
	} else if (lcd_timer == LCDCA_TIMER_FC1) {
    15d2:	2801      	cmp	r0, #1
    15d4:	d10f      	bne.n	15f6 <lcdca_enable_timer+0x46>
		LCDCA->LCDCA_CR = LCDCA_CR_FC1EN;
    15d6:	f04f 0000 	mov.w	r0, #0
    15da:	f2c4 0008 	movt	r0, #16392	; 0x4008
    15de:	f04f 0220 	mov.w	r2, #32
    15e2:	6002      	str	r2, [r0, #0]
		while (!(LCDCA->LCDCA_SR & LCDCA_SR_FC1S)) {
    15e4:	f04f 0100 	mov.w	r1, #0
    15e8:	f2c4 0108 	movt	r1, #16392	; 0x4008
    15ec:	68cb      	ldr	r3, [r1, #12]
    15ee:	f013 0f04 	tst.w	r3, #4
    15f2:	d0fb      	beq.n	15ec <lcdca_enable_timer+0x3c>
    15f4:	4770      	bx	lr
		}
	} else if (lcd_timer == LCDCA_TIMER_FC2) {
    15f6:	2802      	cmp	r0, #2
    15f8:	d10e      	bne.n	1618 <lcdca_enable_timer+0x68>
		LCDCA->LCDCA_CR = LCDCA_CR_FC2EN;
    15fa:	f04f 0000 	mov.w	r0, #0
    15fe:	f2c4 0008 	movt	r0, #16392	; 0x4008
    1602:	f04f 0280 	mov.w	r2, #128	; 0x80
    1606:	6002      	str	r2, [r0, #0]
		while (!(LCDCA->LCDCA_SR & LCDCA_SR_FC2S)) {
    1608:	f04f 0100 	mov.w	r1, #0
    160c:	f2c4 0108 	movt	r1, #16392	; 0x4008
    1610:	68cb      	ldr	r3, [r1, #12]
    1612:	f013 0f08 	tst.w	r3, #8
    1616:	d0fb      	beq.n	1610 <lcdca_enable_timer+0x60>
    1618:	4770      	bx	lr
    161a:	bf00      	nop

0000161c <lcdca_write_packet>:
			LCDCA_CSRCFG_SIZE(cs_cfg->size) | LCDCA_CSRCFG_DATA(cs_cfg->data);
}

void lcdca_write_packet(uint8_t lcd_tdg, uint8_t first_seg,
		const uint8_t *data, size_t width, uint8_t dir)
{
    161c:	b410      	push	{r4}
	LCDCA->LCDCA_CMCFG = LCDCA_CMCFG_TDG(lcd_tdg)
			| LCDCA_CMCFG_STSEG(first_seg)
    161e:	ea4f 2101 	mov.w	r1, r1, lsl #8
    1622:	f401 547c 	and.w	r4, r1, #16128	; 0x3f00
}

void lcdca_write_packet(uint8_t lcd_tdg, uint8_t first_seg,
		const uint8_t *data, size_t width, uint8_t dir)
{
	LCDCA->LCDCA_CMCFG = LCDCA_CMCFG_TDG(lcd_tdg)
    1626:	ea4f 0040 	mov.w	r0, r0, lsl #1
    162a:	f000 0106 	and.w	r1, r0, #6
			| LCDCA_CMCFG_STSEG(first_seg)
    162e:	430c      	orrs	r4, r1
			| (dir ? LCDCA_CMCFG_DREV_LEFT : LCDCA_CMCFG_DREV_RIGHT);
    1630:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1634:	2800      	cmp	r0, #0
    1636:	bf18      	it	ne
    1638:	f044 0401 	orrne.w	r4, r4, #1
}

void lcdca_write_packet(uint8_t lcd_tdg, uint8_t first_seg,
		const uint8_t *data, size_t width, uint8_t dir)
{
	LCDCA->LCDCA_CMCFG = LCDCA_CMCFG_TDG(lcd_tdg)
    163c:	f04f 0100 	mov.w	r1, #0
    1640:	f2c4 0108 	movt	r1, #16392	; 0x4008
    1644:	640c      	str	r4, [r1, #64]	; 0x40
			| LCDCA_CMCFG_STSEG(first_seg)
			| (dir ? LCDCA_CMCFG_DREV_LEFT : LCDCA_CMCFG_DREV_RIGHT);

	while (width--) {
    1646:	f103 34ff 	add.w	r4, r3, #4294967295
    164a:	b19b      	cbz	r3, 1674 <lcdca_write_packet+0x58>
		if (*data == '\0') {
    164c:	7813      	ldrb	r3, [r2, #0]
    164e:	b18b      	cbz	r3, 1674 <lcdca_write_packet+0x58>
    1650:	f04f 0100 	mov.w	r1, #0
			break; /* Stop on NULL char */
		}

		LCDCA->LCDCA_CMDR = (*data++);
    1654:	4608      	mov	r0, r1
    1656:	f2c4 0008 	movt	r0, #16392	; 0x4008
    165a:	f014 0f01 	tst.w	r4, #1
    165e:	d006      	beq.n	166e <lcdca_write_packet+0x52>
    1660:	e00a      	b.n	1678 <lcdca_write_packet+0x5c>
	LCDCA->LCDCA_CMCFG = LCDCA_CMCFG_TDG(lcd_tdg)
			| LCDCA_CMCFG_STSEG(first_seg)
			| (dir ? LCDCA_CMCFG_DREV_LEFT : LCDCA_CMCFG_DREV_RIGHT);

	while (width--) {
		if (*data == '\0') {
    1662:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    1666:	f101 0101 	add.w	r1, r1, #1
    166a:	b96b      	cbnz	r3, 1688 <lcdca_write_packet+0x6c>
    166c:	e002      	b.n	1674 <lcdca_write_packet+0x58>
			break; /* Stop on NULL char */
		}

		LCDCA->LCDCA_CMDR = (*data++);
    166e:	6443      	str	r3, [r0, #68]	; 0x44
{
	LCDCA->LCDCA_CMCFG = LCDCA_CMCFG_TDG(lcd_tdg)
			| LCDCA_CMCFG_STSEG(first_seg)
			| (dir ? LCDCA_CMCFG_DREV_LEFT : LCDCA_CMCFG_DREV_RIGHT);

	while (width--) {
    1670:	42a1      	cmp	r1, r4
    1672:	d1f6      	bne.n	1662 <lcdca_write_packet+0x46>
			break; /* Stop on NULL char */
		}

		LCDCA->LCDCA_CMDR = (*data++);
	}
}
    1674:	bc10      	pop	{r4}
    1676:	4770      	bx	lr
	while (width--) {
		if (*data == '\0') {
			break; /* Stop on NULL char */
		}

		LCDCA->LCDCA_CMDR = (*data++);
    1678:	6443      	str	r3, [r0, #68]	; 0x44
	LCDCA->LCDCA_CMCFG = LCDCA_CMCFG_TDG(lcd_tdg)
			| LCDCA_CMCFG_STSEG(first_seg)
			| (dir ? LCDCA_CMCFG_DREV_LEFT : LCDCA_CMCFG_DREV_RIGHT);

	while (width--) {
		if (*data == '\0') {
    167a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    167e:	f101 0101 	add.w	r1, r1, #1
    1682:	2b00      	cmp	r3, #0
    1684:	d1f3      	bne.n	166e <lcdca_write_packet+0x52>
    1686:	e7f5      	b.n	1674 <lcdca_write_packet+0x58>
			break; /* Stop on NULL char */
		}

		LCDCA->LCDCA_CMDR = (*data++);
    1688:	6443      	str	r3, [r0, #68]	; 0x44
	LCDCA->LCDCA_CMCFG = LCDCA_CMCFG_TDG(lcd_tdg)
			| LCDCA_CMCFG_STSEG(first_seg)
			| (dir ? LCDCA_CMCFG_DREV_LEFT : LCDCA_CMCFG_DREV_RIGHT);

	while (width--) {
		if (*data == '\0') {
    168a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    168e:	f101 0101 	add.w	r1, r1, #1
    1692:	2b00      	cmp	r3, #0
    1694:	d1eb      	bne.n	166e <lcdca_write_packet+0x52>
    1696:	e7ed      	b.n	1674 <lcdca_write_packet+0x58>

00001698 <LCDCA_Handler>:
	NVIC_EnableIRQ((IRQn_Type)irq_line);
	lcdca_enable_interrupt();
}

void LCDCA_Handler(void)
{
    1698:	b508      	push	{r3, lr}
 *
 * This function clears "FC0R" bit of the LCDCA status.
 */
static inline void lcdca_clear_status(void)
{
	LCDCA->LCDCA_SCR = LCDCA_SCR_FC0R;
    169a:	f04f 0300 	mov.w	r3, #0
    169e:	f2c4 0308 	movt	r3, #16392	; 0x4008
    16a2:	f04f 0201 	mov.w	r2, #1
    16a6:	611a      	str	r2, [r3, #16]
	/* Clear interrupt flags */
	lcdca_clear_status();

	/* Interrupt handler */
	if (lcdca_callback_pointer != NULL) {
    16a8:	f240 60c8 	movw	r0, #1736	; 0x6c8
    16ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
    16b0:	6801      	ldr	r1, [r0, #0]
    16b2:	b101      	cbz	r1, 16b6 <LCDCA_Handler+0x1e>
		lcdca_callback_pointer();
    16b4:	4788      	blx	r1
    16b6:	bd08      	pop	{r3, pc}

000016b8 <pdca_channel_get_handler>:
 */
volatile PdcaChannel *pdca_channel_get_handler(pdca_channel_num_t
		pdca_ch_number)
{
	if (pdca_ch_number >= PDCA_NUMBER_OF_CHANNELS)
		pdca_ch_number = 0;
    16b8:	280f      	cmp	r0, #15
    16ba:	bf88      	it	hi
    16bc:	2000      	movhi	r0, #0

	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
    16be:	ea4f 1080 	mov.w	r0, r0, lsl #6
    16c2:	f100 4180 	add.w	r1, r0, #1073741824	; 0x40000000
			&(PDCA->PDCA_CHANNEL[pdca_ch_number]);

	return pdca_channel;
}
    16c6:	f501 2022 	add.w	r0, r1, #663552	; 0xa2000
    16ca:	4770      	bx	lr

000016cc <pdca_get_channel_status>:
 *
 * \return 1 if channel transfer is enabled, else 0
 */
enum pdca_channel_status
		pdca_get_channel_status(pdca_channel_num_t pdca_ch_number)
{
    16cc:	b508      	push	{r3, lr}
	/* Get the correct channel pointer */
	volatile PdcaChannel *pdca_channel =
    16ce:	f241 63b9 	movw	r3, #5817	; 0x16b9
    16d2:	f2c0 0300 	movt	r3, #0
    16d6:	4798      	blx	r3
			pdca_channel_get_handler(pdca_ch_number);
	uint32_t status = pdca_channel->PDCA_SR;
    16d8:	69c1      	ldr	r1, [r0, #28]
	uint32_t intflag = pdca_channel->PDCA_ISR;
    16da:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	if ((status & PDCA_SR_TEN) == PDCA_SR_TEN) {
    16dc:	f011 0f01 	tst.w	r1, #1
    16e0:	d00c      	beq.n	16fc <pdca_get_channel_status+0x30>
		if ((intflag & PDCA_ISR_TERR) == PDCA_ISR_TERR) {
    16e2:	f010 0f04 	tst.w	r0, #4
    16e6:	d10c      	bne.n	1702 <pdca_get_channel_status+0x36>
			return PDCA_CH_TRANSFER_ERROR;
		} else if ((intflag & PDCA_ISR_TRC) == PDCA_ISR_TRC) {
    16e8:	f010 0f02 	tst.w	r0, #2
    16ec:	d10c      	bne.n	1708 <pdca_get_channel_status+0x3c>
			return PDCA_CH_TRANSFER_COMPLETED;
		} else if ((intflag & PDCA_ISR_RCZ) == PDCA_ISR_RCZ) {
    16ee:	f000 0201 	and.w	r2, r0, #1
			return PDCA_CH_COUNTER_RELOAD_IS_ZERO;
    16f2:	2a00      	cmp	r2, #0
    16f4:	bf0c      	ite	eq
    16f6:	2001      	moveq	r0, #1
    16f8:	2002      	movne	r0, #2
    16fa:	bd08      	pop	{r3, pc}
		}
		return PDCA_CH_BUSY;
	} else {
		return PDCA_CH_FREE;
    16fc:	f04f 0000 	mov.w	r0, #0
    1700:	bd08      	pop	{r3, pc}
	uint32_t status = pdca_channel->PDCA_SR;
	uint32_t intflag = pdca_channel->PDCA_ISR;

	if ((status & PDCA_SR_TEN) == PDCA_SR_TEN) {
		if ((intflag & PDCA_ISR_TERR) == PDCA_ISR_TERR) {
			return PDCA_CH_TRANSFER_ERROR;
    1702:	f04f 0004 	mov.w	r0, #4
    1706:	bd08      	pop	{r3, pc}
		} else if ((intflag & PDCA_ISR_TRC) == PDCA_ISR_TRC) {
			return PDCA_CH_TRANSFER_COMPLETED;
    1708:	f04f 0003 	mov.w	r0, #3
		}
		return PDCA_CH_BUSY;
	} else {
		return PDCA_CH_FREE;
	}
}
    170c:	bd08      	pop	{r3, pc}
    170e:	bf00      	nop

00001710 <pdca_channel_interrupt>:
 * pdca_channel_set_callback() function.
 *
 * \param pdca_ch_number PDCA channel number to handle interrupt for
 */
static void pdca_channel_interrupt(const pdca_channel_num_t pdca_ch_number)
{
    1710:	b510      	push	{r4, lr}
    1712:	4604      	mov	r4, r0
	enum pdca_channel_status status;

	status = pdca_get_channel_status(pdca_ch_number);
    1714:	f241 63cd 	movw	r3, #5837	; 0x16cd
    1718:	f2c0 0300 	movt	r3, #0
    171c:	4798      	blx	r3

	if (pdca_callback_pointer[pdca_ch_number]) {
    171e:	f240 71d8 	movw	r1, #2008	; 0x7d8
    1722:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1726:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
    172a:	b102      	cbz	r2, 172e <pdca_channel_interrupt+0x1e>
		pdca_callback_pointer[pdca_ch_number] (status);
    172c:	4790      	blx	r2
    172e:	bd10      	pop	{r4, pc}

00001730 <PDCA_0_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 0.
 */
void PDCA_0_Handler(void)
{
    1730:	b508      	push	{r3, lr}
	pdca_channel_interrupt(0);
    1732:	f04f 0000 	mov.w	r0, #0
    1736:	f241 7311 	movw	r3, #5905	; 0x1711
    173a:	f2c0 0300 	movt	r3, #0
    173e:	4798      	blx	r3
    1740:	bd08      	pop	{r3, pc}
    1742:	bf00      	nop

00001744 <PDCA_1_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 1.
 */
void PDCA_1_Handler(void)
{
    1744:	b508      	push	{r3, lr}
	pdca_channel_interrupt(1);
    1746:	f04f 0001 	mov.w	r0, #1
    174a:	f241 7311 	movw	r3, #5905	; 0x1711
    174e:	f2c0 0300 	movt	r3, #0
    1752:	4798      	blx	r3
    1754:	bd08      	pop	{r3, pc}
    1756:	bf00      	nop

00001758 <PDCA_2_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 2.
 */
void PDCA_2_Handler(void)
{
    1758:	b508      	push	{r3, lr}
	pdca_channel_interrupt(2);
    175a:	f04f 0002 	mov.w	r0, #2
    175e:	f241 7311 	movw	r3, #5905	; 0x1711
    1762:	f2c0 0300 	movt	r3, #0
    1766:	4798      	blx	r3
    1768:	bd08      	pop	{r3, pc}
    176a:	bf00      	nop

0000176c <PDCA_3_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 3.
 */
void PDCA_3_Handler(void)
{
    176c:	b508      	push	{r3, lr}
	pdca_channel_interrupt(3);
    176e:	f04f 0003 	mov.w	r0, #3
    1772:	f241 7311 	movw	r3, #5905	; 0x1711
    1776:	f2c0 0300 	movt	r3, #0
    177a:	4798      	blx	r3
    177c:	bd08      	pop	{r3, pc}
    177e:	bf00      	nop

00001780 <PDCA_4_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 4.
 */
void PDCA_4_Handler(void)
{
    1780:	b508      	push	{r3, lr}
	pdca_channel_interrupt(4);
    1782:	f04f 0004 	mov.w	r0, #4
    1786:	f241 7311 	movw	r3, #5905	; 0x1711
    178a:	f2c0 0300 	movt	r3, #0
    178e:	4798      	blx	r3
    1790:	bd08      	pop	{r3, pc}
    1792:	bf00      	nop

00001794 <PDCA_5_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 5.
 */
void PDCA_5_Handler(void)
{
    1794:	b508      	push	{r3, lr}
	pdca_channel_interrupt(5);
    1796:	f04f 0005 	mov.w	r0, #5
    179a:	f241 7311 	movw	r3, #5905	; 0x1711
    179e:	f2c0 0300 	movt	r3, #0
    17a2:	4798      	blx	r3
    17a4:	bd08      	pop	{r3, pc}
    17a6:	bf00      	nop

000017a8 <PDCA_6_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 6.
 */
void PDCA_6_Handler(void)
{
    17a8:	b508      	push	{r3, lr}
	pdca_channel_interrupt(6);
    17aa:	f04f 0006 	mov.w	r0, #6
    17ae:	f241 7311 	movw	r3, #5905	; 0x1711
    17b2:	f2c0 0300 	movt	r3, #0
    17b6:	4798      	blx	r3
    17b8:	bd08      	pop	{r3, pc}
    17ba:	bf00      	nop

000017bc <PDCA_7_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 7.
 */
void PDCA_7_Handler(void)
{
    17bc:	b508      	push	{r3, lr}
	pdca_channel_interrupt(7);
    17be:	f04f 0007 	mov.w	r0, #7
    17c2:	f241 7311 	movw	r3, #5905	; 0x1711
    17c6:	f2c0 0300 	movt	r3, #0
    17ca:	4798      	blx	r3
    17cc:	bd08      	pop	{r3, pc}
    17ce:	bf00      	nop

000017d0 <PDCA_8_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 8.
 */
void PDCA_8_Handler(void)
{
    17d0:	b508      	push	{r3, lr}
	pdca_channel_interrupt(8);
    17d2:	f04f 0008 	mov.w	r0, #8
    17d6:	f241 7311 	movw	r3, #5905	; 0x1711
    17da:	f2c0 0300 	movt	r3, #0
    17de:	4798      	blx	r3
    17e0:	bd08      	pop	{r3, pc}
    17e2:	bf00      	nop

000017e4 <PDCA_9_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 9.
 */
void PDCA_9_Handler(void)
{
    17e4:	b508      	push	{r3, lr}
	pdca_channel_interrupt(9);
    17e6:	f04f 0009 	mov.w	r0, #9
    17ea:	f241 7311 	movw	r3, #5905	; 0x1711
    17ee:	f2c0 0300 	movt	r3, #0
    17f2:	4798      	blx	r3
    17f4:	bd08      	pop	{r3, pc}
    17f6:	bf00      	nop

000017f8 <PDCA_10_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 10.
 */
void PDCA_10_Handler(void)
{
    17f8:	b508      	push	{r3, lr}
	pdca_channel_interrupt(10);
    17fa:	f04f 000a 	mov.w	r0, #10
    17fe:	f241 7311 	movw	r3, #5905	; 0x1711
    1802:	f2c0 0300 	movt	r3, #0
    1806:	4798      	blx	r3
    1808:	bd08      	pop	{r3, pc}
    180a:	bf00      	nop

0000180c <PDCA_11_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 11.
 */
void PDCA_11_Handler(void)
{
    180c:	b508      	push	{r3, lr}
	pdca_channel_interrupt(11);
    180e:	f04f 000b 	mov.w	r0, #11
    1812:	f241 7311 	movw	r3, #5905	; 0x1711
    1816:	f2c0 0300 	movt	r3, #0
    181a:	4798      	blx	r3
    181c:	bd08      	pop	{r3, pc}
    181e:	bf00      	nop

00001820 <PDCA_12_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 12.
 */
void PDCA_12_Handler(void)
{
    1820:	b508      	push	{r3, lr}
	pdca_channel_interrupt(12);
    1822:	f04f 000c 	mov.w	r0, #12
    1826:	f241 7311 	movw	r3, #5905	; 0x1711
    182a:	f2c0 0300 	movt	r3, #0
    182e:	4798      	blx	r3
    1830:	bd08      	pop	{r3, pc}
    1832:	bf00      	nop

00001834 <PDCA_13_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 13.
 */
void PDCA_13_Handler(void)
{
    1834:	b508      	push	{r3, lr}
	pdca_channel_interrupt(13);
    1836:	f04f 000d 	mov.w	r0, #13
    183a:	f241 7311 	movw	r3, #5905	; 0x1711
    183e:	f2c0 0300 	movt	r3, #0
    1842:	4798      	blx	r3
    1844:	bd08      	pop	{r3, pc}
    1846:	bf00      	nop

00001848 <PDCA_14_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 14.
 */
void PDCA_14_Handler(void)
{
    1848:	b508      	push	{r3, lr}
	pdca_channel_interrupt(14);
    184a:	f04f 000e 	mov.w	r0, #14
    184e:	f241 7311 	movw	r3, #5905	; 0x1711
    1852:	f2c0 0300 	movt	r3, #0
    1856:	4798      	blx	r3
    1858:	bd08      	pop	{r3, pc}
    185a:	bf00      	nop

0000185c <PDCA_15_Handler>:

/**
 * \brief Interrupt handler for PDCA channel 15.
 */
void PDCA_15_Handler(void)
{
    185c:	b508      	push	{r3, lr}
	pdca_channel_interrupt(15);
    185e:	f04f 000f 	mov.w	r0, #15
    1862:	f241 7311 	movw	r3, #5905	; 0x1711
    1866:	f2c0 0300 	movt	r3, #0
    186a:	4798      	blx	r3
    186c:	bd08      	pop	{r3, pc}
    186e:	bf00      	nop

00001870 <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
    1870:	4603      	mov	r3, r0
    1872:	2800      	cmp	r0, #0
    1874:	d149      	bne.n	190a <udd_sleep_mode+0x9a>
    1876:	f240 72a0 	movw	r2, #1952	; 0x7a0
    187a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    187e:	7811      	ldrb	r1, [r2, #0]
    1880:	2900      	cmp	r1, #0
    1882:	d03c      	beq.n	18fe <udd_sleep_mode+0x8e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1884:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1888:	b672      	cpsid	i
    188a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    188e:	f240 02d4 	movw	r2, #212	; 0xd4
    1892:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1896:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    1898:	f240 72ac 	movw	r2, #1964	; 0x7ac
    189c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    18a0:	7810      	ldrb	r0, [r2, #0]
    18a2:	f100 30ff 	add.w	r0, r0, #4294967295
    18a6:	7010      	strb	r0, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    18a8:	bb49      	cbnz	r1, 18fe <udd_sleep_mode+0x8e>
		cpu_irq_enable();
    18aa:	f240 02d4 	movw	r2, #212	; 0xd4
    18ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
    18b2:	f04f 0101 	mov.w	r1, #1
    18b6:	7011      	strb	r1, [r2, #0]
    18b8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    18bc:	b662      	cpsie	i
    18be:	e01e      	b.n	18fe <udd_sleep_mode+0x8e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    18c0:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    18c4:	b672      	cpsid	i
    18c6:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    18ca:	f240 02d4 	movw	r2, #212	; 0xd4
    18ce:	f2c2 0200 	movt	r2, #8192	; 0x2000
    18d2:	f04f 0000 	mov.w	r0, #0
    18d6:	7010      	strb	r0, [r2, #0]
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    18d8:	f240 72ac 	movw	r2, #1964	; 0x7ac
    18dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    18e0:	7810      	ldrb	r0, [r2, #0]
    18e2:	f100 0001 	add.w	r0, r0, #1
    18e6:	7010      	strb	r0, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    18e8:	b949      	cbnz	r1, 18fe <udd_sleep_mode+0x8e>
		cpu_irq_enable();
    18ea:	f240 02d4 	movw	r2, #212	; 0xd4
    18ee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    18f2:	f04f 0101 	mov.w	r1, #1
    18f6:	7011      	strb	r1, [r2, #0]
    18f8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    18fc:	b662      	cpsie	i
		sleepmgr_unlock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
    18fe:	f240 70a0 	movw	r0, #1952	; 0x7a0
    1902:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1906:	7003      	strb	r3, [r0, #0]
    1908:	4770      	bx	lr
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
		sleepmgr_unlock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
    190a:	f240 72a0 	movw	r2, #1952	; 0x7a0
    190e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1912:	7810      	ldrb	r0, [r2, #0]
    1914:	2800      	cmp	r0, #0
    1916:	d0d3      	beq.n	18c0 <udd_sleep_mode+0x50>
    1918:	e7f1      	b.n	18fe <udd_sleep_mode+0x8e>
    191a:	bf00      	nop

0000191c <udd_ctrl_init>:
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
    191c:	f245 2320 	movw	r3, #21024	; 0x5220
    1920:	f2c4 030a 	movt	r3, #16394	; 0x400a
    1924:	f04f 0201 	mov.w	r2, #1
    1928:	601a      	str	r2, [r3, #0]
	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
    192a:	f245 1060 	movw	r0, #20832	; 0x5160
    192e:	f2c4 000a 	movt	r0, #16394	; 0x400a
    1932:	f04f 0102 	mov.w	r1, #2
    1936:	6001      	str	r1, [r0, #0]

	udd_g_ctrlreq.callback = NULL;
    1938:	f640 02d8 	movw	r2, #2264	; 0x8d8
    193c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1940:	f04f 0300 	mov.w	r3, #0
    1944:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    1946:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
    1948:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
    194a:	f240 71a4 	movw	r1, #1956	; 0x7a4
    194e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1952:	700b      	strb	r3, [r1, #0]
    1954:	4770      	bx	lr
    1956:	bf00      	nop

00001958 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    1958:	f240 73a4 	movw	r3, #1956	; 0x7a4
    195c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1960:	f04f 0205 	mov.w	r2, #5
    1964:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
    1966:	f245 10f0 	movw	r0, #20976	; 0x51f0
    196a:	f2c4 000a 	movt	r0, #16394	; 0x400a
    196e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    1972:	6001      	str	r1, [r0, #0]
    1974:	4770      	bx	lr
    1976:	bf00      	nop

00001978 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    1978:	f240 73a4 	movw	r3, #1956	; 0x7a4
    197c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1980:	f04f 0203 	mov.w	r2, #3
    1984:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	udd_udesc_rst_buf0_ctn(0);
    1986:	f240 7020 	movw	r0, #1824	; 0x720
    198a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    198e:	6841      	ldr	r1, [r0, #4]
    1990:	f36f 010e 	bfc	r1, #0, #15
    1994:	6041      	str	r1, [r0, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1996:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    199a:	b672      	cpsid	i
    199c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    19a0:	f240 03d4 	movw	r3, #212	; 0xd4
    19a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    19a8:	f04f 0200 	mov.w	r2, #0
    19ac:	701a      	strb	r2, [r3, #0]

	flags = cpu_irq_save();

	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
    19ae:	f245 1260 	movw	r2, #20832	; 0x5160
    19b2:	f2c4 020a 	movt	r2, #16394	; 0x400a
    19b6:	f04f 0101 	mov.w	r1, #1
    19ba:	6011      	str	r1, [r2, #0]
	udd_enable_in_send_interrupt(0);
    19bc:	f245 13f0 	movw	r3, #20976	; 0x51f0
    19c0:	f2c4 030a 	movt	r3, #16394	; 0x400a
    19c4:	6019      	str	r1, [r3, #0]

	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
    19c6:	f04f 0108 	mov.w	r1, #8
    19ca:	6011      	str	r1, [r2, #0]
	udd_enable_nak_out_interrupt(0);
    19cc:	6019      	str	r1, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    19ce:	b948      	cbnz	r0, 19e4 <udd_ctrl_send_zlp_in+0x6c>
		cpu_irq_enable();
    19d0:	f240 00d4 	movw	r0, #212	; 0xd4
    19d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    19d8:	f04f 0201 	mov.w	r2, #1
    19dc:	7002      	strb	r2, [r0, #0]
    19de:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    19e2:	b662      	cpsie	i
    19e4:	4770      	bx	lr
    19e6:	bf00      	nop

000019e8 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
    19e8:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
    19ea:	f640 03d8 	movw	r3, #2264	; 0x8d8
    19ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    19f2:	6918      	ldr	r0, [r3, #16]
    19f4:	b100      	cbz	r0, 19f8 <udd_ctrl_endofrequest+0x10>
		udd_g_ctrlreq.callback();
    19f6:	4780      	blx	r0
    19f8:	bd08      	pop	{r3, pc}
    19fa:	bf00      	nop

000019fc <udd_ep_trans_done>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_trans_done(udd_ep_id_t ep)
{
    19fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a00:	b083      	sub	sp, #12
    1a02:	4606      	mov	r6, r0
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
    1a04:	f000 030f 	and.w	r3, r0, #15
	ep_size = udd_get_endpoint_size(ep_num);
    1a08:	ea4f 0b83 	mov.w	fp, r3, lsl #2
    1a0c:	f44f 42a2 	mov.w	r2, #20736	; 0x5100
    1a10:	f2c4 020a 	movt	r2, #16394	; 0x400a
    1a14:	f852 a023 	ldr.w	sl, [r2, r3, lsl #2]

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep_num - 1];
    1a18:	f103 35ff 	add.w	r5, r3, #4294967295
    1a1c:	eb05 0085 	add.w	r0, r5, r5, lsl #2
    1a20:	f240 64d0 	movw	r4, #1744	; 0x6d0
    1a24:	f2c2 0400 	movt	r4, #8192	; 0x2000
    1a28:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1a2c:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1a30:	b672      	cpsid	i
    1a32:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1a36:	f240 07d4 	movw	r7, #212	; 0xd4
    1a3a:	f2c2 0700 	movt	r7, #8192	; 0x2000
    1a3e:	f04f 0200 	mov.w	r2, #0
    1a42:	703a      	strb	r2, [r7, #0]

	// Disable interrupt of endpoint
	flags = cpu_irq_save();
	udd_disable_endpoint_interrupt(ep_num);
    1a44:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    1a48:	fa07 f703 	lsl.w	r7, r7, r3
    1a4c:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
    1a50:	f2c4 000a 	movt	r0, #16394	; 0x400a
    1a54:	6147      	str	r7, [r0, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1a56:	b949      	cbnz	r1, 1a6c <udd_ep_trans_done+0x70>
		cpu_irq_enable();
    1a58:	f240 02d4 	movw	r2, #212	; 0xd4
    1a5c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1a60:	f04f 0101 	mov.w	r1, #1
    1a64:	7011      	strb	r1, [r2, #0]
    1a66:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1a6a:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (!ptr_job->busy) {
    1a6c:	7c20      	ldrb	r0, [r4, #16]
    1a6e:	f010 0f01 	tst.w	r0, #1
    1a72:	f000 8190 	beq.w	1d96 <udd_ep_trans_done+0x39a>
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
	ep_size = udd_get_endpoint_size(ep_num);
    1a76:	f3ca 1a02 	ubfx	sl, sl, #4, #3
    1a7a:	f04f 0208 	mov.w	r2, #8
    1a7e:	fa02 fa0a 	lsl.w	sl, r2, sl

	if (!ptr_job->busy) {
		return; // No job is running, then ignore it (system error)
	}

	if (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN)) {
    1a82:	f016 0f80 	tst.w	r6, #128	; 0x80
    1a86:	f000 80ad 	beq.w	1be4 <udd_ep_trans_done+0x1e8>
		// Transfer complete on IN
		nb_trans = udd_udesc_get_buf0_size(ep_num);
    1a8a:	ea4f 0043 	mov.w	r0, r3, lsl #1
    1a8e:	f240 7520 	movw	r5, #1824	; 0x720
    1a92:	f2c2 0500 	movt	r5, #8192	; 0x2000
    1a96:	eb05 1143 	add.w	r1, r5, r3, lsl #5
    1a9a:	684a      	ldr	r2, [r1, #4]
    1a9c:	f3c2 410e 	ubfx	r1, r2, #16, #15

		// Lock emission of new IN packet
		udd_enable_busy_bank0(ep_num);
    1aa0:	f245 12f0 	movw	r2, #20976	; 0x51f0
    1aa4:	f2c4 020a 	movt	r2, #16394	; 0x400a
    1aa8:	4493      	add	fp, r2
    1aaa:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
    1aae:	f842 5023 	str.w	r5, [r2, r3, lsl #2]

		// Ack interrupt
		udd_ack_in_send(ep_num);
    1ab2:	f245 1260 	movw	r2, #20832	; 0x5160
    1ab6:	f2c4 020a 	movt	r2, #16394	; 0x400a
    1aba:	f04f 0501 	mov.w	r5, #1
    1abe:	f842 5023 	str.w	r5, [r2, r3, lsl #2]

		if (0 == nb_trans) {
    1ac2:	b999      	cbnz	r1, 1aec <udd_ep_trans_done+0xf0>
			if (0 == udd_nb_busy_bank(ep_num)) {
    1ac4:	f245 1230 	movw	r2, #20784	; 0x5130
    1ac8:	f2c4 020a 	movt	r2, #16394	; 0x400a
    1acc:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    1ad0:	f415 5f40 	tst.w	r5, #12288	; 0x3000
    1ad4:	d10a      	bne.n	1aec <udd_ep_trans_done+0xf0>
				// All byte are transfered than take nb byte requested
				nb_trans = udd_udesc_get_buf0_ctn(ep_num);
    1ad6:	f240 7120 	movw	r1, #1824	; 0x720
    1ada:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1ade:	eb01 1200 	add.w	r2, r1, r0, lsl #4
    1ae2:	6855      	ldr	r5, [r2, #4]
    1ae4:	ea4f 4145 	mov.w	r1, r5, lsl #17
    1ae8:	ea4f 4151 	mov.w	r1, r1, lsr #17
			}
		}
		// Update number of data transfered
		dbg_print("i%d ", nb_trans);
		ptr_job->nb_trans += nb_trans;
    1aec:	68e2      	ldr	r2, [r4, #12]
    1aee:	188a      	adds	r2, r1, r2
    1af0:	60e2      	str	r2, [r4, #12]

		// Need to send other data
		if ((ptr_job->nb_trans != ptr_job->buf_size)
    1af2:	68a1      	ldr	r1, [r4, #8]
    1af4:	428a      	cmp	r2, r1
    1af6:	d106      	bne.n	1b06 <udd_ep_trans_done+0x10a>
				|| ptr_job->b_shortpacket) {
    1af8:	7c25      	ldrb	r5, [r4, #16]
    1afa:	f005 0502 	and.w	r5, r5, #2
    1afe:	b2ed      	uxtb	r5, r5
    1b00:	2d00      	cmp	r5, #0
    1b02:	f000 813d 	beq.w	1d80 <udd_ep_trans_done+0x384>
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1b06:	1a8e      	subs	r6, r1, r2
    1b08:	b2b1      	uxth	r1, r6
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1b0a:	f411 4f00 	tst.w	r1, #32768	; 0x8000
    1b0e:	d017      	beq.n	1b40 <udd_ep_trans_done+0x144>
				// The USB hardware support a maximum
				// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ep_size);
    1b10:	fa1f fa8a 	uxth.w	sl, sl
    1b14:	f647 72ff 	movw	r2, #32767	; 0x7fff
    1b18:	fb92 f1fa 	sdiv	r1, r2, sl
    1b1c:	fb0a 2511 	mls	r5, sl, r1, r2
				|| ptr_job->b_shortpacket) {
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				// The USB hardware support a maximum
				// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    1b20:	f5c5 46ff 	rsb	r6, r5, #32640	; 0x7f80
    1b24:	f106 067f 	add.w	r6, r6, #127	; 0x7f
    1b28:	b2b1      	uxth	r1, r6
						(UDD_ENDPOINT_MAX_TRANS % ep_size);
				udd_udesc_set_buf0_autozlp(ep_num, false);
    1b2a:	f240 7220 	movw	r2, #1824	; 0x720
    1b2e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1b32:	eb02 1600 	add.w	r6, r2, r0, lsl #4
    1b36:	6875      	ldr	r5, [r6, #4]
    1b38:	f36f 75df 	bfc	r5, #31, #1
    1b3c:	6075      	str	r5, [r6, #4]
    1b3e:	e00f      	b.n	1b60 <udd_ep_trans_done+0x164>
			} else {
				// Need ZLP, if requested and last packet is not a short packet
				udd_udesc_set_buf0_autozlp(ep_num, ptr_job->b_shortpacket);
    1b40:	7c22      	ldrb	r2, [r4, #16]
    1b42:	f3c2 0c40 	ubfx	ip, r2, #1, #1
    1b46:	f240 7520 	movw	r5, #1824	; 0x720
    1b4a:	f2c2 0500 	movt	r5, #8192	; 0x2000
    1b4e:	eb05 1500 	add.w	r5, r5, r0, lsl #4
    1b52:	686e      	ldr	r6, [r5, #4]
    1b54:	f36c 76df 	bfi	r6, ip, #31, #1
    1b58:	606e      	str	r6, [r5, #4]
				ptr_job->b_shortpacket = false; // No need to request another ZLP
    1b5a:	f36f 0241 	bfc	r2, #1, #1
    1b5e:	7422      	strb	r2, [r4, #16]
			}

			udd_udesc_set_buf0_ctn(ep_num, next_trans);
    1b60:	f240 7520 	movw	r5, #1824	; 0x720
    1b64:	f2c2 0500 	movt	r5, #8192	; 0x2000
    1b68:	ea4f 1000 	mov.w	r0, r0, lsl #4
    1b6c:	182a      	adds	r2, r5, r0
    1b6e:	6856      	ldr	r6, [r2, #4]
    1b70:	f361 060e 	bfi	r6, r1, #0, #15
    1b74:	6056      	str	r6, [r2, #4]
			udd_udesc_rst_buf0_size(ep_num);
    1b76:	6851      	ldr	r1, [r2, #4]
    1b78:	f36f 411e 	bfc	r1, #16, #15
    1b7c:	6051      	str	r1, [r2, #4]

			// Link the user buffer directly on USB hardware DMA
			udd_udesc_set_buf0_addr(ep_num,
    1b7e:	6861      	ldr	r1, [r4, #4]
    1b80:	68e2      	ldr	r2, [r4, #12]
    1b82:	1889      	adds	r1, r1, r2
    1b84:	5029      	str	r1, [r5, r0]
					&ptr_job->buf[ptr_job->nb_trans]);

			// Start transfer
			udd_ack_fifocon(ep_num);
    1b86:	f245 2020 	movw	r0, #21024	; 0x5220
    1b8a:	f2c4 000a 	movt	r0, #16394	; 0x400a
    1b8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1b92:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			udd_disable_busy_bank0(ep_num);
    1b96:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    1b9a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1b9e:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1ba2:	b672      	cpsid	i
    1ba4:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1ba8:	f240 03d4 	movw	r3, #212	; 0xd4
    1bac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1bb0:	f04f 0200 	mov.w	r2, #0
    1bb4:	701a      	strb	r2, [r3, #0]

			// Enable interrupt
			flags = cpu_irq_save();
			udd_enable_in_send_interrupt(ep_num);
    1bb6:	f04f 0101 	mov.w	r1, #1
    1bba:	f8cb 1000 	str.w	r1, [fp]
			udd_enable_endpoint_interrupt(ep_num);
    1bbe:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1bc2:	f2c4 030a 	movt	r3, #16394	; 0x400a
    1bc6:	619f      	str	r7, [r3, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1bc8:	2800      	cmp	r0, #0
    1bca:	f040 80e4 	bne.w	1d96 <udd_ep_trans_done+0x39a>
		cpu_irq_enable();
    1bce:	f240 00d4 	movw	r0, #212	; 0xd4
    1bd2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1bd6:	f04f 0201 	mov.w	r2, #1
    1bda:	7002      	strb	r2, [r0, #0]
    1bdc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1be0:	b662      	cpsie	i
    1be2:	e0d8      	b.n	1d96 <udd_ep_trans_done+0x39a>
			cpu_irq_restore(flags);
			return;
		}
	} else {
		// Transfer complete on OUT
		nb_trans = udd_udesc_get_buf0_ctn(ep_num);
    1be4:	ea4f 0943 	mov.w	r9, r3, lsl #1
    1be8:	f240 7120 	movw	r1, #1824	; 0x720
    1bec:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1bf0:	eb01 1043 	add.w	r0, r1, r3, lsl #5
    1bf4:	6842      	ldr	r2, [r0, #4]
    1bf6:	ea4f 4842 	mov.w	r8, r2, lsl #17
    1bfa:	ea4f 4858 	mov.w	r8, r8, lsr #17

		// Lock reception of new OUT packet
		udd_enable_busy_bank0(ep_num);
    1bfe:	f245 10f0 	movw	r0, #20976	; 0x51f0
    1c02:	f2c4 000a 	movt	r0, #16394	; 0x400a
    1c06:	eb0b 0100 	add.w	r1, fp, r0
    1c0a:	9101      	str	r1, [sp, #4]
    1c0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    1c10:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

		// Ack interrupt
		udd_ack_out_received(ep_num);
    1c14:	f245 1060 	movw	r0, #20832	; 0x5160
    1c18:	f2c4 000a 	movt	r0, #16394	; 0x400a
    1c1c:	f04f 0102 	mov.w	r1, #2
    1c20:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_ack_fifocon(ep_num);
    1c24:	f245 2220 	movw	r2, #21024	; 0x5220
    1c28:	f2c4 020a 	movt	r2, #16394	; 0x400a
    1c2c:	4493      	add	fp, r2
    1c2e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    1c32:	f842 0023 	str.w	r0, [r2, r3, lsl #2]

		dbg_print("o%d ", nb_trans);

		// Can be necessary to copy data receive from cache buffer to user buffer
		if (ptr_job->b_use_out_cache_buffer) {
    1c36:	7c23      	ldrb	r3, [r4, #16]
    1c38:	f003 0104 	and.w	r1, r3, #4
    1c3c:	b2ca      	uxtb	r2, r1
    1c3e:	b1aa      	cbz	r2, 1c6c <udd_ep_trans_done+0x270>
			memcpy(&ptr_job->buf[ptr_job->nb_trans],
    1c40:	6860      	ldr	r0, [r4, #4]
    1c42:	68e1      	ldr	r1, [r4, #12]
		dbg_print("%x: ", ep_addr);
		udd_ep_trans_done(ep_addr);
		return true;
	}
	return false;
}
    1c44:	fa1f f38a 	uxth.w	r3, sl

		// Can be necessary to copy data receive from cache buffer to user buffer
		if (ptr_job->b_use_out_cache_buffer) {
			memcpy(&ptr_job->buf[ptr_job->nb_trans],
					udd_ep_out_cache_buffer[ep_num - 1],
					ptr_job->buf_size % ep_size);
    1c48:	f8d4 e008 	ldr.w	lr, [r4, #8]
    1c4c:	fbbe f2f3 	udiv	r2, lr, r3

		dbg_print("o%d ", nb_trans);

		// Can be necessary to copy data receive from cache buffer to user buffer
		if (ptr_job->b_use_out_cache_buffer) {
			memcpy(&ptr_job->buf[ptr_job->nb_trans],
    1c50:	1840      	adds	r0, r0, r1
    1c52:	f640 0118 	movw	r1, #2072	; 0x818
    1c56:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1c5a:	eb01 1185 	add.w	r1, r1, r5, lsl #6
    1c5e:	fb03 e212 	mls	r2, r3, r2, lr
    1c62:	f644 1349 	movw	r3, #18761	; 0x4949
    1c66:	f2c0 0300 	movt	r3, #0
    1c6a:	4798      	blx	r3
					udd_ep_out_cache_buffer[ep_num - 1],
					ptr_job->buf_size % ep_size);
		}

		// Update number of data transfered
		ptr_job->nb_trans += nb_trans;
    1c6c:	68e0      	ldr	r0, [r4, #12]
    1c6e:	eb08 0100 	add.w	r1, r8, r0
    1c72:	60e1      	str	r1, [r4, #12]
		if (ptr_job->nb_trans > ptr_job->buf_size) {
    1c74:	68a2      	ldr	r2, [r4, #8]
    1c76:	4291      	cmp	r1, r2
			ptr_job->nb_trans = ptr_job->buf_size;
    1c78:	bf88      	it	hi
    1c7a:	60e2      	strhi	r2, [r4, #12]
		}

		// If all previous data requested are received and user buffer not full
		// then need to receive other data
		if ((nb_trans == udd_udesc_get_buf0_size(ep_num))
    1c7c:	f240 7320 	movw	r3, #1824	; 0x720
    1c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1c84:	eb03 1009 	add.w	r0, r3, r9, lsl #4
    1c88:	6841      	ldr	r1, [r0, #4]
    1c8a:	f3c1 430e 	ubfx	r3, r1, #16, #15
    1c8e:	4598      	cmp	r8, r3
    1c90:	d176      	bne.n	1d80 <udd_ep_trans_done+0x384>
			&& (ptr_job->nb_trans != ptr_job->buf_size)) {
    1c92:	68e3      	ldr	r3, [r4, #12]
    1c94:	429a      	cmp	r2, r3
    1c96:	d073      	beq.n	1d80 <udd_ep_trans_done+0x384>
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
	ep_size = udd_get_endpoint_size(ep_num);
    1c98:	fa1f f18a 	uxth.w	r1, sl

		// If all previous data requested are received and user buffer not full
		// then need to receive other data
		if ((nb_trans == udd_udesc_get_buf0_size(ep_num))
			&& (ptr_job->nb_trans != ptr_job->buf_size)) {
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    1c9c:	1ad6      	subs	r6, r2, r3
    1c9e:	b2b2      	uxth	r2, r6
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    1ca0:	f412 4f00 	tst.w	r2, #32768	; 0x8000
    1ca4:	d00c      	beq.n	1cc0 <udd_ep_trans_done+0x2c4>
				// The USB hardware support a maximum transfer size
				// of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS
						- (UDD_ENDPOINT_MAX_TRANS % ep_size);
    1ca6:	468a      	mov	sl, r1
    1ca8:	f647 76ff 	movw	r6, #32767	; 0x7fff
    1cac:	fb96 f0f1 	sdiv	r0, r6, r1
    1cb0:	fb01 6210 	mls	r2, r1, r0, r6
			&& (ptr_job->nb_trans != ptr_job->buf_size)) {
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				// The USB hardware support a maximum transfer size
				// of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS
    1cb4:	f5c2 46ff 	rsb	r6, r2, #32640	; 0x7f80
    1cb8:	f106 067f 	add.w	r6, r6, #127	; 0x7f
    1cbc:	b2b2      	uxth	r2, r6
    1cbe:	e005      	b.n	1ccc <udd_ep_trans_done+0x2d0>
						- (UDD_ENDPOINT_MAX_TRANS % ep_size);
			} else {
				next_trans -= next_trans % ep_size;
    1cc0:	fbb2 f0f1 	udiv	r0, r2, r1
    1cc4:	fb01 2610 	mls	r6, r1, r0, r2
    1cc8:	1b92      	subs	r2, r2, r6
    1cca:	b292      	uxth	r2, r2
			}

			udd_udesc_rst_buf0_ctn(ep_num);
    1ccc:	f240 7020 	movw	r0, #1824	; 0x720
    1cd0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1cd4:	eb00 1009 	add.w	r0, r0, r9, lsl #4
    1cd8:	6846      	ldr	r6, [r0, #4]
    1cda:	f36f 060e 	bfc	r6, #0, #15
    1cde:	6046      	str	r6, [r0, #4]
			if (next_trans < ep_size) {
    1ce0:	428a      	cmp	r2, r1
    1ce2:	d218      	bcs.n	1d16 <udd_ep_trans_done+0x31a>
				// Use the cache buffer for Bulk or Interrupt size endpoint
				ptr_job->b_use_out_cache_buffer = true;
    1ce4:	7c22      	ldrb	r2, [r4, #16]
    1ce6:	f042 0004 	orr.w	r0, r2, #4
    1cea:	7420      	strb	r0, [r4, #16]
				udd_udesc_set_buf0_addr(ep_num,
    1cec:	f640 0318 	movw	r3, #2072	; 0x818
    1cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1cf4:	eb03 1585 	add.w	r5, r3, r5, lsl #6
    1cf8:	f240 7220 	movw	r2, #1824	; 0x720
    1cfc:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1d00:	ea4f 1909 	mov.w	r9, r9, lsl #4
    1d04:	eb02 0009 	add.w	r0, r2, r9
    1d08:	f842 5009 	str.w	r5, [r2, r9]
						udd_ep_out_cache_buffer[ep_num-1]);
				udd_udesc_set_buf0_size(ep_num, ep_size);
    1d0c:	6843      	ldr	r3, [r0, #4]
    1d0e:	f361 431e 	bfi	r3, r1, #16, #15
    1d12:	6043      	str	r3, [r0, #4]
    1d14:	e00f      	b.n	1d36 <udd_ep_trans_done+0x33a>
			} else {
				// Link the user buffer directly on USB hardware DMA
				udd_udesc_set_buf0_addr(ep_num, &ptr_job->buf[ptr_job->nb_trans]);
    1d16:	6861      	ldr	r1, [r4, #4]
    1d18:	18cb      	adds	r3, r1, r3
    1d1a:	f240 7020 	movw	r0, #1824	; 0x720
    1d1e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1d22:	ea4f 1909 	mov.w	r9, r9, lsl #4
    1d26:	eb00 0109 	add.w	r1, r0, r9
    1d2a:	f840 3009 	str.w	r3, [r0, r9]
				udd_udesc_set_buf0_size(ep_num, next_trans);
    1d2e:	684b      	ldr	r3, [r1, #4]
    1d30:	f362 431e 	bfi	r3, r2, #16, #15
    1d34:	604b      	str	r3, [r1, #4]
			}
			// Start transfer
			udd_disable_busy_bank0(ep_num);
    1d36:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    1d3a:	f8cb 1000 	str.w	r1, [fp]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1d3e:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1d42:	b672      	cpsid	i
    1d44:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1d48:	f240 00d4 	movw	r0, #212	; 0xd4
    1d4c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1d50:	f04f 0300 	mov.w	r3, #0
    1d54:	7003      	strb	r3, [r0, #0]

			// Enable interrupt
			flags = cpu_irq_save();
			udd_enable_out_received_interrupt(ep_num);
    1d56:	f04f 0002 	mov.w	r0, #2
    1d5a:	9901      	ldr	r1, [sp, #4]
    1d5c:	6008      	str	r0, [r1, #0]
			udd_enable_endpoint_interrupt(ep_num);
    1d5e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1d62:	f2c4 030a 	movt	r3, #16394	; 0x400a
    1d66:	619f      	str	r7, [r3, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1d68:	b9aa      	cbnz	r2, 1d96 <udd_ep_trans_done+0x39a>
		cpu_irq_enable();
    1d6a:	f240 00d4 	movw	r0, #212	; 0xd4
    1d6e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1d72:	f04f 0201 	mov.w	r2, #1
    1d76:	7002      	strb	r2, [r0, #0]
    1d78:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1d7c:	b662      	cpsie	i
    1d7e:	e00a      	b.n	1d96 <udd_ep_trans_done+0x39a>
		}
	}

	// Job complete then call callback
	dbg_print("done%x ", ep);
	ptr_job->busy = false;
    1d80:	7c23      	ldrb	r3, [r4, #16]
    1d82:	f36f 0300 	bfc	r3, #0, #1
    1d86:	7423      	strb	r3, [r4, #16]
	if (NULL != ptr_job->call_trans) {
    1d88:	6823      	ldr	r3, [r4, #0]
    1d8a:	b123      	cbz	r3, 1d96 <udd_ep_trans_done+0x39a>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    1d8c:	f04f 0000 	mov.w	r0, #0
    1d90:	68e1      	ldr	r1, [r4, #12]
    1d92:	4632      	mov	r2, r6
    1d94:	4798      	blx	r3
	}
	return;
}
    1d96:	b003      	add	sp, #12
    1d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001d9c <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
    1d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1d9e:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1da2:	b672      	cpsid	i
    1da4:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1da8:	f240 03d4 	movw	r3, #212	; 0xd4
    1dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1db0:	f04f 0100 	mov.w	r1, #0
    1db4:	7019      	strb	r1, [r3, #0]
	static bool b_shortpacket = false;
	uint16_t nb_remain;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
    1db6:	f245 2020 	movw	r0, #21024	; 0x5220
    1dba:	f2c4 000a 	movt	r0, #16394	; 0x400a
    1dbe:	f04f 0101 	mov.w	r1, #1
    1dc2:	6001      	str	r1, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1dc4:	b93a      	cbnz	r2, 1dd6 <udd_ctrl_in_sent+0x3a>
		cpu_irq_enable();
    1dc6:	f240 03d4 	movw	r3, #212	; 0xd4
    1dca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1dce:	7019      	strb	r1, [r3, #0]
    1dd0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1dd4:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    1dd6:	f240 70a4 	movw	r0, #1956	; 0x7a4
    1dda:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1dde:	7801      	ldrb	r1, [r0, #0]
    1de0:	2903      	cmp	r1, #3
    1de2:	d10a      	bne.n	1dfa <udd_ctrl_in_sent+0x5e>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
    1de4:	f641 12e9 	movw	r2, #6633	; 0x19e9
    1de8:	f2c0 0200 	movt	r2, #0
    1dec:	4790      	blx	r2
		// Reinitializes control endpoint management
		udd_ctrl_init();
    1dee:	f641 131d 	movw	r3, #6429	; 0x191d
    1df2:	f2c0 0300 	movt	r3, #0
    1df6:	4798      	blx	r3
		return;
    1df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    1dfa:	f240 74a2 	movw	r4, #1954	; 0x7a2
    1dfe:	f2c2 0400 	movt	r4, #8192	; 0x2000
    1e02:	8823      	ldrh	r3, [r4, #0]
    1e04:	f640 02d8 	movw	r2, #2264	; 0x8d8
    1e08:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1e0c:	8990      	ldrh	r0, [r2, #12]
    1e0e:	1ac1      	subs	r1, r0, r3
    1e10:	b28c      	uxth	r4, r1
	if (0 == nb_remain) {
    1e12:	2c00      	cmp	r4, #0
    1e14:	d155      	bne.n	1ec2 <udd_ctrl_in_sent+0x126>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1e16:	f240 62cc 	movw	r2, #1740	; 0x6cc
    1e1a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1e1e:	8810      	ldrh	r0, [r2, #0]
    1e20:	181b      	adds	r3, r3, r0
    1e22:	b299      	uxth	r1, r3
    1e24:	8011      	strh	r1, [r2, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
    1e26:	f640 02d8 	movw	r2, #2264	; 0x8d8
    1e2a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    1e2e:	88d0      	ldrh	r0, [r2, #6]
    1e30:	4288      	cmp	r0, r1
    1e32:	d005      	beq.n	1e40 <udd_ctrl_in_sent+0xa4>
				|| b_shortpacket) {
    1e34:	f240 63ce 	movw	r3, #1742	; 0x6ce
    1e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1e3c:	7819      	ldrb	r1, [r3, #0]
    1e3e:	b361      	cbz	r1, 1e9a <udd_ctrl_in_sent+0xfe>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1e40:	f240 73a4 	movw	r3, #1956	; 0x7a4
    1e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1e48:	f04f 0204 	mov.w	r2, #4
    1e4c:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1e4e:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1e52:	b672      	cpsid	i
    1e54:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1e58:	f240 01d4 	movw	r1, #212	; 0xd4
    1e5c:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1e60:	f04f 0300 	mov.w	r3, #0
    1e64:	700b      	strb	r3, [r1, #0]

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
    1e66:	f245 1160 	movw	r1, #20832	; 0x5160
    1e6a:	f2c4 010a 	movt	r1, #16394	; 0x400a
    1e6e:	f04f 0210 	mov.w	r2, #16
    1e72:	600a      	str	r2, [r1, #0]
	udd_enable_nak_in_interrupt(0);
    1e74:	f245 13f0 	movw	r3, #20976	; 0x51f0
    1e78:	f2c4 030a 	movt	r3, #16394	; 0x400a
    1e7c:	601a      	str	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1e7e:	2800      	cmp	r0, #0
    1e80:	f040 8091 	bne.w	1fa6 <udd_ctrl_in_sent+0x20a>
		cpu_irq_enable();
    1e84:	f240 00d4 	movw	r0, #212	; 0xd4
    1e88:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1e8c:	f04f 0101 	mov.w	r1, #1
    1e90:	7001      	strb	r1, [r0, #0]
    1e92:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1e96:	b662      	cpsie	i
    1e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
    1e9a:	f640 05d8 	movw	r5, #2264	; 0x8d8
    1e9e:	f2c2 0500 	movt	r5, #8192	; 0x2000
    1ea2:	696a      	ldr	r2, [r5, #20]
    1ea4:	b1ca      	cbz	r2, 1eda <udd_ctrl_in_sent+0x13e>
				|| (!udd_g_ctrlreq.over_under_run())) {
    1ea6:	4790      	blx	r2
    1ea8:	b1b8      	cbz	r0, 1eda <udd_ctrl_in_sent+0x13e>
			// Underrun then send zlp on IN
			// Here nb_remain=0, this allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
    1eaa:	f240 74a2 	movw	r4, #1954	; 0x7a2
    1eae:	f2c2 0400 	movt	r4, #8192	; 0x2000
    1eb2:	f04f 0000 	mov.w	r0, #0
    1eb6:	8020      	strh	r0, [r4, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    1eb8:	f640 03d8 	movw	r3, #2264	; 0x8d8
    1ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1ec0:	899c      	ldrh	r4, [r3, #12]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    1ec2:	2c3f      	cmp	r4, #63	; 0x3f
    1ec4:	d909      	bls.n	1eda <udd_ctrl_in_sent+0x13e>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
    1ec6:	f240 61ce 	movw	r1, #1742	; 0x6ce
    1eca:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1ece:	f04f 0500 	mov.w	r5, #0
    1ed2:	700d      	strb	r5, [r1, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    1ed4:	f04f 0440 	mov.w	r4, #64	; 0x40
    1ed8:	e006      	b.n	1ee8 <udd_ctrl_in_sent+0x14c>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
    1eda:	f240 60ce 	movw	r0, #1742	; 0x6ce
    1ede:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1ee2:	f04f 0201 	mov.w	r2, #1
    1ee6:	7002      	strb	r2, [r0, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1ee8:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    1eec:	f1d3 0501 	rsbs	r5, r3, #1
    1ef0:	bf38      	it	cc
    1ef2:	2500      	movcc	r5, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1ef4:	b672      	cpsid	i
    1ef6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1efa:	f240 01d4 	movw	r1, #212	; 0xd4
    1efe:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1f02:	f04f 0000 	mov.w	r0, #0
    1f06:	7008      	strb	r0, [r1, #0]
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
    1f08:	f245 1230 	movw	r2, #20784	; 0x5130
    1f0c:	f2c4 020a 	movt	r2, #16394	; 0x400a
    1f10:	6813      	ldr	r3, [r2, #0]
    1f12:	f013 0f02 	tst.w	r3, #2
    1f16:	d012      	beq.n	1f3e <udd_ctrl_in_sent+0x1a2>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1f18:	b14d      	cbz	r5, 1f2e <udd_ctrl_in_sent+0x192>
		cpu_irq_enable();
    1f1a:	f240 03d4 	movw	r3, #212	; 0xd4
    1f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1f22:	f04f 0201 	mov.w	r2, #1
    1f26:	701a      	strb	r2, [r3, #0]
    1f28:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1f2c:	b662      	cpsie	i
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1f2e:	f240 70a4 	movw	r0, #1956	; 0x7a4
    1f32:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1f36:	f04f 0104 	mov.w	r1, #4
    1f3a:	7001      	strb	r1, [r0, #0]
		return; // Exit of IN DATA phase
    1f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	// Write quickly the IN data
	memcpy(udd_ctrl_buffer,
    1f3e:	f240 76a2 	movw	r6, #1954	; 0x7a2
    1f42:	f2c2 0600 	movt	r6, #8192	; 0x2000
    1f46:	8837      	ldrh	r7, [r6, #0]
			udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,
    1f48:	f640 01d8 	movw	r1, #2264	; 0x8d8
    1f4c:	f2c2 0100 	movt	r1, #8192	; 0x2000
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	memcpy(udd_ctrl_buffer,
    1f50:	688a      	ldr	r2, [r1, #8]
    1f52:	f640 00f0 	movw	r0, #2288	; 0x8f0
    1f56:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1f5a:	19d1      	adds	r1, r2, r7
    1f5c:	4622      	mov	r2, r4
    1f5e:	f644 1349 	movw	r3, #18761	; 0x4949
    1f62:	f2c0 0300 	movt	r3, #0
    1f66:	4798      	blx	r3
			udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,
			nb_remain);
	udd_ctrl_payload_nb_trans += nb_remain;
    1f68:	19e7      	adds	r7, r4, r7
    1f6a:	8037      	strh	r7, [r6, #0]
	udd_udesc_set_buf0_ctn(0, nb_remain);
    1f6c:	f240 7020 	movw	r0, #1824	; 0x720
    1f70:	f2c2 0000 	movt	r0, #8192	; 0x2000
    1f74:	6841      	ldr	r1, [r0, #4]
    1f76:	f364 010e 	bfi	r1, r4, #0, #15
    1f7a:	6041      	str	r1, [r0, #4]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
    1f7c:	f245 1360 	movw	r3, #20832	; 0x5160
    1f80:	f2c4 030a 	movt	r3, #16394	; 0x400a
    1f84:	f04f 0201 	mov.w	r2, #1
    1f88:	601a      	str	r2, [r3, #0]
	udd_enable_in_send_interrupt(0);
    1f8a:	f245 10f0 	movw	r0, #20976	; 0x51f0
    1f8e:	f2c4 000a 	movt	r0, #16394	; 0x400a
    1f92:	6002      	str	r2, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    1f94:	b13d      	cbz	r5, 1fa6 <udd_ctrl_in_sent+0x20a>
		cpu_irq_enable();
    1f96:	f240 01d4 	movw	r1, #212	; 0xd4
    1f9a:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1f9e:	700a      	strb	r2, [r1, #0]
    1fa0:	f3bf 8f5f 	dmb	sy
    1fa4:	b662      	cpsie	i
    1fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001fa8 <udd_attach>:
#endif
	cpu_irq_restore(flags);
}

void udd_attach(void)
{
    1fa8:	b538      	push	{r3, r4, r5, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1faa:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    1fae:	b672      	cpsid	i
    1fb0:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    1fb4:	f240 03d4 	movw	r3, #212	; 0xd4
    1fb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1fbc:	f04f 0200 	mov.w	r2, #0
    1fc0:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
    1fc2:	f04f 0001 	mov.w	r0, #1
    1fc6:	f641 0171 	movw	r1, #6257	; 0x1871
    1fca:	f2c0 0100 	movt	r1, #0
    1fce:	4788      	blx	r1
	otg_unfreeze_clock();
    1fd0:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
    1fd4:	f2c4 000a 	movt	r0, #16394	; 0x400a
    1fd8:	f8d0 5800 	ldr.w	r5, [r0, #2048]	; 0x800
    1fdc:	f425 4380 	bic.w	r3, r5, #16384	; 0x4000
    1fe0:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
	while(!Is_otg_clock_usable());
    1fe4:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
    1fe8:	f2c4 020a 	movt	r2, #16394	; 0x400a
    1fec:	f8d2 1804 	ldr.w	r1, [r2, #2052]	; 0x804
    1ff0:	f411 4f80 	tst.w	r1, #16384	; 0x4000
    1ff4:	d0fa      	beq.n	1fec <udd_attach+0x44>

	// Authorize attach if Vbus is present
	udd_attach_device();
    1ff6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    1ffa:	f2c4 030a 	movt	r3, #16394	; 0x400a
    1ffe:	6818      	ldr	r0, [r3, #0]
    2000:	f420 7580 	bic.w	r5, r0, #256	; 0x100
    2004:	601d      	str	r5, [r3, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
    2006:	f04f 0508 	mov.w	r5, #8
    200a:	619d      	str	r5, [r3, #24]
	udd_enable_suspend_interrupt();
    200c:	f04f 0101 	mov.w	r1, #1
    2010:	6199      	str	r1, [r3, #24]
	udd_enable_wake_up_interrupt();
    2012:	f04f 0210 	mov.w	r2, #16
    2016:	619a      	str	r2, [r3, #24]
	udd_enable_sof_interrupt();
    2018:	f04f 0004 	mov.w	r0, #4
    201c:	6198      	str	r0, [r3, #24]

	// Reset following interrupts flag
	udd_ack_reset();
    201e:	609d      	str	r5, [r3, #8]
	udd_ack_sof();
    2020:	6098      	str	r0, [r3, #8]

	// The first suspend interrupt must be forced
	udd_raise_suspend();
    2022:	60d9      	str	r1, [r3, #12]
	udd_ack_wake_up();
    2024:	609a      	str	r2, [r3, #8]
	otg_freeze_clock();
    2026:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
    202a:	f442 4080 	orr.w	r0, r2, #16384	; 0x4000
    202e:	f8c3 0800 	str.w	r0, [r3, #2048]	; 0x800
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2032:	b93c      	cbnz	r4, 2044 <udd_attach+0x9c>
		cpu_irq_enable();
    2034:	f240 03d4 	movw	r3, #212	; 0xd4
    2038:	f2c2 0300 	movt	r3, #8192	; 0x2000
    203c:	7019      	strb	r1, [r3, #0]
    203e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2042:	b662      	cpsie	i
    2044:	bd38      	pop	{r3, r4, r5, pc}
    2046:	bf00      	nop

00002048 <udd_enable>:
#endif
}


void udd_enable(void)
{
    2048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    204c:	f3ef 8810 	mrs	r8, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2050:	b672      	cpsid	i
    2052:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    2056:	f240 06d4 	movw	r6, #212	; 0xd4
    205a:	f2c2 0600 	movt	r6, #8192	; 0x2000
    205e:	f04f 0500 	mov.w	r5, #0
    2062:	7035      	strb	r5, [r6, #0]
		cpu_irq_restore(flags);
		return;
	}
#else
	//* SINGLE DEVICE MODE INITIALIZATION
	sysclk_enable_usb();
    2064:	f643 53cd 	movw	r3, #15821	; 0x3dcd
    2068:	f2c0 0300 	movt	r3, #0
    206c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
    206e:	f44f 4061 	mov.w	r0, #57600	; 0xe100
    2072:	f2ce 0000 	movt	r0, #57344	; 0xe000
    2076:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    207a:	f8c0 2180 	str.w	r2, [r0, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    207e:	f04f 0150 	mov.w	r1, #80	; 0x50
    2082:	f880 1312 	strb.w	r1, [r0, #786]	; 0x312
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
    2086:	6002      	str	r2, [r0, #0]
 * \param awen_mask Mask of asynchronous wake-up sources (use one of the defines
 *  PM_AWEN_xxxx in the part-specific header file)
 */
__always_inline static void usbc_async_wake_up_enable(void)
{
	PM->PM_AWEN |= (1U << PM_AWEN_USBC);
    2088:	462c      	mov	r4, r5
    208a:	f2c4 040e 	movt	r4, #16398	; 0x400e
    208e:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
    2092:	f047 0304 	orr.w	r3, r7, #4
    2096:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188

	/* Always authorize asynchronous USB interrupts to exit of sleep mode
	 * For SAM USB wake up device except BACKUP mode
	 */
	usbc_async_wake_up_enable();
	bpm_enable_fast_wakeup(BPM);
    209a:	4628      	mov	r0, r5
    209c:	f2c4 000f 	movt	r0, #16399	; 0x400f
    20a0:	f244 22b1 	movw	r2, #17073	; 0x42b1
    20a4:	f2c0 0200 	movt	r2, #0
    20a8:	4790      	blx	r2
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
#else
	// ID pin not used then enable device mode
	otg_enable_device_mode();
    20aa:	f44f 44a0 	mov.w	r4, #20480	; 0x5000
    20ae:	f2c4 040a 	movt	r4, #16394	; 0x400a
    20b2:	f8d4 0800 	ldr.w	r0, [r4, #2048]	; 0x800
    20b6:	f040 7180 	orr.w	r1, r0, #16777216	; 0x1000000
    20ba:	f8c4 1800 	str.w	r1, [r4, #2048]	; 0x800
#endif

	// Enable USB hardware
	otg_enable();
    20be:	f8d4 7800 	ldr.w	r7, [r4, #2048]	; 0x800
    20c2:	f447 4300 	orr.w	r3, r7, #32768	; 0x8000
    20c6:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
	otg_unfreeze_clock();
    20ca:	f8d4 2800 	ldr.w	r2, [r4, #2048]	; 0x800
    20ce:	f422 4080 	bic.w	r0, r2, #16384	; 0x4000
    20d2:	f8c4 0800 	str.w	r0, [r4, #2048]	; 0x800
	(void)Is_otg_clock_frozen();
    20d6:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800

	memset((uint8_t *) udd_g_ep_table, 0, sizeof(udd_g_ep_table));
    20da:	f240 7720 	movw	r7, #1824	; 0x720
    20de:	f2c2 0700 	movt	r7, #8192	; 0x2000
    20e2:	4638      	mov	r0, r7
    20e4:	4629      	mov	r1, r5
    20e6:	f04f 0280 	mov.w	r2, #128	; 0x80
    20ea:	f644 135b 	movw	r3, #18779	; 0x495b
    20ee:	f2c0 0300 	movt	r3, #0
    20f2:	4798      	blx	r3
	otg_register_desc_tab(udd_g_ep_table);
    20f4:	f8d4 3830 	ldr.w	r3, [r4, #2096]	; 0x830
    20f8:	f8c4 7830 	str.w	r7, [r4, #2096]	; 0x830
	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	{
		uint8_t i;
		for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_job[i].busy = false;
    20fc:	f240 61d0 	movw	r1, #1744	; 0x6d0
    2100:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2104:	7c0a      	ldrb	r2, [r1, #16]
    2106:	f365 0200 	bfi	r2, r5, #0, #1
    210a:	740a      	strb	r2, [r1, #16]
    210c:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
    2110:	f365 0000 	bfi	r0, r5, #0, #1
    2114:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    2118:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
    211c:	f365 0300 	bfi	r3, r5, #0, #1
    2120:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
    2124:	6821      	ldr	r1, [r4, #0]
    2126:	f421 5280 	bic.w	r2, r1, #4096	; 0x1000
    212a:	6022      	str	r2, [r4, #0]
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
#  else
	udd_high_speed_disable();
    212c:	6820      	ldr	r0, [r4, #0]
    212e:	f440 6340 	orr.w	r3, r0, #3072	; 0xc00
    2132:	6023      	str	r3, [r4, #0]
#  endif
#endif
	otg_freeze_clock();
    2134:	f8d4 1800 	ldr.w	r1, [r4, #2048]	; 0x800
    2138:	f441 4280 	orr.w	r2, r1, #16384	; 0x4000
    213c:	f8c4 2800 	str.w	r2, [r4, #2048]	; 0x800

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
    2140:	f240 70a0 	movw	r0, #1952	; 0x7a0
    2144:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2148:	7005      	strb	r5, [r0, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    214a:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    214e:	b672      	cpsid	i
    2150:	f3bf 8f5f 	dmb	sy
    2154:	7035      	strb	r5, [r6, #0]
    2156:	f240 73ac 	movw	r3, #1964	; 0x7ac
    215a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    215e:	7899      	ldrb	r1, [r3, #2]
    2160:	f101 0101 	add.w	r1, r1, #1
    2164:	7099      	strb	r1, [r3, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2166:	b92a      	cbnz	r2, 2174 <udd_enable+0x12c>
		cpu_irq_enable();
    2168:	f04f 0201 	mov.w	r2, #1
    216c:	7032      	strb	r2, [r6, #0]
    216e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2172:	b662      	cpsie	i
		uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    2174:	f641 73a9 	movw	r3, #8105	; 0x1fa9
    2178:	f2c0 0300 	movt	r3, #0
    217c:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    217e:	f1b8 0f00 	cmp.w	r8, #0
    2182:	d109      	bne.n	2198 <udd_enable+0x150>
		cpu_irq_enable();
    2184:	f240 01d4 	movw	r1, #212	; 0xd4
    2188:	f2c2 0100 	movt	r1, #8192	; 0x2000
    218c:	f04f 0001 	mov.w	r0, #1
    2190:	7008      	strb	r0, [r1, #0]
    2192:	f3bf 8f5f 	dmb	sy
    2196:	b662      	cpsie	i
    2198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000219c <udd_is_high_speed>:
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
#else
	return false;
#endif
}
    219c:	f04f 0000 	mov.w	r0, #0
    21a0:	4770      	bx	lr
    21a2:	bf00      	nop

000021a4 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
    21a4:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    21a8:	f2c4 030a 	movt	r3, #16394	; 0x400a
    21ac:	681a      	ldr	r2, [r3, #0]
    21ae:	f022 0180 	bic.w	r1, r2, #128	; 0x80
    21b2:	6019      	str	r1, [r3, #0]
	udd_configure_address(address);
    21b4:	681a      	ldr	r2, [r3, #0]
    21b6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    21ba:	f022 017f 	bic.w	r1, r2, #127	; 0x7f
    21be:	ea40 0201 	orr.w	r2, r0, r1
    21c2:	601a      	str	r2, [r3, #0]
	udd_enable_address();
    21c4:	6818      	ldr	r0, [r3, #0]
    21c6:	f040 0180 	orr.w	r1, r0, #128	; 0x80
    21ca:	6019      	str	r1, [r3, #0]
    21cc:	4770      	bx	lr
    21ce:	bf00      	nop

000021d0 <udd_getaddress>:
}


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
    21d0:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    21d4:	f2c4 030a 	movt	r3, #16394	; 0x400a
    21d8:	6818      	ldr	r0, [r3, #0]
}
    21da:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    21de:	4770      	bx	lr

000021e0 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
    21e0:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    21e4:	f2c4 030a 	movt	r3, #16394	; 0x400a
    21e8:	6a18      	ldr	r0, [r3, #32]
}
    21ea:	f3c0 00ca 	ubfx	r0, r0, #3, #11
    21ee:	4770      	bx	lr

000021f0 <udd_get_micro_frame_number>:
#ifdef USB_DEVICE_HS_SUPPORT
	return udd_micro_frame_number();
#else
	return 0;
#endif
}
    21f0:	f04f 0000 	mov.w	r0, #0
    21f4:	4770      	bx	lr
    21f6:	bf00      	nop

000021f8 <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
    21f8:	f640 03d8 	movw	r3, #2264	; 0x8d8
    21fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2200:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    2202:	8199      	strh	r1, [r3, #12]
    2204:	4770      	bx	lr
    2206:	bf00      	nop

00002208 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
    2208:	b470      	push	{r4, r5, r6}
	uint8_t ep_addr = ep & USB_EP_ADDR_MASK;
    220a:	f000 030f 	and.w	r3, r0, #15
	if (Is_udd_endpoint_enabled(ep_addr)) {
    220e:	f44f 44a0 	mov.w	r4, #20480	; 0x5000
    2212:	f2c4 040a 	movt	r4, #16394	; 0x400a
    2216:	69e5      	ldr	r5, [r4, #28]
    2218:	f04f 0401 	mov.w	r4, #1
    221c:	fa04 f403 	lsl.w	r4, r4, r3
    2220:	422c      	tst	r4, r5
    2222:	d145      	bne.n	22b0 <udd_ep_alloc+0xa8>
	// Check endpoint type
	Assert(((bmAttributes & USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS)
		|| ((bmAttributes & USB_EP_TYPE_MASK) == USB_EP_TYPE_BULK)
		|| ((bmAttributes & USB_EP_TYPE_MASK) == USB_EP_TYPE_INTERRUPT));

	udd_configure_endpoint(ep_addr, bmAttributes,
    2224:	f44f 45a2 	mov.w	r5, #20736	; 0x5100
    2228:	f2c4 050a 	movt	r5, #16394	; 0x400a
    222c:	eb05 0683 	add.w	r6, r5, r3, lsl #2
    2230:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
    2234:	f425 55cb 	bic.w	r5, r5, #6496	; 0x1960
    2238:	f025 0514 	bic.w	r5, r5, #20
    223c:	ea4f 21c1 	mov.w	r1, r1, lsl #11
    2240:	f401 51c0 	and.w	r1, r1, #6144	; 0x1800
    2244:	b240      	sxtb	r0, r0
    2246:	2800      	cmp	r0, #0
    2248:	bfb4      	ite	lt
    224a:	f44f 7080 	movlt.w	r0, #256	; 0x100
    224e:	2000      	movge	r0, #0
    2250:	4308      	orrs	r0, r1
    2252:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
    2256:	b289      	uxth	r1, r1
    2258:	f5b1 4f7c 	cmp.w	r1, #64512	; 0xfc00
    225c:	d306      	bcc.n	226c <udd_ep_alloc+0x64>
    225e:	2a08      	cmp	r2, #8
    2260:	d907      	bls.n	2272 <udd_ep_alloc+0x6a>
    2262:	ea4f 0142 	mov.w	r1, r2, lsl #1
    2266:	f101 32ff 	add.w	r2, r1, #4294967295
    226a:	e004      	b.n	2276 <udd_ep_alloc+0x6e>
    226c:	f240 72ff 	movw	r2, #2047	; 0x7ff
    2270:	e001      	b.n	2276 <udd_ep_alloc+0x6e>
    2272:	f04f 020f 	mov.w	r2, #15
    2276:	fab2 f282 	clz	r2, r2
    227a:	f1c2 011c 	rsb	r1, r2, #28
    227e:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
    2282:	f641 1270 	movw	r2, #6512	; 0x1970
    2286:	4002      	ands	r2, r0
    2288:	432a      	orrs	r2, r5
    228a:	6032      	str	r2, [r6, #0]
			((ep & USB_EP_DIR_IN) ? USBC_UECFG0_EPDIR_IN
				: USBC_UECFG0_EPDIR_OUT),
			MaxEndpointSize, USBC_UECFG0_EPBK_SINGLE);

	udd_enable_busy_bank0(ep_addr);
    228c:	f245 10f0 	movw	r0, #20976	; 0x51f0
    2290:	f2c4 000a 	movt	r0, #16394	; 0x400a
    2294:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    2298:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	udd_enable_endpoint(ep_addr);
    229c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    22a0:	f2c4 030a 	movt	r3, #16394	; 0x400a
    22a4:	69da      	ldr	r2, [r3, #28]
    22a6:	4314      	orrs	r4, r2
    22a8:	61dc      	str	r4, [r3, #28]
	// OUT packet are always NYET.
	if (!(ep & USB_EP_DIR_IN)) {
		udd_disable_nyet(ep_addr);
	}
#endif
	return true;
    22aa:	f04f 0001 	mov.w	r0, #1
    22ae:	e001      	b.n	22b4 <udd_ep_alloc+0xac>
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
	uint8_t ep_addr = ep & USB_EP_ADDR_MASK;
	if (Is_udd_endpoint_enabled(ep_addr)) {
		return false;
    22b0:	f04f 0000 	mov.w	r0, #0
	if (!(ep & USB_EP_DIR_IN)) {
		udd_disable_nyet(ep_addr);
	}
#endif
	return true;
}
    22b4:	bc70      	pop	{r4, r5, r6}
    22b6:	4770      	bx	lr

000022b8 <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
    22b8:	f000 000f 	and.w	r0, r0, #15
    22bc:	f245 13c0 	movw	r3, #20928	; 0x51c0
    22c0:	f2c4 030a 	movt	r3, #16394	; 0x400a
    22c4:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
}
    22c8:	f3c1 40c0 	ubfx	r0, r1, #19, #1
    22cc:	4770      	bx	lr
    22ce:	bf00      	nop

000022d0 <udd_ep_clear_halt>:
	return true;
}


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
    22d0:	b508      	push	{r3, lr}
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
    22d2:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
    22d6:	2803      	cmp	r0, #3
    22d8:	d841      	bhi.n	235e <udd_ep_clear_halt+0x8e>
		return false;
	}
	ptr_job = &udd_ep_job[ep - 1];

	if (Is_udd_endpoint_stall_requested(ep)) {
    22da:	f245 13c0 	movw	r3, #20928	; 0x51c0
    22de:	f2c4 030a 	movt	r3, #16394	; 0x400a
    22e2:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
    22e6:	f411 2f00 	tst.w	r1, #524288	; 0x80000
    22ea:	d03b      	beq.n	2364 <udd_ep_clear_halt+0x94>
		// Remove stall request
		udd_disable_stall_handshake(ep);
    22ec:	f245 2320 	movw	r3, #21024	; 0x5220
    22f0:	f2c4 030a 	movt	r3, #16394	; 0x400a
    22f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    22f8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		if (Is_udd_stall(ep)) {
    22fc:	f245 1130 	movw	r1, #20784	; 0x5130
    2300:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2304:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    2308:	f013 0f40 	tst.w	r3, #64	; 0x40
    230c:	d00f      	beq.n	232e <udd_ep_clear_halt+0x5e>
			udd_ack_stall(ep);
    230e:	f245 1160 	movw	r1, #20832	; 0x5160
    2312:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2316:	f04f 0240 	mov.w	r2, #64	; 0x40
    231a:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
			// The Stall has occurred, then reset data toggle
			udd_reset_data_toggle(ep);
    231e:	f245 13f0 	movw	r3, #20976	; 0x51f0
    2322:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2326:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    232a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}
	ptr_job = &udd_ep_job[ep - 1];
    232e:	f240 62d0 	movw	r2, #1744	; 0x6d0
    2332:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2336:	f100 30ff 	add.w	r0, r0, #4294967295
    233a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    233e:	ea4f 0083 	mov.w	r0, r3, lsl #2
    2342:	1813      	adds	r3, r2, r0
			udd_reset_data_toggle(ep);
		}

		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
    2344:	7c19      	ldrb	r1, [r3, #16]
    2346:	f011 0f01 	tst.w	r1, #1
    234a:	d00e      	beq.n	236a <udd_ep_clear_halt+0x9a>
			ptr_job->busy = false;
    234c:	7c19      	ldrb	r1, [r3, #16]
    234e:	f36f 0100 	bfc	r1, #0, #1
    2352:	7419      	strb	r1, [r3, #16]
			ptr_job->call_nohalt();
    2354:	5812      	ldr	r2, [r2, r0]
    2356:	4790      	blx	r2
		}
	}
	return true;
    2358:	f04f 0001 	mov.w	r0, #1
    235c:	bd08      	pop	{r3, pc}
{
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
    235e:	f04f 0000 	mov.w	r0, #0
    2362:	bd08      	pop	{r3, pc}
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
    2364:	f04f 0001 	mov.w	r0, #1
    2368:	bd08      	pop	{r3, pc}
    236a:	f04f 0001 	mov.w	r0, #1
}
    236e:	bd08      	pop	{r3, pc}

00002370 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
    2370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
    2372:	f000 040f 	and.w	r4, r0, #15
	if (USB_DEVICE_MAX_EP < ep_num) {
    2376:	2c03      	cmp	r4, #3
    2378:	f200 8098 	bhi.w	24ac <udd_ep_run+0x13c>
		return false;
	}
	if ((!Is_udd_endpoint_enabled(ep_num))
    237c:	f44f 45a0 	mov.w	r5, #20480	; 0x5000
    2380:	f2c4 050a 	movt	r5, #16394	; 0x400a
    2384:	69ed      	ldr	r5, [r5, #28]
    2386:	f04f 0601 	mov.w	r6, #1
    238a:	fa06 f604 	lsl.w	r6, r6, r4
    238e:	422e      	tst	r6, r5
    2390:	f000 808f 	beq.w	24b2 <udd_ep_run+0x142>
			|| Is_udd_endpoint_stall_requested(ep_num)) {
    2394:	f245 15c0 	movw	r5, #20928	; 0x51c0
    2398:	f2c4 050a 	movt	r5, #16394	; 0x400a
    239c:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
    23a0:	f415 2f00 	tst.w	r5, #524288	; 0x80000
    23a4:	f040 8088 	bne.w	24b8 <udd_ep_run+0x148>
		return false; // Endpoint is halted
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep_num - 1];
    23a8:	f104 36ff 	add.w	r6, r4, #4294967295
    23ac:	eb06 0786 	add.w	r7, r6, r6, lsl #2
    23b0:	f240 65d0 	movw	r5, #1744	; 0x6d0
    23b4:	f2c2 0500 	movt	r5, #8192	; 0x2000
    23b8:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    23bc:	f3ef 8610 	mrs	r6, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
    23c0:	f1d6 0c01 	rsbs	ip, r6, #1
    23c4:	bf38      	it	cc
    23c6:	f04f 0c00 	movcc.w	ip, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    23ca:	b672      	cpsid	i
    23cc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    23d0:	f240 06d4 	movw	r6, #212	; 0xd4
    23d4:	f2c2 0600 	movt	r6, #8192	; 0x2000
    23d8:	f04f 0700 	mov.w	r7, #0
    23dc:	7037      	strb	r7, [r6, #0]

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
    23de:	7c2e      	ldrb	r6, [r5, #16]
    23e0:	f016 0f01 	tst.w	r6, #1
    23e4:	d00e      	beq.n	2404 <udd_ep_run+0x94>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    23e6:	f1bc 0f00 	cmp.w	ip, #0
    23ea:	d068      	beq.n	24be <udd_ep_run+0x14e>
		cpu_irq_enable();
    23ec:	f240 01d4 	movw	r1, #212	; 0xd4
    23f0:	f2c2 0100 	movt	r1, #8192	; 0x2000
    23f4:	f04f 0201 	mov.w	r2, #1
    23f8:	700a      	strb	r2, [r1, #0]
    23fa:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    23fe:	b662      	cpsie	i
		cpu_irq_restore(flags);
		return false; // Job already on going
    2400:	4638      	mov	r0, r7
    2402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	ptr_job->busy = true;
    2404:	7c2e      	ldrb	r6, [r5, #16]
    2406:	f046 0601 	orr.w	r6, r6, #1
    240a:	742e      	strb	r6, [r5, #16]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    240c:	f1bc 0f00 	cmp.w	ip, #0
    2410:	d009      	beq.n	2426 <udd_ep_run+0xb6>
		cpu_irq_enable();
    2412:	f240 06d4 	movw	r6, #212	; 0xd4
    2416:	f2c2 0600 	movt	r6, #8192	; 0x2000
    241a:	f04f 0701 	mov.w	r7, #1
    241e:	7037      	strb	r7, [r6, #0]
    2420:	f3bf 8f5f 	dmb	sy
    2424:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	//
	ptr_job->buf = buf;
    2426:	606a      	str	r2, [r5, #4]
	ptr_job->buf_size = buf_size;
    2428:	60ab      	str	r3, [r5, #8]
	ptr_job->nb_trans = 0;
    242a:	f04f 0600 	mov.w	r6, #0
    242e:	60ee      	str	r6, [r5, #12]
	ptr_job->call_trans = callback;
    2430:	9a06      	ldr	r2, [sp, #24]
    2432:	602a      	str	r2, [r5, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    2434:	7c2a      	ldrb	r2, [r5, #16]
    2436:	f361 0241 	bfi	r2, r1, #1, #1
	ptr_job->b_use_out_cache_buffer = false;
    243a:	f366 0282 	bfi	r2, r6, #2, #1
    243e:	742a      	strb	r2, [r5, #16]

	if ( (USB_EP_DIR_IN != (ep & USB_EP_DIR_IN))
    2440:	f010 0f80 	tst.w	r0, #128	; 0x80
    2444:	d11c      	bne.n	2480 <udd_ep_run+0x110>
	&& (USBC_UECFG0_EPTYPE_ISOCHRONOUS == udd_get_endpoint_type(ep_num))
    2446:	f44f 42a2 	mov.w	r2, #20736	; 0x5100
    244a:	f2c4 020a 	movt	r2, #16394	; 0x400a
    244e:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
    2452:	f401 51c0 	and.w	r1, r1, #6144	; 0x1800
    2456:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    245a:	d111      	bne.n	2480 <udd_ep_run+0x110>
	&& (0 != (buf_size % udd_get_endpoint_size(ep_num)))) {
    245c:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
    2460:	f3c2 1202 	ubfx	r2, r2, #4, #3
    2464:	f04f 0108 	mov.w	r1, #8
    2468:	fa01 f202 	lsl.w	r2, r1, r2
    246c:	f102 31ff 	add.w	r1, r2, #4294967295
    2470:	4219      	tst	r1, r3
    2472:	d005      	beq.n	2480 <udd_ep_run+0x110>
		// The user must use a buffer size modulo endpoint size
		// for an isochronous IN endpoint
		ptr_job->busy = false;
    2474:	7c28      	ldrb	r0, [r5, #16]
    2476:	f36f 0000 	bfc	r0, #0, #1
    247a:	7428      	strb	r0, [r5, #16]
		return false;
    247c:	4630      	mov	r0, r6
    247e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	dbg_print("(run%x,%dB) ", ep, buf_size);

	// Initialize value to simulate a empty transfer
	udd_udesc_rst_buf0_ctn(ep_num);
    2480:	f240 7320 	movw	r3, #1824	; 0x720
    2484:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2488:	eb03 1444 	add.w	r4, r3, r4, lsl #5
    248c:	6862      	ldr	r2, [r4, #4]
    248e:	f36f 020e 	bfc	r2, #0, #15
    2492:	6062      	str	r2, [r4, #4]
	udd_udesc_rst_buf0_size(ep_num);
    2494:	6861      	ldr	r1, [r4, #4]
    2496:	f36f 411e 	bfc	r1, #16, #15
    249a:	6061      	str	r1, [r4, #4]

	// Request next transfer
	udd_ep_trans_done(ep);
    249c:	f641 13fd 	movw	r3, #6653	; 0x19fd
    24a0:	f2c0 0300 	movt	r3, #0
    24a4:	4798      	blx	r3
	return true;
    24a6:	f04f 0001 	mov.w	r0, #1
    24aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep_num) {
		return false;
    24ac:	f04f 0000 	mov.w	r0, #0
    24b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	if ((!Is_udd_endpoint_enabled(ep_num))
			|| Is_udd_endpoint_stall_requested(ep_num)) {
		return false; // Endpoint is halted
    24b2:	f04f 0000 	mov.w	r0, #0
    24b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24b8:	f04f 0000 	mov.w	r0, #0
    24bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ptr_job = &udd_ep_job[ep_num - 1];

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false; // Job already on going
    24be:	f04f 0000 	mov.w	r0, #0
	udd_udesc_rst_buf0_size(ep_num);

	// Request next transfer
	udd_ep_trans_done(ep);
	return true;
}
    24c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000024c4 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
    24c4:	b538      	push	{r3, r4, r5, lr}
	irqflags_t flags;
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
    24c6:	f000 020f 	and.w	r2, r0, #15
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    24ca:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    24ce:	b672      	cpsid	i
    24d0:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    24d4:	f240 03d4 	movw	r3, #212	; 0xd4
    24d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    24dc:	f04f 0100 	mov.w	r1, #0
    24e0:	7019      	strb	r1, [r3, #0]

	// Disable interrupt of endpoint
	flags = cpu_irq_save();
	udd_disable_endpoint_interrupt(ep);
    24e2:	4613      	mov	r3, r2
    24e4:	f44f 5480 	mov.w	r4, #4096	; 0x1000
    24e8:	fa04 f402 	lsl.w	r4, r4, r2
    24ec:	f44f 45a0 	mov.w	r5, #20480	; 0x5000
    24f0:	f2c4 050a 	movt	r5, #16394	; 0x400a
    24f4:	616c      	str	r4, [r5, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    24f6:	b948      	cbnz	r0, 250c <udd_ep_abort+0x48>
		cpu_irq_enable();
    24f8:	f240 01d4 	movw	r1, #212	; 0xd4
    24fc:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2500:	f04f 0001 	mov.w	r0, #1
    2504:	7008      	strb	r0, [r1, #0]
    2506:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    250a:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// Stop transfer
	udd_enable_busy_bank0(ep);
    250c:	ea4f 0582 	mov.w	r5, r2, lsl #2
    2510:	f245 14f0 	movw	r4, #20976	; 0x51f0
    2514:	f2c4 040a 	movt	r4, #16394	; 0x400a
    2518:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    251c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]

	// Job complete then call callback
	ptr_job = &udd_ep_job[ep - 1];
    2520:	f240 60d0 	movw	r0, #1744	; 0x6d0
    2524:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2528:	f103 33ff 	add.w	r3, r3, #4294967295
    252c:	eb03 0483 	add.w	r4, r3, r3, lsl #2
    2530:	ea4f 0184 	mov.w	r1, r4, lsl #2
    2534:	1843      	adds	r3, r0, r1
	if (!ptr_job->busy) {
    2536:	7c1c      	ldrb	r4, [r3, #16]
    2538:	f014 0f01 	tst.w	r4, #1
    253c:	d013      	beq.n	2566 <udd_ep_abort+0xa2>
		return;
	}
	dbg_print("abort%x ", ep);
	ptr_job->busy = false;
    253e:	7c1c      	ldrb	r4, [r3, #16]
    2540:	f36f 0400 	bfc	r4, #0, #1
    2544:	741c      	strb	r4, [r3, #16]
	if (NULL != ptr_job->call_trans) {
    2546:	5844      	ldr	r4, [r0, r1]
    2548:	b16c      	cbz	r4, 2566 <udd_ep_abort+0xa2>
		if (Is_udd_endpoint_in(ep)) {
    254a:	f44f 40a2 	mov.w	r0, #20736	; 0x5100
    254e:	f2c4 000a 	movt	r0, #16394	; 0x400a
    2552:	5829      	ldr	r1, [r5, r0]
    2554:	f411 7f80 	tst.w	r1, #256	; 0x100
			ep |= USB_EP_DIR_IN;
    2558:	bf18      	it	ne
    255a:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
		}
		// It can be a Transfer or stall callback
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    255e:	f04f 0001 	mov.w	r0, #1
    2562:	68d9      	ldr	r1, [r3, #12]
    2564:	47a0      	blx	r4
    2566:	bd38      	pop	{r3, r4, r5, pc}

00002568 <udd_ep_set_halt>:
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
}


bool udd_ep_set_halt(udd_ep_id_t ep)
{
    2568:	b508      	push	{r3, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
    256a:	f000 030f 	and.w	r3, r0, #15

	if (USB_DEVICE_MAX_EP < ep_index) {
    256e:	2b03      	cmp	r3, #3
    2570:	d80f      	bhi.n	2592 <udd_ep_set_halt+0x2a>
		return false;
	}

	// Stall endpoint
	udd_enable_stall_handshake(ep_index);
    2572:	f245 12f0 	movw	r2, #20976	; 0x51f0
    2576:	f2c4 020a 	movt	r2, #16394	; 0x400a
    257a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    257e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	udd_ep_abort(ep);
    2582:	f242 43c5 	movw	r3, #9413	; 0x24c5
    2586:	f2c0 0300 	movt	r3, #0
    258a:	4798      	blx	r3
	return true;
    258c:	f04f 0001 	mov.w	r0, #1
    2590:	bd08      	pop	{r3, pc}
bool udd_ep_set_halt(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
    2592:	f04f 0000 	mov.w	r0, #0

	// Stall endpoint
	udd_enable_stall_handshake(ep_index);
	udd_ep_abort(ep);
	return true;
}
    2596:	bd08      	pop	{r3, pc}

00002598 <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
    2598:	b510      	push	{r4, lr}
    259a:	4604      	mov	r4, r0
	udd_ep_abort(ep);
    259c:	f242 43c5 	movw	r3, #9413	; 0x24c5
    25a0:	f2c0 0300 	movt	r3, #0
    25a4:	4798      	blx	r3
#if( defined UDC_RAM_ACCESS_ERROR_EVENT )
	if( Is_udd_ram_access_error(ep & 0x7F) ){
		UDC_RAM_ACCESS_ERROR_EVENT();
	}
#endif
	udd_disable_endpoint(ep & 0x7F);
    25a6:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
    25aa:	f2c4 000a 	movt	r0, #16394	; 0x400a
    25ae:	69c2      	ldr	r2, [r0, #28]
    25b0:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    25b4:	f04f 0101 	mov.w	r1, #1
    25b8:	fa01 f304 	lsl.w	r3, r1, r4
    25bc:	ea22 0403 	bic.w	r4, r2, r3
    25c0:	61c4      	str	r4, [r0, #28]
    25c2:	bd10      	pop	{r4, pc}

000025c4 <USBC_Handler>:
void udd_interrupt(void); // To avoid GCC warning
void udd_interrupt(void)
#else
ISR(UDD_USB_INT_FUN)
#endif
{
    25c4:	b538      	push	{r3, r4, r5, lr}
	if (Is_udd_sof()) {
    25c6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    25ca:	f2c4 030a 	movt	r3, #16394	; 0x400a
    25ce:	6858      	ldr	r0, [r3, #4]
    25d0:	f010 0f04 	tst.w	r0, #4
    25d4:	d00c      	beq.n	25f0 <USBC_Handler+0x2c>
		udd_ack_sof();
    25d6:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
    25da:	f2c4 000a 	movt	r0, #16394	; 0x400a
    25de:	f04f 0204 	mov.w	r2, #4
    25e2:	6082      	str	r2, [r0, #8]
		udc_sof_notify();
    25e4:	f640 33fd 	movw	r3, #3069	; 0xbfd
    25e8:	f2c0 0300 	movt	r3, #0
    25ec:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_sof_end;
    25ee:	e321      	b.n	2c34 <USBC_Handler+0x670>


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0)) {
    25f0:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    25f4:	f2c4 010a 	movt	r1, #16394	; 0x400a
    25f8:	684a      	ldr	r2, [r1, #4]
    25fa:	f412 5f80 	tst.w	r2, #4096	; 0x1000
    25fe:	f000 831c 	beq.w	2c3a <USBC_Handler+0x676>
	}

	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
    2602:	f245 2320 	movw	r3, #21024	; 0x5220
    2606:	f2c4 030a 	movt	r3, #16394	; 0x400a
    260a:	f04f 0010 	mov.w	r0, #16
    260e:	6018      	str	r0, [r3, #0]
	udd_disable_nak_out_interrupt(0);
    2610:	f04f 0108 	mov.w	r1, #8
    2614:	6019      	str	r1, [r3, #0]

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
    2616:	f245 1230 	movw	r2, #20784	; 0x5130
    261a:	f2c4 020a 	movt	r2, #16394	; 0x400a
    261e:	6813      	ldr	r3, [r2, #0]
    2620:	f013 0f04 	tst.w	r3, #4
    2624:	f000 80b2 	beq.w	278c <USBC_Handler+0x1c8>

static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    2628:	f240 73a4 	movw	r3, #1956	; 0x7a4
    262c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2630:	7819      	ldrb	r1, [r3, #0]
    2632:	b149      	cbz	r1, 2648 <USBC_Handler+0x84>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
    2634:	f641 12e9 	movw	r2, #6633	; 0x19e9
    2638:	f2c0 0200 	movt	r2, #0
    263c:	4790      	blx	r2

		// Reinitializes control endpoint management
		udd_ctrl_init();
    263e:	f641 101d 	movw	r0, #6429	; 0x191d
    2642:	f2c0 0000 	movt	r0, #0
    2646:	4780      	blx	r0
	}
	// Fill setup request structure
	if (8 != udd_udesc_get_buf0_ctn(0)) {
    2648:	f240 7320 	movw	r3, #1824	; 0x720
    264c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2650:	6859      	ldr	r1, [r3, #4]
    2652:	ea4f 4241 	mov.w	r2, r1, lsl #17
    2656:	ea4f 4052 	mov.w	r0, r2, lsr #17
    265a:	2808      	cmp	r0, #8
    265c:	d00c      	beq.n	2678 <USBC_Handler+0xb4>
		udd_ctrl_stall_data();
    265e:	f641 1159 	movw	r1, #6489	; 0x1959
    2662:	f2c0 0100 	movt	r1, #0
    2666:	4788      	blx	r1
		udd_ack_setup_received(0);
    2668:	f245 1360 	movw	r3, #20832	; 0x5160
    266c:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2670:	f04f 0204 	mov.w	r2, #4
    2674:	601a      	str	r2, [r3, #0]
    2676:	e2dd      	b.n	2c34 <USBC_Handler+0x670>
		return; // Error data number doesn't correspond to SETUP packet
	}
	memcpy((uint8_t *) & udd_g_ctrlreq.req, udd_ctrl_buffer, 8);
    2678:	f640 03d8 	movw	r3, #2264	; 0x8d8
    267c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2680:	f640 01f0 	movw	r1, #2288	; 0x8f0
    2684:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2688:	c903      	ldmia	r1, {r0, r1}
    268a:	e883 0003 	stmia.w	r3, {r0, r1}
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
    268e:	f640 4245 	movw	r2, #3141	; 0xc45
    2692:	f2c0 0200 	movt	r2, #0
    2696:	4790      	blx	r2
    2698:	b960      	cbnz	r0, 26b4 <USBC_Handler+0xf0>
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
    269a:	f641 1259 	movw	r2, #6489	; 0x1959
    269e:	f2c0 0200 	movt	r2, #0
    26a2:	4790      	blx	r2
		udd_ack_setup_received(0);
    26a4:	f245 1360 	movw	r3, #20832	; 0x5160
    26a8:	f2c4 030a 	movt	r3, #16394	; 0x400a
    26ac:	f04f 0004 	mov.w	r0, #4
    26b0:	6018      	str	r0, [r3, #0]
    26b2:	e2bf      	b.n	2c34 <USBC_Handler+0x670>
		return;
	}
	udd_ack_setup_received(0);
    26b4:	f245 1060 	movw	r0, #20832	; 0x5160
    26b8:	f2c4 000a 	movt	r0, #16394	; 0x400a
    26bc:	f04f 0304 	mov.w	r3, #4
    26c0:	6003      	str	r3, [r0, #0]

	if (Udd_setup_is_in()) {
    26c2:	f640 01d8 	movw	r1, #2264	; 0x8d8
    26c6:	f2c2 0100 	movt	r1, #8192	; 0x2000
    26ca:	f991 2000 	ldrsb.w	r2, [r1]
    26ce:	2a00      	cmp	r2, #0
    26d0:	da18      	bge.n	2704 <USBC_Handler+0x140>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
    26d2:	f04f 0000 	mov.w	r0, #0
    26d6:	f240 61cc 	movw	r1, #1740	; 0x6cc
    26da:	f2c2 0100 	movt	r1, #8192	; 0x2000
    26de:	8008      	strh	r0, [r1, #0]
		udd_ctrl_payload_nb_trans = 0;
    26e0:	f240 72a2 	movw	r2, #1954	; 0x7a2
    26e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    26e8:	8010      	strh	r0, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    26ea:	f240 73a4 	movw	r3, #1956	; 0x7a4
    26ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    26f2:	f04f 0002 	mov.w	r0, #2
    26f6:	7018      	strb	r0, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
    26f8:	f641 519d 	movw	r1, #7581	; 0x1d9d
    26fc:	f2c0 0100 	movt	r1, #0
    2700:	4788      	blx	r1
    2702:	e297      	b.n	2c34 <USBC_Handler+0x670>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
    2704:	f640 00d8 	movw	r0, #2264	; 0x8d8
    2708:	f2c2 0000 	movt	r0, #8192	; 0x2000
    270c:	88c3      	ldrh	r3, [r0, #6]
    270e:	b92b      	cbnz	r3, 271c <USBC_Handler+0x158>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
    2710:	f641 1379 	movw	r3, #6521	; 0x1979
    2714:	f2c0 0300 	movt	r3, #0
    2718:	4798      	blx	r3
    271a:	e28b      	b.n	2c34 <USBC_Handler+0x670>
			return;
		}

		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
    271c:	f04f 0100 	mov.w	r1, #0
    2720:	4608      	mov	r0, r1
    2722:	f240 62cc 	movw	r2, #1740	; 0x6cc
    2726:	f2c2 0200 	movt	r2, #8192	; 0x2000
    272a:	8011      	strh	r1, [r2, #0]
		udd_ctrl_payload_nb_trans = 0;
    272c:	f240 73a2 	movw	r3, #1954	; 0x7a2
    2730:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2734:	8019      	strh	r1, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    2736:	f240 71a4 	movw	r1, #1956	; 0x7a4
    273a:	f2c2 0100 	movt	r1, #8192	; 0x2000
    273e:	f04f 0201 	mov.w	r2, #1
    2742:	700a      	strb	r2, [r1, #0]

		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
    2744:	f245 1360 	movw	r3, #20832	; 0x5160
    2748:	f2c4 030a 	movt	r3, #16394	; 0x400a
    274c:	f04f 0210 	mov.w	r2, #16
    2750:	601a      	str	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2752:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2756:	b672      	cpsid	i
    2758:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    275c:	f240 03d4 	movw	r3, #212	; 0xd4
    2760:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2764:	7018      	strb	r0, [r3, #0]
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
    2766:	f245 10f0 	movw	r0, #20976	; 0x51f0
    276a:	f2c4 000a 	movt	r0, #16394	; 0x400a
    276e:	6002      	str	r2, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2770:	2900      	cmp	r1, #0
    2772:	f040 825f 	bne.w	2c34 <USBC_Handler+0x670>
		cpu_irq_enable();
    2776:	f240 01d4 	movw	r1, #212	; 0xd4
    277a:	f2c2 0100 	movt	r1, #8192	; 0x2000
    277e:	f04f 0201 	mov.w	r2, #1
    2782:	700a      	strb	r2, [r1, #0]
    2784:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2788:	b662      	cpsie	i
    278a:	e253      	b.n	2c34 <USBC_Handler+0x670>
		dbg_print("stup ");
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_out_received(0)) {
    278c:	f245 1030 	movw	r0, #20784	; 0x5130
    2790:	f2c4 000a 	movt	r0, #16394	; 0x400a
    2794:	6801      	ldr	r1, [r0, #0]
    2796:	f011 0f02 	tst.w	r1, #2
    279a:	f000 80d1 	beq.w	2940 <USBC_Handler+0x37c>
static void udd_ctrl_out_received(void)
{
	irqflags_t flags;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
    279e:	f240 72a4 	movw	r2, #1956	; 0x7a4
    27a2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    27a6:	7811      	ldrb	r1, [r2, #0]
    27a8:	2901      	cmp	r1, #1
    27aa:	d014      	beq.n	27d6 <USBC_Handler+0x212>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state) ||
    27ac:	2902      	cmp	r1, #2
    27ae:	d001      	beq.n	27b4 <USBC_Handler+0x1f0>
    27b0:	2904      	cmp	r1, #4
    27b2:	d105      	bne.n	27c0 <USBC_Handler+0x1fc>
				(UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
    27b4:	f641 12e9 	movw	r2, #6633	; 0x19e9
    27b8:	f2c0 0200 	movt	r2, #0
    27bc:	4790      	blx	r2
    27be:	e004      	b.n	27ca <USBC_Handler+0x206>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
    27c0:	f641 1159 	movw	r1, #6489	; 0x1959
    27c4:	f2c0 0100 	movt	r1, #0
    27c8:	4788      	blx	r1
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
    27ca:	f641 101d 	movw	r0, #6429	; 0x191d
    27ce:	f2c0 0000 	movt	r0, #0
    27d2:	4780      	blx	r0
    27d4:	e22e      	b.n	2c34 <USBC_Handler+0x670>
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_udesc_get_buf0_ctn(0);
    27d6:	f240 7420 	movw	r4, #1824	; 0x720
    27da:	f2c2 0400 	movt	r4, #8192	; 0x2000
    27de:	6863      	ldr	r3, [r4, #4]
    27e0:	ea4f 4043 	mov.w	r0, r3, lsl #17
    27e4:	ea4f 4250 	mov.w	r2, r0, lsr #17
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    27e8:	f640 01d8 	movw	r1, #2264	; 0x8d8
    27ec:	f2c2 0100 	movt	r1, #8192	; 0x2000
    27f0:	898b      	ldrh	r3, [r1, #12]
    27f2:	f240 74a2 	movw	r4, #1954	; 0x7a2
    27f6:	f2c2 0400 	movt	r4, #8192	; 0x2000
    27fa:	8824      	ldrh	r4, [r4, #0]
    27fc:	18a0      	adds	r0, r4, r2
    27fe:	4283      	cmp	r3, r0
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_udesc_get_buf0_ctn(0);
    2800:	bfae      	itee	ge
    2802:	4615      	movge	r5, r2
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
    2804:	ebc4 0303 	rsblt	r3, r4, r3
    2808:	b29d      	uxthlt	r5, r3
				udd_ctrl_payload_nb_trans;
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    280a:	f640 02d8 	movw	r2, #2264	; 0x8d8
    280e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2812:	6891      	ldr	r1, [r2, #8]
    2814:	1908      	adds	r0, r1, r4
    2816:	f640 01f0 	movw	r1, #2288	; 0x8f0
    281a:	f2c2 0100 	movt	r1, #8192	; 0x2000
    281e:	462a      	mov	r2, r5
    2820:	f644 1349 	movw	r3, #18761	; 0x4949
    2824:	f2c0 0300 	movt	r3, #0
    2828:	4798      	blx	r3
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    282a:	192c      	adds	r4, r5, r4
    282c:	b2a4      	uxth	r4, r4
    282e:	f240 70a2 	movw	r0, #1954	; 0x7a2
    2832:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2836:	8004      	strh	r4, [r0, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) ||
    2838:	2d40      	cmp	r5, #64	; 0x40
    283a:	d10c      	bne.n	2856 <USBC_Handler+0x292>
			(udd_g_ctrlreq.req.wLength <=
    283c:	f640 02d8 	movw	r2, #2264	; 0x8d8
    2840:	f2c2 0200 	movt	r2, #8192	; 0x2000
    2844:	88d1      	ldrh	r1, [r2, #6]
			(udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans)))
    2846:	f240 63cc 	movw	r3, #1740	; 0x6cc
    284a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    284e:	8818      	ldrh	r0, [r3, #0]
    2850:	1902      	adds	r2, r0, r4

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) ||
    2852:	4291      	cmp	r1, r2
    2854:	dc22      	bgt.n	289c <USBC_Handler+0x2d8>
			(udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2856:	f640 01d8 	movw	r1, #2264	; 0x8d8
    285a:	f2c2 0100 	movt	r1, #8192	; 0x2000
    285e:	818c      	strh	r4, [r1, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2860:	694a      	ldr	r2, [r1, #20]
    2862:	b172      	cbz	r2, 2882 <USBC_Handler+0x2be>
			if (!udd_g_ctrlreq.over_under_run()) {
    2864:	4790      	blx	r2
    2866:	b960      	cbnz	r0, 2882 <USBC_Handler+0x2be>
				// Stall ZLP
				udd_ctrl_stall_data();
    2868:	f641 1259 	movw	r2, #6489	; 0x1959
    286c:	f2c0 0200 	movt	r2, #0
    2870:	4790      	blx	r2

				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
    2872:	f245 1060 	movw	r0, #20832	; 0x5160
    2876:	f2c4 000a 	movt	r0, #16394	; 0x400a
    287a:	f04f 0302 	mov.w	r3, #2
    287e:	6003      	str	r3, [r0, #0]
    2880:	e1d8      	b.n	2c34 <USBC_Handler+0x670>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
    2882:	f245 1060 	movw	r0, #20832	; 0x5160
    2886:	f2c4 000a 	movt	r0, #16394	; 0x400a
    288a:	f04f 0302 	mov.w	r3, #2
    288e:	6003      	str	r3, [r0, #0]
		udd_ctrl_send_zlp_in();
    2890:	f641 1179 	movw	r1, #6521	; 0x1979
    2894:	f2c0 0100 	movt	r1, #0
    2898:	4788      	blx	r1
    289a:	e1cb      	b.n	2c34 <USBC_Handler+0x670>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    289c:	f640 01d8 	movw	r1, #2264	; 0x8d8
    28a0:	f2c2 0100 	movt	r1, #8192	; 0x2000
    28a4:	898b      	ldrh	r3, [r1, #12]
    28a6:	42a3      	cmp	r3, r4
    28a8:	d121      	bne.n	28ee <USBC_Handler+0x32a>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    28aa:	48c3      	ldr	r0, [pc, #780]	; (2bb8 <USBC_Handler+0x5f4>)
    28ac:	6942      	ldr	r2, [r0, #20]
    28ae:	b94a      	cbnz	r2, 28c4 <USBC_Handler+0x300>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    28b0:	4ac2      	ldr	r2, [pc, #776]	; (2bbc <USBC_Handler+0x5f8>)
    28b2:	4790      	blx	r2

			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
    28b4:	f245 1060 	movw	r0, #20832	; 0x5160
    28b8:	f2c4 000a 	movt	r0, #16394	; 0x400a
    28bc:	f04f 0302 	mov.w	r3, #2
    28c0:	6003      	str	r3, [r0, #0]
    28c2:	e1b7      	b.n	2c34 <USBC_Handler+0x670>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    28c4:	4790      	blx	r2
    28c6:	b948      	cbnz	r0, 28dc <USBC_Handler+0x318>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    28c8:	48bc      	ldr	r0, [pc, #752]	; (2bbc <USBC_Handler+0x5f8>)
    28ca:	4780      	blx	r0

			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
    28cc:	f245 1360 	movw	r3, #20832	; 0x5160
    28d0:	f2c4 030a 	movt	r3, #16394	; 0x400a
    28d4:	f04f 0102 	mov.w	r1, #2
    28d8:	6019      	str	r1, [r3, #0]
    28da:	e1ab      	b.n	2c34 <USBC_Handler+0x670>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    28dc:	4ab8      	ldr	r2, [pc, #736]	; (2bc0 <USBC_Handler+0x5fc>)
    28de:	4bb9      	ldr	r3, [pc, #740]	; (2bc4 <USBC_Handler+0x600>)
    28e0:	8818      	ldrh	r0, [r3, #0]
    28e2:	8811      	ldrh	r1, [r2, #0]
    28e4:	1840      	adds	r0, r0, r1
    28e6:	8010      	strh	r0, [r2, #0]

		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    28e8:	f04f 0200 	mov.w	r2, #0
    28ec:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
    28ee:	f245 1360 	movw	r3, #20832	; 0x5160
    28f2:	f2c4 030a 	movt	r3, #16394	; 0x400a
    28f6:	f04f 0102 	mov.w	r1, #2
    28fa:	6019      	str	r1, [r3, #0]

	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
    28fc:	f04f 0210 	mov.w	r2, #16
    2900:	601a      	str	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2902:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2906:	b672      	cpsid	i
    2908:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    290c:	f240 03d4 	movw	r3, #212	; 0xd4
    2910:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2914:	f04f 0000 	mov.w	r0, #0
    2918:	7018      	strb	r0, [r3, #0]
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
    291a:	f245 13f0 	movw	r3, #20976	; 0x51f0
    291e:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2922:	601a      	str	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2924:	2900      	cmp	r1, #0
    2926:	f040 8185 	bne.w	2c34 <USBC_Handler+0x670>
		cpu_irq_enable();
    292a:	f240 01d4 	movw	r1, #212	; 0xd4
    292e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2932:	f04f 0201 	mov.w	r2, #1
    2936:	700a      	strb	r2, [r1, #0]
    2938:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    293c:	b662      	cpsie	i
    293e:	e179      	b.n	2c34 <USBC_Handler+0x670>
		dbg_print("out ");
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
    2940:	f245 1230 	movw	r2, #20784	; 0x5130
    2944:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2948:	6813      	ldr	r3, [r2, #0]
    294a:	f013 0f01 	tst.w	r3, #1
    294e:	d00d      	beq.n	296c <USBC_Handler+0x3a8>
    2950:	f245 10c0 	movw	r0, #20928	; 0x51c0
    2954:	f2c4 000a 	movt	r0, #16394	; 0x400a
    2958:	6801      	ldr	r1, [r0, #0]
    295a:	f011 0f01 	tst.w	r1, #1
    295e:	d005      	beq.n	296c <USBC_Handler+0x3a8>
		dbg_print("in ");
		// IN packet sent
		udd_ctrl_in_sent();
    2960:	f641 509d 	movw	r0, #7581	; 0x1d9d
    2964:	f2c0 0000 	movt	r0, #0
    2968:	4780      	blx	r0
    296a:	e163      	b.n	2c34 <USBC_Handler+0x670>
		return true;
	}
	if (Is_udd_nak_out(0)) {
    296c:	f245 1230 	movw	r2, #20784	; 0x5130
    2970:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2974:	6813      	ldr	r3, [r2, #0]
    2976:	f013 0f08 	tst.w	r3, #8
    297a:	d01f      	beq.n	29bc <USBC_Handler+0x3f8>
		dbg_print("nako ");
		// Overflow on OUT packet
		udd_ack_nak_out(0);
    297c:	f245 1060 	movw	r0, #20832	; 0x5160
    2980:	f2c4 000a 	movt	r0, #16394	; 0x400a
    2984:	f04f 0208 	mov.w	r2, #8
    2988:	6002      	str	r2, [r0, #0]
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0)) {
    298a:	f245 1130 	movw	r1, #20784	; 0x5130
    298e:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2992:	680b      	ldr	r3, [r1, #0]
    2994:	f013 0f01 	tst.w	r3, #1
    2998:	f040 814c 	bne.w	2c34 <USBC_Handler+0x670>
	}

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    299c:	f240 70a4 	movw	r0, #1956	; 0x7a4
    29a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    29a4:	7802      	ldrb	r2, [r0, #0]
    29a6:	2a03      	cmp	r2, #3
    29a8:	f040 8144 	bne.w	2c34 <USBC_Handler+0x670>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
    29ac:	f245 11f0 	movw	r1, #20976	; 0x51f0
    29b0:	f2c4 010a 	movt	r1, #16394	; 0x400a
    29b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    29b8:	600b      	str	r3, [r1, #0]
    29ba:	e13b      	b.n	2c34 <USBC_Handler+0x670>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
    29bc:	f245 1030 	movw	r0, #20784	; 0x5130
    29c0:	f2c4 000a 	movt	r0, #16394	; 0x400a
    29c4:	6801      	ldr	r1, [r0, #0]
    29c6:	f011 0f10 	tst.w	r1, #16
    29ca:	f000 8136 	beq.w	2c3a <USBC_Handler+0x676>
		dbg_print("naki ");
		// Underflow on IN packet
		udd_ack_nak_in(0);
    29ce:	f245 1360 	movw	r3, #20832	; 0x5160
    29d2:	f2c4 030a 	movt	r3, #16394	; 0x400a
    29d6:	f04f 0210 	mov.w	r2, #16
    29da:	601a      	str	r2, [r3, #0]
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
    29dc:	f245 1030 	movw	r0, #20784	; 0x5130
    29e0:	f2c4 000a 	movt	r0, #16394	; 0x400a
    29e4:	6801      	ldr	r1, [r0, #0]
    29e6:	f011 0f02 	tst.w	r1, #2
    29ea:	f040 8123 	bne.w	2c34 <USBC_Handler+0x670>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    29ee:	f240 73a4 	movw	r3, #1956	; 0x7a4
    29f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    29f6:	781a      	ldrb	r2, [r3, #0]
    29f8:	2a01      	cmp	r2, #1
    29fa:	d105      	bne.n	2a08 <USBC_Handler+0x444>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    29fc:	f641 1379 	movw	r3, #6521	; 0x1979
    2a00:	f2c0 0300 	movt	r3, #0
    2a04:	4798      	blx	r3
    2a06:	e115      	b.n	2c34 <USBC_Handler+0x670>

	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2a08:	2a04      	cmp	r2, #4
    2a0a:	f040 8113 	bne.w	2c34 <USBC_Handler+0x670>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
    2a0e:	f245 10f0 	movw	r0, #20976	; 0x51f0
    2a12:	f2c4 000a 	movt	r0, #16394	; 0x400a
    2a16:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    2a1a:	6001      	str	r1, [r0, #0]
    2a1c:	e10a      	b.n	2c34 <USBC_Handler+0x670>
	udd_ep_id_t ep, ep_addr;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		if (!Is_udd_endpoint_interrupt_enabled(ep)
				|| !Is_udd_endpoint_interrupt(ep)) {
    2a1e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    2a22:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2a26:	685a      	ldr	r2, [r3, #4]
    2a28:	f412 4f00 	tst.w	r2, #32768	; 0x8000
    2a2c:	d108      	bne.n	2a40 <USBC_Handler+0x47c>
		goto udd_interrupt_end;
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
    2a2e:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
    2a32:	f2c4 000a 	movt	r0, #16394	; 0x400a
    2a36:	6841      	ldr	r1, [r0, #4]
    2a38:	f011 0f08 	tst.w	r1, #8
    2a3c:	d119      	bne.n	2a72 <USBC_Handler+0x4ae>
    2a3e:	e08b      	b.n	2b58 <USBC_Handler+0x594>
	udd_ep_id_t ep, ep_addr;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		if (!Is_udd_endpoint_interrupt_enabled(ep)
				|| !Is_udd_endpoint_interrupt(ep)) {
    2a40:	f04f 0003 	mov.w	r0, #3
    2a44:	e004      	b.n	2a50 <USBC_Handler+0x48c>
    2a46:	f04f 0001 	mov.w	r0, #1
    2a4a:	e001      	b.n	2a50 <USBC_Handler+0x48c>
static bool udd_ep_interrupt(void)
{
	udd_ep_id_t ep, ep_addr;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
    2a4c:	f04f 0002 	mov.w	r0, #2
		if (!Is_udd_endpoint_interrupt_enabled(ep)
				|| !Is_udd_endpoint_interrupt(ep)) {
			continue;
		}
		ep_addr = Is_udd_endpoint_in(ep) ? (ep | USB_EP_DIR_IN) : ep;
    2a50:	f44f 41a2 	mov.w	r1, #20736	; 0x5100
    2a54:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2a58:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    2a5c:	f413 7f80 	tst.w	r3, #256	; 0x100
    2a60:	bf18      	it	ne
    2a62:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
		dbg_print("%x: ", ep_addr);
		udd_ep_trans_done(ep_addr);
    2a66:	f641 12fd 	movw	r2, #6653	; 0x19fd
    2a6a:	f2c0 0200 	movt	r2, #0
    2a6e:	4790      	blx	r2
    2a70:	e0e0      	b.n	2c34 <USBC_Handler+0x670>
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
    2a72:	f44f 44a0 	mov.w	r4, #20480	; 0x5000
    2a76:	f2c4 040a 	movt	r4, #16394	; 0x400a
    2a7a:	f04f 0508 	mov.w	r5, #8
    2a7e:	60a5      	str	r5, [r4, #8]
#if (USB_DEVICE_MAX_EP != 0)
		// For each endpoint, kill job
		{
			uint8_t i;
			for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
				udd_ep_abort(i);
    2a80:	f04f 0001 	mov.w	r0, #1
    2a84:	f242 45c5 	movw	r5, #9413	; 0x24c5
    2a88:	f2c0 0500 	movt	r5, #0
    2a8c:	47a8      	blx	r5
    2a8e:	f04f 0002 	mov.w	r0, #2
    2a92:	47a8      	blx	r5
    2a94:	f04f 0003 	mov.w	r0, #3
    2a98:	47a8      	blx	r5
			}
		}
#endif
		// Reset USB Device Stack Core
		udc_reset();
    2a9a:	f640 3099 	movw	r0, #2969	; 0xb99
    2a9e:	f2c0 0000 	movt	r0, #0
    2aa2:	4780      	blx	r0
		udd_disable_endpoints();
    2aa4:	69e1      	ldr	r1, [r4, #28]
    2aa6:	f021 027f 	bic.w	r2, r1, #127	; 0x7f
    2aaa:	61e2      	str	r2, [r4, #28]
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
    2aac:	6823      	ldr	r3, [r4, #0]
    2aae:	f023 007f 	bic.w	r0, r3, #127	; 0x7f
    2ab2:	6020      	str	r0, [r4, #0]
	udd_enable_address();
    2ab4:	6821      	ldr	r1, [r4, #0]
    2ab6:	f041 0280 	orr.w	r2, r1, #128	; 0x80
    2aba:	6022      	str	r2, [r4, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
    2abc:	f44f 43a2 	mov.w	r3, #20736	; 0x5100
    2ac0:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2ac4:	6818      	ldr	r0, [r3, #0]
    2ac6:	f420 51cb 	bic.w	r1, r0, #6496	; 0x1960
    2aca:	f021 0214 	bic.w	r2, r1, #20
    2ace:	f042 0030 	orr.w	r0, r2, #48	; 0x30
    2ad2:	6018      	str	r0, [r3, #0]
			USB_EP_TYPE_CONTROL,
			USBC_UECFG0_EPDIR_OUT,
			USB_DEVICE_EP_CTRL_SIZE, USBC_UECFG0_EPBK_SINGLE);

	// Use internal buffer for endpoint control
	udd_udesc_set_buf0_addr(0, udd_ctrl_buffer);
    2ad4:	f240 7320 	movw	r3, #1824	; 0x720
    2ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2adc:	f640 01f0 	movw	r1, #2288	; 0x8f0
    2ae0:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2ae4:	6019      	str	r1, [r3, #0]

	// don't use multipacket on endpoint control
	udd_udesc_rst_buf0_size(0);
    2ae6:	685a      	ldr	r2, [r3, #4]
    2ae8:	f36f 421e 	bfc	r2, #16, #15
    2aec:	605a      	str	r2, [r3, #4]
	udd_enable_endpoint(0);
    2aee:	69e0      	ldr	r0, [r4, #28]
    2af0:	f040 0301 	orr.w	r3, r0, #1
    2af4:	61e3      	str	r3, [r4, #28]
	udd_disable_busy_bank0(0);
    2af6:	f245 2120 	movw	r1, #21024	; 0x5220
    2afa:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2afe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    2b02:	600a      	str	r2, [r1, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2b04:	f3ef 8010 	mrs	r0, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2b08:	b672      	cpsid	i
    2b0a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    2b0e:	f240 03d4 	movw	r3, #212	; 0xd4
    2b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2b16:	f04f 0100 	mov.w	r1, #0
    2b1a:	7019      	strb	r1, [r3, #0]
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
    2b1c:	f245 12f0 	movw	r2, #20976	; 0x51f0
    2b20:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2b24:	f04f 0304 	mov.w	r3, #4
    2b28:	6013      	str	r3, [r2, #0]
	udd_enable_out_received_interrupt(0);
    2b2a:	f04f 0102 	mov.w	r1, #2
    2b2e:	6011      	str	r1, [r2, #0]
	udd_enable_endpoint_interrupt(0);
    2b30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    2b34:	61a2      	str	r2, [r4, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2b36:	b948      	cbnz	r0, 2b4c <USBC_Handler+0x588>
		cpu_irq_enable();
    2b38:	f240 00d4 	movw	r0, #212	; 0xd4
    2b3c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2b40:	f04f 0301 	mov.w	r3, #1
    2b44:	7003      	strb	r3, [r0, #0]
    2b46:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2b4a:	b662      	cpsie	i
		udc_reset();
		udd_disable_endpoints();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
    2b4c:	f641 111d 	movw	r1, #6429	; 0x191d
    2b50:	f2c0 0100 	movt	r1, #0
    2b54:	4788      	blx	r1
		goto udd_interrupt_end;
    2b56:	e06d      	b.n	2c34 <USBC_Handler+0x670>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
    2b58:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    2b5c:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2b60:	691a      	ldr	r2, [r3, #16]
    2b62:	f012 0f01 	tst.w	r2, #1
    2b66:	d02f      	beq.n	2bc8 <USBC_Handler+0x604>
    2b68:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
    2b6c:	f2c4 000a 	movt	r0, #16394	; 0x400a
    2b70:	6841      	ldr	r1, [r0, #4]
    2b72:	f011 0f01 	tst.w	r1, #1
    2b76:	d027      	beq.n	2bc8 <USBC_Handler+0x604>
		udd_ack_suspend();
    2b78:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    2b7c:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2b80:	f04f 0001 	mov.w	r0, #1
    2b84:	6098      	str	r0, [r3, #8]
		dbg_print("SUSP ");
		otg_unfreeze_clock();
    2b86:	f8d3 1800 	ldr.w	r1, [r3, #2048]	; 0x800
    2b8a:	f421 4280 	bic.w	r2, r1, #16384	; 0x4000
    2b8e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

		udd_disable_suspend_interrupt();
    2b92:	6158      	str	r0, [r3, #20]

		// clear the wake-up status before enabling interrupt, in order
		// to avoid a spurious interrupt.
		udd_ack_wake_up();
    2b94:	f04f 0010 	mov.w	r0, #16
    2b98:	6098      	str	r0, [r3, #8]
		udd_enable_wake_up_interrupt();
    2b9a:	6198      	str	r0, [r3, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
    2b9c:	f8d3 1800 	ldr.w	r1, [r3, #2048]	; 0x800
    2ba0:	f441 4280 	orr.w	r2, r1, #16384	; 0x4000
    2ba4:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		udd_sleep_mode(false);  // Enter in SUSPEND mode
    2ba8:	f04f 0000 	mov.w	r0, #0
    2bac:	f641 0371 	movw	r3, #6257	; 0x1871
    2bb0:	f2c0 0300 	movt	r3, #0
    2bb4:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
    2bb6:	e03d      	b.n	2c34 <USBC_Handler+0x670>
    2bb8:	200008d8 	.word	0x200008d8
    2bbc:	00001959 	.word	0x00001959
    2bc0:	200006cc 	.word	0x200006cc
    2bc4:	200007a2 	.word	0x200007a2
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
    2bc8:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    2bcc:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2bd0:	691a      	ldr	r2, [r3, #16]
    2bd2:	f012 0f10 	tst.w	r2, #16
    2bd6:	d02d      	beq.n	2c34 <USBC_Handler+0x670>
    2bd8:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
    2bdc:	f2c4 000a 	movt	r0, #16394	; 0x400a
    2be0:	6841      	ldr	r1, [r0, #4]
    2be2:	f011 0f10 	tst.w	r1, #16
    2be6:	d025      	beq.n	2c34 <USBC_Handler+0x670>
		udd_ack_wake_up();
    2be8:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    2bec:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2bf0:	f04f 0210 	mov.w	r2, #16
    2bf4:	609a      	str	r2, [r3, #8]
		dbg_print("WKUP ");
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
    2bf6:	f8d3 0800 	ldr.w	r0, [r3, #2048]	; 0x800
    2bfa:	f420 4180 	bic.w	r1, r0, #16384	; 0x4000
    2bfe:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800

		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable());
    2c02:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
    2c06:	f2c4 020a 	movt	r2, #16394	; 0x400a
    2c0a:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
    2c0e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    2c12:	d0fa      	beq.n	2c0a <USBC_Handler+0x646>

		udd_disable_wake_up_interrupt();
    2c14:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    2c18:	f2c4 010a 	movt	r1, #16394	; 0x400a
    2c1c:	f04f 0010 	mov.w	r0, #16
    2c20:	6148      	str	r0, [r1, #20]

		// clear the suspend status before enabling interrupt, in order
		// to avoid a spurious interrupt.
		udd_ack_suspend();
    2c22:	f04f 0001 	mov.w	r0, #1
    2c26:	6088      	str	r0, [r1, #8]
		udd_enable_suspend_interrupt();
    2c28:	6188      	str	r0, [r1, #24]
		udd_sleep_mode(true); // Enter in IDLE mode
    2c2a:	f641 0271 	movw	r2, #6257	; 0x1871
    2c2e:	f2c0 0200 	movt	r2, #0
    2c32:	4790      	blx	r2
    2c34:	f3bf 8f5f 	dmb	sy
    2c38:	bd38      	pop	{r3, r4, r5, pc}
{
	udd_ep_id_t ep, ep_addr;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		if (!Is_udd_endpoint_interrupt_enabled(ep)
    2c3a:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
    2c3e:	f2c4 000a 	movt	r0, #16394	; 0x400a
    2c42:	6901      	ldr	r1, [r0, #16]
    2c44:	f411 5f00 	tst.w	r1, #8192	; 0x2000
    2c48:	d008      	beq.n	2c5c <USBC_Handler+0x698>
				|| !Is_udd_endpoint_interrupt(ep)) {
    2c4a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    2c4e:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2c52:	685a      	ldr	r2, [r3, #4]
    2c54:	f412 5f00 	tst.w	r2, #8192	; 0x2000
    2c58:	f47f aef5 	bne.w	2a46 <USBC_Handler+0x482>
{
	udd_ep_id_t ep, ep_addr;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		if (!Is_udd_endpoint_interrupt_enabled(ep)
    2c5c:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
    2c60:	f2c4 000a 	movt	r0, #16394	; 0x400a
    2c64:	6901      	ldr	r1, [r0, #16]
    2c66:	f411 4f80 	tst.w	r1, #16384	; 0x4000
    2c6a:	d008      	beq.n	2c7e <USBC_Handler+0x6ba>
				|| !Is_udd_endpoint_interrupt(ep)) {
    2c6c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    2c70:	f2c4 030a 	movt	r3, #16394	; 0x400a
    2c74:	685a      	ldr	r2, [r3, #4]
    2c76:	f412 4f80 	tst.w	r2, #16384	; 0x4000
    2c7a:	f47f aee7 	bne.w	2a4c <USBC_Handler+0x488>
{
	udd_ep_id_t ep, ep_addr;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		if (!Is_udd_endpoint_interrupt_enabled(ep)
    2c7e:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
    2c82:	f2c4 000a 	movt	r0, #16394	; 0x400a
    2c86:	6901      	ldr	r1, [r0, #16]
    2c88:	f411 4f00 	tst.w	r1, #32768	; 0x8000
    2c8c:	f43f aecf 	beq.w	2a2e <USBC_Handler+0x46a>
    2c90:	e6c5      	b.n	2a1e <USBC_Handler+0x45a>
    2c92:	bf00      	nop

00002c94 <main>:
 */
#include <asf.h>
#include "TargetCode/LcdDisplay.h"

int main (void)
{
    2c94:	b508      	push	{r3, lr}
	//used by usb
	irq_initialize_vectors();
	cpu_irq_enable();
    2c96:	f04f 0401 	mov.w	r4, #1
    2c9a:	f240 03d4 	movw	r3, #212	; 0xd4
    2c9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ca2:	701c      	strb	r4, [r3, #0]
    2ca4:	f3bf 8f5f 	dmb	sy
    2ca8:	b662      	cpsie	i
	
	sysclk_init();
    2caa:	f643 606d 	movw	r0, #15981	; 0x3e6d
    2cae:	f2c0 0000 	movt	r0, #0
    2cb2:	4780      	blx	r0
	board_init();
    2cb4:	f643 7189 	movw	r1, #16265	; 0x3f89
    2cb8:	f2c0 0100 	movt	r1, #0
    2cbc:	4788      	blx	r1
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
    2cbe:	f240 73ac 	movw	r3, #1964	; 0x7ac
    2cc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2cc6:	f04f 0200 	mov.w	r2, #0
    2cca:	701a      	strb	r2, [r3, #0]
    2ccc:	705a      	strb	r2, [r3, #1]
    2cce:	709a      	strb	r2, [r3, #2]
    2cd0:	70da      	strb	r2, [r3, #3]
    2cd2:	711a      	strb	r2, [r3, #4]
    2cd4:	715a      	strb	r2, [r3, #5]
    2cd6:	719a      	strb	r2, [r3, #6]
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2cd8:	71dc      	strb	r4, [r3, #7]
	sleepmgr_init();
	lcdca_init();
    2cda:	f244 64dd 	movw	r4, #18141	; 0x46dd
    2cde:	f2c0 0400 	movt	r4, #0
    2ce2:	47a0      	blx	r4
	//init usb stack
	udc_start();
    2ce4:	f640 3089 	movw	r0, #2953	; 0xb89
    2ce8:	f2c0 0000 	movt	r0, #0
    2cec:	4780      	blx	r0
	
	LcdWrite("Hw4");
    2cee:	f644 108c 	movw	r0, #18828	; 0x498c
    2cf2:	f2c0 0000 	movt	r0, #0
    2cf6:	f244 7171 	movw	r1, #18289	; 0x4771
    2cfa:	f2c0 0100 	movt	r1, #0
    2cfe:	4788      	blx	r1
    2d00:	e7fe      	b.n	2d00 <main+0x6c>
    2d02:	bf00      	nop

00002d04 <osc_priv_enable_osc0>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2d04:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2d08:	b672      	cpsid	i
    2d0a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    2d0e:	f240 03d4 	movw	r3, #212	; 0xd4
    2d12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d16:	f04f 0200 	mov.w	r2, #0
    2d1a:	701a      	strb	r2, [r3, #0]
void osc_priv_enable_osc0(void)
{
	irqflags_t flags;

	flags = cpu_irq_save();
	SCIF->SCIF_UNLOCK = SCIF_UNLOCK_KEY(0xAAu)
    2d1c:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2d20:	f2c4 000e 	movt	r0, #16398	; 0x400e
    2d24:	f04f 0320 	mov.w	r3, #32
    2d28:	f6ca 2300 	movt	r3, #43520	; 0xaa00
    2d2c:	6183      	str	r3, [r0, #24]
		| SCIF_UNLOCK_ADDR((uint32_t)&SCIF->SCIF_OSCCTRL0 - (uint32_t)SCIF);
	SCIF->SCIF_OSCCTRL0 =
    2d2e:	f240 2207 	movw	r2, #519	; 0x207
    2d32:	f2c0 0201 	movt	r2, #1
    2d36:	6202      	str	r2, [r0, #32]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2d38:	b949      	cbnz	r1, 2d4e <osc_priv_enable_osc0+0x4a>
		cpu_irq_enable();
    2d3a:	f240 01d4 	movw	r1, #212	; 0xd4
    2d3e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2d42:	f04f 0001 	mov.w	r0, #1
    2d46:	7008      	strb	r0, [r1, #0]
    2d48:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2d4c:	b662      	cpsie	i
    2d4e:	4770      	bx	lr

00002d50 <osc_priv_enable_osc32>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2d50:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2d54:	b672      	cpsid	i
    2d56:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    2d5a:	f240 03d4 	movw	r3, #212	; 0xd4
    2d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2d62:	f04f 0200 	mov.w	r2, #0
    2d66:	701a      	strb	r2, [r3, #0]
void osc_priv_enable_osc32(void)
{
	irqflags_t flags;

	flags = cpu_irq_save();
	BSCIF->BSCIF_UNLOCK = BSCIF_UNLOCK_KEY(0xAAu)
    2d68:	f44f 6080 	mov.w	r0, #1024	; 0x400
    2d6c:	f2c4 000f 	movt	r0, #16399	; 0x400f
    2d70:	f04f 0320 	mov.w	r3, #32
    2d74:	f6ca 2300 	movt	r3, #43520	; 0xaa00
    2d78:	6183      	str	r3, [r0, #24]
		| BSCIF_UNLOCK_ADDR((uint32_t)&BSCIF->BSCIF_OSCCTRL32 - (uint32_t)BSCIF);
	BSCIF->BSCIF_OSCCTRL32 =
    2d7a:	f24a 120d 	movw	r2, #41229	; 0xa10d
    2d7e:	f2c0 0205 	movt	r2, #5
    2d82:	6202      	str	r2, [r0, #32]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2d84:	b949      	cbnz	r1, 2d9a <osc_priv_enable_osc32+0x4a>
		cpu_irq_enable();
    2d86:	f240 01d4 	movw	r1, #212	; 0xd4
    2d8a:	f2c2 0100 	movt	r1, #8192	; 0x2000
    2d8e:	f04f 0001 	mov.w	r0, #1
    2d92:	7008      	strb	r0, [r1, #0]
    2d94:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2d98:	b662      	cpsie	i
    2d9a:	4770      	bx	lr

00002d9c <pll_enable>:
	SCIF->SCIF_PLL[pll_id].SCIF_PLL  = cfg->ctrl;
	cpu_irq_restore(flags);
}

void pll_enable(const struct pll_config *cfg, uint32_t pll_id)
{
    2d9c:	b410      	push	{r4}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2d9e:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2da2:	b672      	cpsid	i
    2da4:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    2da8:	f240 03d4 	movw	r3, #212	; 0xd4
    2dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2db0:	f04f 0400 	mov.w	r4, #0
    2db4:	701c      	strb	r4, [r3, #0]
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	SCIF_UNLOCK_PLL_REG(pll_id);
    2db6:	f101 0309 	add.w	r3, r1, #9
    2dba:	ea4f 6403 	mov.w	r4, r3, lsl #24
    2dbe:	ea4f 5394 	mov.w	r3, r4, lsr #22
    2dc2:	f043 442a 	orr.w	r4, r3, #2852126720	; 0xaa000000
    2dc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
    2dca:	f2c4 030e 	movt	r3, #16398	; 0x400e
    2dce:	619c      	str	r4, [r3, #24]
	SCIF->SCIF_PLL[pll_id].SCIF_PLL  = cfg->ctrl | SCIF_PLL_PLLEN;
    2dd0:	6800      	ldr	r0, [r0, #0]
    2dd2:	f040 0001 	orr.w	r0, r0, #1
    2dd6:	f101 0108 	add.w	r1, r1, #8
    2dda:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2dde:	6048      	str	r0, [r1, #4]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2de0:	b94a      	cbnz	r2, 2df6 <pll_enable+0x5a>
		cpu_irq_enable();
    2de2:	f240 03d4 	movw	r3, #212	; 0xd4
    2de6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2dea:	f04f 0201 	mov.w	r2, #1
    2dee:	701a      	strb	r2, [r3, #0]
    2df0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2df4:	b662      	cpsie	i
	cpu_irq_restore(flags);
}
    2df6:	bc10      	pop	{r4}
    2df8:	4770      	bx	lr
    2dfa:	bf00      	nop

00002dfc <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(uint32_t bus_id, uint32_t module_index)
{
    2dfc:	b430      	push	{r4, r5}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2dfe:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2e02:	b672      	cpsid	i
    2e04:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    2e08:	f240 03d4 	movw	r3, #212	; 0xd4
    2e0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e10:	f04f 0200 	mov.w	r2, #0
    2e14:	701a      	strb	r2, [r3, #0]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
    2e16:	f04f 0320 	mov.w	r3, #32
    2e1a:	f2c4 030e 	movt	r3, #16398	; 0x400e
    2e1e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	mask |= 1U << module_index;
    2e22:	f04f 0501 	mov.w	r5, #1
    2e26:	fa05 f101 	lsl.w	r1, r5, r1
    2e2a:	4311      	orrs	r1, r2
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
    2e2c:	f100 0208 	add.w	r2, r0, #8
    2e30:	ea4f 6502 	mov.w	r5, r2, lsl #24
    2e34:	ea4f 5295 	mov.w	r2, r5, lsr #22
	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
	mask |= 1U << module_index;
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    2e38:	f042 452a 	orr.w	r5, r2, #2852126720	; 0xaa000000
    2e3c:	f04f 0200 	mov.w	r2, #0
    2e40:	f2c4 020e 	movt	r2, #16398	; 0x400e
    2e44:	6595      	str	r5, [r2, #88]	; 0x58
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
	*(&PM->PM_CPUMASK + bus_id) = mask;
    2e46:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2e4a:	b94c      	cbnz	r4, 2e60 <sysclk_priv_enable_module+0x64>
		cpu_irq_enable();
    2e4c:	f240 00d4 	movw	r0, #212	; 0xd4
    2e50:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2e54:	f04f 0301 	mov.w	r3, #1
    2e58:	7003      	strb	r3, [r0, #0]
    2e5a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2e5e:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
    2e60:	bc30      	pop	{r4, r5}
    2e62:	4770      	bx	lr

00002e64 <sysclk_priv_disable_module>:
 * \param bus_id Bus index, given by the \c PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be disabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_disable_module(uint32_t bus_id, uint32_t module_index)
{
    2e64:	b430      	push	{r4, r5}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2e66:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2e6a:	b672      	cpsid	i
    2e6c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    2e70:	f240 03d4 	movw	r3, #212	; 0xd4
    2e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2e78:	f04f 0200 	mov.w	r2, #0
    2e7c:	701a      	strb	r2, [r3, #0]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Disable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
    2e7e:	f04f 0320 	mov.w	r3, #32
    2e82:	f2c4 030e 	movt	r3, #16398	; 0x400e
    2e86:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
	mask &= ~(1U << module_index);
    2e8a:	f04f 0501 	mov.w	r5, #1
    2e8e:	fa05 f101 	lsl.w	r1, r5, r1
    2e92:	ea22 0101 	bic.w	r1, r2, r1
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
    2e96:	f100 0208 	add.w	r2, r0, #8
    2e9a:	ea4f 6502 	mov.w	r5, r2, lsl #24
    2e9e:	ea4f 5295 	mov.w	r2, r5, lsr #22
	flags = cpu_irq_save();

	/* Disable the clock */
	mask = *(&PM->PM_CPUMASK + bus_id);
	mask &= ~(1U << module_index);
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu) |
    2ea2:	f042 452a 	orr.w	r5, r2, #2852126720	; 0xaa000000
    2ea6:	f04f 0200 	mov.w	r2, #0
    2eaa:	f2c4 020e 	movt	r2, #16398	; 0x400e
    2eae:	6595      	str	r5, [r2, #88]	; 0x58
		BPM_UNLOCK_ADDR(((uint32_t)&PM->PM_CPUMASK - (uint32_t)PM) + (4 * bus_id));
	*(&PM->PM_CPUMASK + bus_id) = mask;
    2eb0:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2eb4:	b94c      	cbnz	r4, 2eca <sysclk_priv_disable_module+0x66>
		cpu_irq_enable();
    2eb6:	f240 00d4 	movw	r0, #212	; 0xd4
    2eba:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2ebe:	f04f 0301 	mov.w	r3, #1
    2ec2:	7003      	strb	r3, [r0, #0]
    2ec4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2ec8:	b662      	cpsie	i

	cpu_irq_restore(flags);
}
    2eca:	bc30      	pop	{r4, r5}
    2ecc:	4770      	bx	lr
    2ece:	bf00      	nop

00002ed0 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_enable_pba_module(uint32_t module_index)
{
    2ed0:	b538      	push	{r3, r4, r5, lr}
    2ed2:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2ed4:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2ed8:	b672      	cpsid	i
    2eda:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    2ede:	f240 03d4 	movw	r3, #212	; 0xd4
    2ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2ee6:	f04f 0200 	mov.w	r2, #0
    2eea:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBAMASK == 0) {
    2eec:	4610      	mov	r0, r2
    2eee:	f2c4 000e 	movt	r0, #16398	; 0x400e
    2ef2:	6a81      	ldr	r1, [r0, #40]	; 0x28
    2ef4:	b941      	cbnz	r1, 2f08 <sysclk_enable_pba_module+0x38>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    2ef6:	f04f 0001 	mov.w	r0, #1
    2efa:	f04f 0105 	mov.w	r1, #5
    2efe:	f642 53fd 	movw	r3, #11773	; 0x2dfd
    2f02:	f2c0 0300 	movt	r3, #0
    2f06:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2f08:	b94d      	cbnz	r5, 2f1e <sysclk_enable_pba_module+0x4e>
		cpu_irq_enable();
    2f0a:	f240 00d4 	movw	r0, #212	; 0xd4
    2f0e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2f12:	f04f 0201 	mov.w	r2, #1
    2f16:	7002      	strb	r2, [r0, #0]
    2f18:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2f1c:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBA, module_index);
    2f1e:	f04f 0002 	mov.w	r0, #2
    2f22:	4621      	mov	r1, r4
    2f24:	f642 53fd 	movw	r3, #11773	; 0x2dfd
    2f28:	f2c0 0300 	movt	r3, #0
    2f2c:	4798      	blx	r3
    2f2e:	bd38      	pop	{r3, r4, r5, pc}

00002f30 <sysclk_disable_pba_module>:
/**
 * \brief Disable a module clock derived from the PBA clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
void sysclk_disable_pba_module(uint32_t module_index)
{
    2f30:	b510      	push	{r4, lr}
    2f32:	4601      	mov	r1, r0
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBA, module_index);
    2f34:	f04f 0002 	mov.w	r0, #2
    2f38:	f642 6365 	movw	r3, #11877	; 0x2e65
    2f3c:	f2c0 0300 	movt	r3, #0
    2f40:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2f42:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2f46:	b672      	cpsid	i
    2f48:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    2f4c:	f240 00d4 	movw	r0, #212	; 0xd4
    2f50:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2f54:	f04f 0200 	mov.w	r2, #0
    2f58:	7002      	strb	r2, [r0, #0]

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	if (PM->PM_PBAMASK == 0) {
    2f5a:	4611      	mov	r1, r2
    2f5c:	f2c4 010e 	movt	r1, #16398	; 0x400e
    2f60:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    2f62:	b943      	cbnz	r3, 2f76 <sysclk_disable_pba_module+0x46>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    2f64:	f04f 0001 	mov.w	r0, #1
    2f68:	f04f 0105 	mov.w	r1, #5
    2f6c:	f642 6265 	movw	r2, #11877	; 0x2e65
    2f70:	f2c0 0200 	movt	r2, #0
    2f74:	4790      	blx	r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2f76:	b94c      	cbnz	r4, 2f8c <sysclk_disable_pba_module+0x5c>
		cpu_irq_enable();
    2f78:	f240 00d4 	movw	r0, #212	; 0xd4
    2f7c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2f80:	f04f 0101 	mov.w	r1, #1
    2f84:	7001      	strb	r1, [r0, #0]
    2f86:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2f8a:	b662      	cpsie	i
    2f8c:	bd10      	pop	{r4, pc}
    2f8e:	bf00      	nop

00002f90 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(uint32_t module_index)
{
    2f90:	b538      	push	{r3, r4, r5, lr}
    2f92:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2f94:	f3ef 8510 	mrs	r5, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    2f98:	b672      	cpsid	i
    2f9a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    2f9e:	f240 03d4 	movw	r3, #212	; 0xd4
    2fa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    2fa6:	f04f 0200 	mov.w	r2, #0
    2faa:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (PM->PM_PBBMASK == 0) {
    2fac:	4610      	mov	r0, r2
    2fae:	f2c4 000e 	movt	r0, #16398	; 0x400e
    2fb2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    2fb4:	b941      	cbnz	r1, 2fc8 <sysclk_enable_pbb_module+0x38>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    2fb6:	f04f 0001 	mov.w	r0, #1
    2fba:	f04f 0106 	mov.w	r1, #6
    2fbe:	f642 53fd 	movw	r3, #11773	; 0x2dfd
    2fc2:	f2c0 0300 	movt	r3, #0
    2fc6:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    2fc8:	b94d      	cbnz	r5, 2fde <sysclk_enable_pbb_module+0x4e>
		cpu_irq_enable();
    2fca:	f240 00d4 	movw	r0, #212	; 0xd4
    2fce:	f2c2 0000 	movt	r0, #8192	; 0x2000
    2fd2:	f04f 0201 	mov.w	r2, #1
    2fd6:	7002      	strb	r2, [r0, #0]
    2fd8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    2fdc:	b662      	cpsie	i
	}

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(PM_CLK_GRP_PBB, module_index);
    2fde:	f04f 0003 	mov.w	r0, #3
    2fe2:	4621      	mov	r1, r4
    2fe4:	f642 53fd 	movw	r3, #11773	; 0x2dfd
    2fe8:	f2c0 0300 	movt	r3, #0
    2fec:	4798      	blx	r3
    2fee:	bd38      	pop	{r3, r4, r5, pc}

00002ff0 <sysclk_disable_pbb_module>:
/**
 * \brief Disable a module clock derived from the PBB clock
 * \param module_index Index of the module clock in the PBBMASK register
 */
void sysclk_disable_pbb_module(uint32_t module_index)
{
    2ff0:	b510      	push	{r4, lr}
    2ff2:	4601      	mov	r1, r0
	irqflags_t flags;

	/* Disable the module */
	sysclk_priv_disable_module(PM_CLK_GRP_PBB, module_index);
    2ff4:	f04f 0003 	mov.w	r0, #3
    2ff8:	f642 6365 	movw	r3, #11877	; 0x2e65
    2ffc:	f2c0 0300 	movt	r3, #0
    3000:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3002:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3006:	b672      	cpsid	i
    3008:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    300c:	f240 00d4 	movw	r0, #212	; 0xd4
    3010:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3014:	f04f 0200 	mov.w	r2, #0
    3018:	7002      	strb	r2, [r0, #0]

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	if (PM->PM_PBBMASK == 0) {
    301a:	4611      	mov	r1, r2
    301c:	f2c4 010e 	movt	r1, #16398	; 0x400e
    3020:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    3022:	b943      	cbnz	r3, 3036 <sysclk_disable_pbb_module+0x46>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    3024:	f04f 0001 	mov.w	r0, #1
    3028:	f04f 0106 	mov.w	r1, #6
    302c:	f642 6265 	movw	r2, #11877	; 0x2e65
    3030:	f2c0 0200 	movt	r2, #0
    3034:	4790      	blx	r2
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3036:	b94c      	cbnz	r4, 304c <sysclk_disable_pbb_module+0x5c>
		cpu_irq_enable();
    3038:	f240 00d4 	movw	r0, #212	; 0xd4
    303c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3040:	f04f 0101 	mov.w	r1, #1
    3044:	7001      	strb	r1, [r0, #0]
    3046:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    304a:	b662      	cpsie	i
    304c:	bd10      	pop	{r4, pc}
    304e:	bf00      	nop

00003050 <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_enable_peripheral_clock(const volatile void *module)
{
    3050:	b508      	push	{r3, lr}
	switch ((uintptr_t)module) {
    3052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3056:	f2c4 0307 	movt	r3, #16391	; 0x4007
    305a:	4298      	cmp	r0, r3
    305c:	f000 827f 	beq.w	355e <sysclk_enable_peripheral_clock+0x50e>
    3060:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    3064:	f2c4 0107 	movt	r1, #16391	; 0x4007
    3068:	4288      	cmp	r0, r1
    306a:	f200 80bb 	bhi.w	31e4 <sysclk_enable_peripheral_clock+0x194>
    306e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    3072:	f2c4 0202 	movt	r2, #16386	; 0x4002
    3076:	4290      	cmp	r0, r2
    3078:	f000 81f2 	beq.w	3460 <sysclk_enable_peripheral_clock+0x410>
    307c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3080:	f2c4 0302 	movt	r3, #16386	; 0x4002
    3084:	4298      	cmp	r0, r3
    3086:	d851      	bhi.n	312c <sysclk_enable_peripheral_clock+0xdc>
    3088:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    308c:	f2c4 0101 	movt	r1, #16385	; 0x4001
    3090:	4288      	cmp	r0, r1
    3092:	f000 81b0 	beq.w	33f6 <sysclk_enable_peripheral_clock+0x3a6>
    3096:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    309a:	f2c4 0201 	movt	r2, #16385	; 0x4001
    309e:	4290      	cmp	r0, r2
    30a0:	d820      	bhi.n	30e4 <sysclk_enable_peripheral_clock+0x94>
    30a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    30a6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    30aa:	4298      	cmp	r0, r3
    30ac:	f000 8171 	beq.w	3392 <sysclk_enable_peripheral_clock+0x342>
    30b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    30b4:	f2c4 0100 	movt	r1, #16384	; 0x4000
    30b8:	4288      	cmp	r0, r1
    30ba:	d804      	bhi.n	30c6 <sysclk_enable_peripheral_clock+0x76>
    30bc:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    30c0:	f040 8334 	bne.w	372c <sysclk_enable_peripheral_clock+0x6dc>
    30c4:	e15d      	b.n	3382 <sysclk_enable_peripheral_clock+0x332>
    30c6:	f04f 0300 	mov.w	r3, #0
    30ca:	f2c4 0301 	movt	r3, #16385	; 0x4001
    30ce:	4298      	cmp	r0, r3
    30d0:	f000 8167 	beq.w	33a2 <sysclk_enable_peripheral_clock+0x352>
    30d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    30d8:	f2c4 0101 	movt	r1, #16385	; 0x4001
    30dc:	4288      	cmp	r0, r1
    30de:	f040 8325 	bne.w	372c <sysclk_enable_peripheral_clock+0x6dc>
    30e2:	e173      	b.n	33cc <sysclk_enable_peripheral_clock+0x37c>
    30e4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    30e8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    30ec:	4298      	cmp	r0, r3
    30ee:	f000 8192 	beq.w	3416 <sysclk_enable_peripheral_clock+0x3c6>
    30f2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    30f6:	f2c4 0201 	movt	r2, #16385	; 0x4001
    30fa:	4290      	cmp	r0, r2
    30fc:	d807      	bhi.n	310e <sysclk_enable_peripheral_clock+0xbe>
    30fe:	f44f 4104 	mov.w	r1, #33792	; 0x8400
    3102:	f2c4 0101 	movt	r1, #16385	; 0x4001
    3106:	4288      	cmp	r0, r1
    3108:	f040 8310 	bne.w	372c <sysclk_enable_peripheral_clock+0x6dc>
    310c:	e17b      	b.n	3406 <sysclk_enable_peripheral_clock+0x3b6>
    310e:	f44f 4244 	mov.w	r2, #50176	; 0xc400
    3112:	f2c4 0201 	movt	r2, #16385	; 0x4001
    3116:	4290      	cmp	r0, r2
    3118:	f000 8185 	beq.w	3426 <sysclk_enable_peripheral_clock+0x3d6>
    311c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    3120:	f2c4 0102 	movt	r1, #16386	; 0x4002
    3124:	4288      	cmp	r0, r1
    3126:	f040 8301 	bne.w	372c <sysclk_enable_peripheral_clock+0x6dc>
    312a:	e184      	b.n	3436 <sysclk_enable_peripheral_clock+0x3e6>
    312c:	f04f 0200 	mov.w	r2, #0
    3130:	f2c4 0204 	movt	r2, #16388	; 0x4004
    3134:	4290      	cmp	r0, r2
    3136:	f000 81e2 	beq.w	34fe <sysclk_enable_peripheral_clock+0x4ae>
    313a:	f04f 0100 	mov.w	r1, #0
    313e:	f2c4 0104 	movt	r1, #16388	; 0x4004
    3142:	4288      	cmp	r0, r1
    3144:	d823      	bhi.n	318e <sysclk_enable_peripheral_clock+0x13e>
    3146:	f04f 0300 	mov.w	r3, #0
    314a:	f2c4 0303 	movt	r3, #16387	; 0x4003
    314e:	4298      	cmp	r0, r3
    3150:	f000 81b0 	beq.w	34b4 <sysclk_enable_peripheral_clock+0x464>
    3154:	f04f 0200 	mov.w	r2, #0
    3158:	f2c4 0203 	movt	r2, #16387	; 0x4003
    315c:	4290      	cmp	r0, r2
    315e:	d807      	bhi.n	3170 <sysclk_enable_peripheral_clock+0x120>
    3160:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    3164:	f2c4 0102 	movt	r1, #16386	; 0x4002
    3168:	4288      	cmp	r0, r1
    316a:	f040 82df 	bne.w	372c <sysclk_enable_peripheral_clock+0x6dc>
    316e:	e18c      	b.n	348a <sysclk_enable_peripheral_clock+0x43a>
    3170:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    3174:	f2c4 0203 	movt	r2, #16387	; 0x4003
    3178:	4290      	cmp	r0, r2
    317a:	f000 81b0 	beq.w	34de <sysclk_enable_peripheral_clock+0x48e>
    317e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    3182:	f2c4 0103 	movt	r1, #16387	; 0x4003
    3186:	4288      	cmp	r0, r1
    3188:	f040 82d0 	bne.w	372c <sysclk_enable_peripheral_clock+0x6dc>
    318c:	e1af      	b.n	34ee <sysclk_enable_peripheral_clock+0x49e>
    318e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3192:	f2c4 0306 	movt	r3, #16390	; 0x4006
    3196:	4298      	cmp	r0, r3
    3198:	f000 81c9 	beq.w	352e <sysclk_enable_peripheral_clock+0x4de>
    319c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    31a0:	f2c4 0106 	movt	r1, #16390	; 0x4006
    31a4:	4288      	cmp	r0, r1
    31a6:	d80e      	bhi.n	31c6 <sysclk_enable_peripheral_clock+0x176>
    31a8:	f04f 0200 	mov.w	r2, #0
    31ac:	f2c4 0206 	movt	r2, #16390	; 0x4006
    31b0:	4290      	cmp	r0, r2
    31b2:	f000 81ac 	beq.w	350e <sysclk_enable_peripheral_clock+0x4be>
    31b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    31ba:	f2c4 0306 	movt	r3, #16390	; 0x4006
    31be:	4298      	cmp	r0, r3
    31c0:	f040 82b4 	bne.w	372c <sysclk_enable_peripheral_clock+0x6dc>
    31c4:	e1ab      	b.n	351e <sysclk_enable_peripheral_clock+0x4ce>
    31c6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    31ca:	f2c4 0306 	movt	r3, #16390	; 0x4006
    31ce:	4298      	cmp	r0, r3
    31d0:	f000 81b5 	beq.w	353e <sysclk_enable_peripheral_clock+0x4ee>
    31d4:	f04f 0100 	mov.w	r1, #0
    31d8:	f2c4 0107 	movt	r1, #16391	; 0x4007
    31dc:	4288      	cmp	r0, r1
    31de:	f040 82a5 	bne.w	372c <sysclk_enable_peripheral_clock+0x6dc>
    31e2:	e1b4      	b.n	354e <sysclk_enable_peripheral_clock+0x4fe>
    31e4:	f04f 0100 	mov.w	r1, #0
    31e8:	f2c4 010e 	movt	r1, #16398	; 0x400e
    31ec:	4288      	cmp	r0, r1
    31ee:	f000 8232 	beq.w	3656 <sysclk_enable_peripheral_clock+0x606>
    31f2:	f04f 0300 	mov.w	r3, #0
    31f6:	f2c4 030e 	movt	r3, #16398	; 0x400e
    31fa:	4298      	cmp	r0, r3
    31fc:	d85b      	bhi.n	32b6 <sysclk_enable_peripheral_clock+0x266>
    31fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    3202:	f2c4 020a 	movt	r2, #16394	; 0x400a
    3206:	4290      	cmp	r0, r2
    3208:	f000 81e2 	beq.w	35d0 <sysclk_enable_peripheral_clock+0x580>
    320c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    3210:	f2c4 010a 	movt	r1, #16394	; 0x400a
    3214:	4288      	cmp	r0, r1
    3216:	d823      	bhi.n	3260 <sysclk_enable_peripheral_clock+0x210>
    3218:	f04f 0300 	mov.w	r3, #0
    321c:	f2c4 0308 	movt	r3, #16392	; 0x4008
    3220:	4298      	cmp	r0, r3
    3222:	f000 81ac 	beq.w	357e <sysclk_enable_peripheral_clock+0x52e>
    3226:	f04f 0200 	mov.w	r2, #0
    322a:	f2c4 0208 	movt	r2, #16392	; 0x4008
    322e:	4290      	cmp	r0, r2
    3230:	d807      	bhi.n	3242 <sysclk_enable_peripheral_clock+0x1f2>
    3232:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    3236:	f2c4 0107 	movt	r1, #16391	; 0x4007
    323a:	4288      	cmp	r0, r1
    323c:	f040 8276 	bne.w	372c <sysclk_enable_peripheral_clock+0x6dc>
    3240:	e195      	b.n	356e <sysclk_enable_peripheral_clock+0x51e>
    3242:	f04f 0200 	mov.w	r2, #0
    3246:	f2c4 020a 	movt	r2, #16394	; 0x400a
    324a:	4290      	cmp	r0, r2
    324c:	f000 819f 	beq.w	358e <sysclk_enable_peripheral_clock+0x53e>
    3250:	f44f 6180 	mov.w	r1, #1024	; 0x400
    3254:	f2c4 010a 	movt	r1, #16394	; 0x400a
    3258:	4288      	cmp	r0, r1
    325a:	f040 8267 	bne.w	372c <sysclk_enable_peripheral_clock+0x6dc>
    325e:	e1a6      	b.n	35ae <sysclk_enable_peripheral_clock+0x55e>
    3260:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    3264:	f2c4 030a 	movt	r3, #16394	; 0x400a
    3268:	4298      	cmp	r0, r3
    326a:	f000 81db 	beq.w	3624 <sysclk_enable_peripheral_clock+0x5d4>
    326e:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    3272:	f2c4 010a 	movt	r1, #16394	; 0x400a
    3276:	4288      	cmp	r0, r1
    3278:	d80e      	bhi.n	3298 <sysclk_enable_peripheral_clock+0x248>
    327a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    327e:	f2c4 020a 	movt	r2, #16394	; 0x400a
    3282:	4290      	cmp	r0, r2
    3284:	f000 81ac 	beq.w	35e0 <sysclk_enable_peripheral_clock+0x590>
    3288:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    328c:	f2c4 030a 	movt	r3, #16394	; 0x400a
    3290:	4298      	cmp	r0, r3
    3292:	f040 824b 	bne.w	372c <sysclk_enable_peripheral_clock+0x6dc>
    3296:	e1b4      	b.n	3602 <sysclk_enable_peripheral_clock+0x5b2>
    3298:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
    329c:	f2c4 010a 	movt	r1, #16394	; 0x400a
    32a0:	4288      	cmp	r0, r1
    32a2:	f000 81d0 	beq.w	3646 <sysclk_enable_peripheral_clock+0x5f6>
    32a6:	f04f 0300 	mov.w	r3, #0
    32aa:	f2c4 030b 	movt	r3, #16395	; 0x400b
    32ae:	4298      	cmp	r0, r3
    32b0:	f040 823c 	bne.w	372c <sysclk_enable_peripheral_clock+0x6dc>
    32b4:	e05b      	b.n	336e <sysclk_enable_peripheral_clock+0x31e>
    32b6:	f04f 0300 	mov.w	r3, #0
    32ba:	f2c4 030f 	movt	r3, #16399	; 0x400f
    32be:	4298      	cmp	r0, r3
    32c0:	f000 81fa 	beq.w	36b8 <sysclk_enable_peripheral_clock+0x668>
    32c4:	f04f 0200 	mov.w	r2, #0
    32c8:	f2c4 020f 	movt	r2, #16399	; 0x400f
    32cc:	4290      	cmp	r0, r2
    32ce:	d823      	bhi.n	3318 <sysclk_enable_peripheral_clock+0x2c8>
    32d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    32d4:	f2c4 010e 	movt	r1, #16398	; 0x400e
    32d8:	4288      	cmp	r0, r1
    32da:	f000 81d0 	beq.w	367e <sysclk_enable_peripheral_clock+0x62e>
    32de:	f44f 6300 	mov.w	r3, #2048	; 0x800
    32e2:	f2c4 030e 	movt	r3, #16398	; 0x400e
    32e6:	4298      	cmp	r0, r3
    32e8:	d807      	bhi.n	32fa <sysclk_enable_peripheral_clock+0x2aa>
    32ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
    32ee:	f2c4 020e 	movt	r2, #16398	; 0x400e
    32f2:	4290      	cmp	r0, r2
    32f4:	f040 821a 	bne.w	372c <sysclk_enable_peripheral_clock+0x6dc>
    32f8:	e1b7      	b.n	366a <sysclk_enable_peripheral_clock+0x61a>
    32fa:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    32fe:	f2c4 010e 	movt	r1, #16398	; 0x400e
    3302:	4288      	cmp	r0, r1
    3304:	f000 81c5 	beq.w	3692 <sysclk_enable_peripheral_clock+0x642>
    3308:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    330c:	f2c4 020e 	movt	r2, #16398	; 0x400e
    3310:	4290      	cmp	r0, r2
    3312:	f040 820b 	bne.w	372c <sysclk_enable_peripheral_clock+0x6dc>
    3316:	e1c6      	b.n	36a6 <sysclk_enable_peripheral_clock+0x656>
    3318:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    331c:	f2c4 010f 	movt	r1, #16399	; 0x400f
    3320:	4288      	cmp	r0, r1
    3322:	f000 81e7 	beq.w	36f4 <sysclk_enable_peripheral_clock+0x6a4>
    3326:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    332a:	f2c4 020f 	movt	r2, #16399	; 0x400f
    332e:	4290      	cmp	r0, r2
    3330:	d80e      	bhi.n	3350 <sysclk_enable_peripheral_clock+0x300>
    3332:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3336:	f2c4 030f 	movt	r3, #16399	; 0x400f
    333a:	4298      	cmp	r0, r3
    333c:	f000 81c6 	beq.w	36cc <sysclk_enable_peripheral_clock+0x67c>
    3340:	f44f 6100 	mov.w	r1, #2048	; 0x800
    3344:	f2c4 010f 	movt	r1, #16399	; 0x400f
    3348:	4288      	cmp	r0, r1
    334a:	f040 81ef 	bne.w	372c <sysclk_enable_peripheral_clock+0x6dc>
    334e:	e1c7      	b.n	36e0 <sysclk_enable_peripheral_clock+0x690>
    3350:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    3354:	f2c4 010f 	movt	r1, #16399	; 0x400f
    3358:	4288      	cmp	r0, r1
    335a:	f000 81d5 	beq.w	3708 <sysclk_enable_peripheral_clock+0x6b8>
    335e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
    3362:	f2c4 020f 	movt	r2, #16399	; 0x400f
    3366:	4290      	cmp	r0, r2
    3368:	f040 81e0 	bne.w	372c <sysclk_enable_peripheral_clock+0x6dc>
    336c:	e1d6      	b.n	371c <sysclk_enable_peripheral_clock+0x6cc>
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    336e:	f04f 0001 	mov.w	r0, #1
    3372:	f04f 0109 	mov.w	r1, #9
    3376:	f642 52fd 	movw	r2, #11773	; 0x2dfd
    337a:	f2c0 0200 	movt	r2, #0
    337e:	4790      	blx	r2
    3380:	bd08      	pop	{r3, pc}
	case AESA_ADDR:
		sysclk_enable_hsb_module(SYSCLK_AESA_HSB);
		break;

	case IISC_ADDR:
		sysclk_enable_pba_module(SYSCLK_IISC);
    3382:	f04f 0000 	mov.w	r0, #0
    3386:	f642 62d1 	movw	r2, #11985	; 0x2ed1
    338a:	f2c0 0200 	movt	r2, #0
    338e:	4790      	blx	r2
		break;
    3390:	bd08      	pop	{r3, pc}

	case SPI_ADDR:
		sysclk_enable_pba_module(SYSCLK_SPI);
    3392:	f04f 0001 	mov.w	r0, #1
    3396:	f642 61d1 	movw	r1, #11985	; 0x2ed1
    339a:	f2c0 0100 	movt	r1, #0
    339e:	4788      	blx	r1
		break;
    33a0:	bd08      	pop	{r3, pc}

	case TC0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC0);
    33a2:	f04f 0002 	mov.w	r0, #2
    33a6:	f642 63d1 	movw	r3, #11985	; 0x2ed1
    33aa:	f2c0 0300 	movt	r3, #0
    33ae:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    33b0:	f04f 0000 	mov.w	r0, #0
    33b4:	f2c4 000e 	movt	r0, #16398	; 0x400e
    33b8:	6c01      	ldr	r1, [r0, #64]	; 0x40
	temp_mask |= mask;
    33ba:	f041 0355 	orr.w	r3, r1, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    33be:	f04f 0240 	mov.w	r2, #64	; 0x40
    33c2:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    33c6:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    33c8:	6403      	str	r3, [r0, #64]	; 0x40
    33ca:	bd08      	pop	{r3, pc}
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;

	case TC1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TC1);
    33cc:	f04f 0003 	mov.w	r0, #3
    33d0:	f642 62d1 	movw	r2, #11985	; 0x2ed1
    33d4:	f2c0 0200 	movt	r2, #0
    33d8:	4790      	blx	r2
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    33da:	f04f 0000 	mov.w	r0, #0
    33de:	f2c4 000e 	movt	r0, #16398	; 0x400e
    33e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
	temp_mask |= mask;
    33e4:	f043 0155 	orr.w	r1, r3, #85	; 0x55
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    33e8:	f04f 0240 	mov.w	r2, #64	; 0x40
    33ec:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    33f0:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    33f2:	6401      	str	r1, [r0, #64]	; 0x40
    33f4:	bd08      	pop	{r3, pc}
			| PBA_DIVMASK_TIMER_CLOCK5
			);
		break;

	case TWIM0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM0);
    33f6:	f04f 0004 	mov.w	r0, #4
    33fa:	f642 63d1 	movw	r3, #11985	; 0x2ed1
    33fe:	f2c0 0300 	movt	r3, #0
    3402:	4798      	blx	r3
		break;
    3404:	bd08      	pop	{r3, pc}

	case TWIS0_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS0);
    3406:	f04f 0005 	mov.w	r0, #5
    340a:	f642 63d1 	movw	r3, #11985	; 0x2ed1
    340e:	f2c0 0300 	movt	r3, #0
    3412:	4798      	blx	r3
		break;
    3414:	bd08      	pop	{r3, pc}

	case TWIM1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM1);
    3416:	f04f 0006 	mov.w	r0, #6
    341a:	f642 61d1 	movw	r1, #11985	; 0x2ed1
    341e:	f2c0 0100 	movt	r1, #0
    3422:	4788      	blx	r1
		break;
    3424:	bd08      	pop	{r3, pc}

	case TWIS1_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIS1);
    3426:	f04f 0007 	mov.w	r0, #7
    342a:	f642 62d1 	movw	r2, #11985	; 0x2ed1
    342e:	f2c0 0200 	movt	r2, #0
    3432:	4790      	blx	r2
		break;
    3434:	bd08      	pop	{r3, pc}

	case USART0_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART0);
    3436:	f04f 0008 	mov.w	r0, #8
    343a:	f642 63d1 	movw	r3, #11985	; 0x2ed1
    343e:	f2c0 0300 	movt	r3, #0
    3442:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    3444:	f04f 0000 	mov.w	r0, #0
    3448:	f2c4 000e 	movt	r0, #16398	; 0x400e
    344c:	6c02      	ldr	r2, [r0, #64]	; 0x40
	temp_mask |= mask;
    344e:	f042 0104 	orr.w	r1, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    3452:	f04f 0340 	mov.w	r3, #64	; 0x40
    3456:	f6ca 2300 	movt	r3, #43520	; 0xaa00
    345a:	6583      	str	r3, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    345c:	6401      	str	r1, [r0, #64]	; 0x40
    345e:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART1_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART1);
    3460:	f04f 0009 	mov.w	r0, #9
    3464:	f642 63d1 	movw	r3, #11985	; 0x2ed1
    3468:	f2c0 0300 	movt	r3, #0
    346c:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    346e:	f04f 0000 	mov.w	r0, #0
    3472:	f2c4 000e 	movt	r0, #16398	; 0x400e
    3476:	6c01      	ldr	r1, [r0, #64]	; 0x40
	temp_mask |= mask;
    3478:	f041 0304 	orr.w	r3, r1, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    347c:	f04f 0240 	mov.w	r2, #64	; 0x40
    3480:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    3484:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    3486:	6403      	str	r3, [r0, #64]	; 0x40
    3488:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART2_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART2);
    348a:	f04f 000a 	mov.w	r0, #10
    348e:	f642 63d1 	movw	r3, #11985	; 0x2ed1
    3492:	f2c0 0300 	movt	r3, #0
    3496:	4798      	blx	r3
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    3498:	f04f 0000 	mov.w	r0, #0
    349c:	f2c4 000e 	movt	r0, #16398	; 0x400e
    34a0:	6c02      	ldr	r2, [r0, #64]	; 0x40
	temp_mask |= mask;
    34a2:	f042 0104 	orr.w	r1, r2, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    34a6:	f04f 0340 	mov.w	r3, #64	; 0x40
    34aa:	f6ca 2300 	movt	r3, #43520	; 0xaa00
    34ae:	6583      	str	r3, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    34b0:	6401      	str	r1, [r0, #64]	; 0x40
    34b2:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case USART3_ADDR:
		sysclk_enable_pba_module(SYSCLK_USART3);
    34b4:	f04f 000b 	mov.w	r0, #11
    34b8:	f642 61d1 	movw	r1, #11985	; 0x2ed1
    34bc:	f2c0 0100 	movt	r1, #0
    34c0:	4788      	blx	r1
 */
static inline void sysclk_enable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    34c2:	f04f 0000 	mov.w	r0, #0
    34c6:	f2c4 000e 	movt	r0, #16398	; 0x400e
    34ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
	temp_mask |= mask;
    34cc:	f043 0104 	orr.w	r1, r3, #4
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    34d0:	f04f 0240 	mov.w	r2, #64	; 0x40
    34d4:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    34d8:	6582      	str	r2, [r0, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    34da:	6401      	str	r1, [r0, #64]	; 0x40
    34dc:	bd08      	pop	{r3, pc}
		sysclk_enable_pba_divmask(PBA_DIVMASK_CLK_USART);
		break;

	case ADCIFE_ADDR:
		sysclk_enable_pba_module(SYSCLK_ADCIFE);
    34de:	f04f 000c 	mov.w	r0, #12
    34e2:	f642 62d1 	movw	r2, #11985	; 0x2ed1
    34e6:	f2c0 0200 	movt	r2, #0
    34ea:	4790      	blx	r2
		break;
    34ec:	bd08      	pop	{r3, pc}

	case DACC_ADDR:
		sysclk_enable_pba_module(SYSCLK_DACC);
    34ee:	f04f 000d 	mov.w	r0, #13
    34f2:	f642 63d1 	movw	r3, #11985	; 0x2ed1
    34f6:	f2c0 0300 	movt	r3, #0
    34fa:	4798      	blx	r3
		break;
    34fc:	bd08      	pop	{r3, pc}

	case ACIFC_ADDR:
		sysclk_enable_pba_module(SYSCLK_ACIFC);
    34fe:	f04f 000e 	mov.w	r0, #14
    3502:	f642 62d1 	movw	r2, #11985	; 0x2ed1
    3506:	f2c0 0200 	movt	r2, #0
    350a:	4790      	blx	r2
		break;
    350c:	bd08      	pop	{r3, pc}

	case GLOC_ADDR:
		sysclk_enable_pba_module(SYSCLK_GLOC);
    350e:	f04f 000f 	mov.w	r0, #15
    3512:	f642 62d1 	movw	r2, #11985	; 0x2ed1
    3516:	f2c0 0200 	movt	r2, #0
    351a:	4790      	blx	r2
		break;
    351c:	bd08      	pop	{r3, pc}

	case ABDACB_ADDR:
		sysclk_enable_pba_module(SYSCLK_ABDACB);
    351e:	f04f 0010 	mov.w	r0, #16
    3522:	f642 61d1 	movw	r1, #11985	; 0x2ed1
    3526:	f2c0 0100 	movt	r1, #0
    352a:	4788      	blx	r1
		break;
    352c:	bd08      	pop	{r3, pc}

	case TRNG_ADDR:
		sysclk_enable_pba_module(SYSCLK_TRNG);
    352e:	f04f 0011 	mov.w	r0, #17
    3532:	f642 61d1 	movw	r1, #11985	; 0x2ed1
    3536:	f2c0 0100 	movt	r1, #0
    353a:	4788      	blx	r1
		break;
    353c:	bd08      	pop	{r3, pc}

	case PARC_ADDR:
		sysclk_enable_pba_module(SYSCLK_PARC);
    353e:	f04f 0012 	mov.w	r0, #18
    3542:	f642 63d1 	movw	r3, #11985	; 0x2ed1
    3546:	f2c0 0300 	movt	r3, #0
    354a:	4798      	blx	r3
		break;
    354c:	bd08      	pop	{r3, pc}

	case CATB_ADDR:
		sysclk_enable_pba_module(SYSCLK_CATB);
    354e:	f04f 0013 	mov.w	r0, #19
    3552:	f642 62d1 	movw	r2, #11985	; 0x2ed1
    3556:	f2c0 0200 	movt	r2, #0
    355a:	4790      	blx	r2
		break;
    355c:	bd08      	pop	{r3, pc}

	case TWIM2_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM2);
    355e:	f04f 0015 	mov.w	r0, #21
    3562:	f642 61d1 	movw	r1, #11985	; 0x2ed1
    3566:	f2c0 0100 	movt	r1, #0
    356a:	4788      	blx	r1
		break;
    356c:	bd08      	pop	{r3, pc}

	case TWIM3_ADDR:
		sysclk_enable_pba_module(SYSCLK_TWIM3);
    356e:	f04f 0016 	mov.w	r0, #22
    3572:	f642 63d1 	movw	r3, #11985	; 0x2ed1
    3576:	f2c0 0300 	movt	r3, #0
    357a:	4798      	blx	r3
		break;
    357c:	bd08      	pop	{r3, pc}

	case LCDCA_ADDR:
		sysclk_enable_pba_module(SYSCLK_LCDCA);
    357e:	f04f 0017 	mov.w	r0, #23
    3582:	f642 62d1 	movw	r2, #11985	; 0x2ed1
    3586:	f2c0 0200 	movt	r2, #0
    358a:	4790      	blx	r2
		break;
    358c:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    358e:	f04f 0001 	mov.w	r0, #1
    3592:	4601      	mov	r1, r0
    3594:	f642 53fd 	movw	r3, #11773	; 0x2dfd
    3598:	f2c0 0300 	movt	r3, #0
    359c:	4798      	blx	r3

	case HFLASHC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HFLASHC_DATA);
		sysclk_enable_pbb_module(SYSCLK_HFLASHC_REGS);
    359e:	f04f 0000 	mov.w	r0, #0
    35a2:	f642 7191 	movw	r1, #12177	; 0x2f91
    35a6:	f2c0 0100 	movt	r1, #0
    35aa:	4788      	blx	r1
		break;
    35ac:	bd08      	pop	{r3, pc}
    35ae:	f04f 0001 	mov.w	r0, #1
    35b2:	f04f 0102 	mov.w	r1, #2
    35b6:	f642 53fd 	movw	r3, #11773	; 0x2dfd
    35ba:	f2c0 0300 	movt	r3, #0
    35be:	4798      	blx	r3

	case HCACHE_ADDR:
		sysclk_enable_hsb_module(SYSCLK_HRAMC1_DATA);
		sysclk_enable_pbb_module(SYSCLK_HRAMC1_REGS);
    35c0:	f04f 0001 	mov.w	r0, #1
    35c4:	f642 7291 	movw	r2, #12177	; 0x2f91
    35c8:	f2c0 0200 	movt	r2, #0
    35cc:	4790      	blx	r2
		break;
    35ce:	bd08      	pop	{r3, pc}

	case HMATRIX_ADDR:
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
    35d0:	f04f 0002 	mov.w	r0, #2
    35d4:	f642 7191 	movw	r1, #12177	; 0x2f91
    35d8:	f2c0 0100 	movt	r1, #0
    35dc:	4788      	blx	r1
		break;
    35de:	bd08      	pop	{r3, pc}
    35e0:	f04f 0001 	mov.w	r0, #1
    35e4:	f04f 0100 	mov.w	r1, #0
    35e8:	f642 53fd 	movw	r3, #11773	; 0x2dfd
    35ec:	f2c0 0300 	movt	r3, #0
    35f0:	4798      	blx	r3

	case PDCA_ADDR:
		sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
		sysclk_enable_pbb_module(SYSCLK_PDCA_PB);
    35f2:	f04f 0003 	mov.w	r0, #3
    35f6:	f642 7291 	movw	r2, #12177	; 0x2f91
    35fa:	f2c0 0200 	movt	r2, #0
    35fe:	4790      	blx	r2
		break;
    3600:	bd08      	pop	{r3, pc}
    3602:	f04f 0001 	mov.w	r0, #1
    3606:	f04f 0104 	mov.w	r1, #4
    360a:	f642 52fd 	movw	r2, #11773	; 0x2dfd
    360e:	f2c0 0200 	movt	r2, #0
    3612:	4790      	blx	r2

	case CRCCU_ADDR:
		sysclk_enable_hsb_module(SYSCLK_CRCCU_DATA);
		sysclk_enable_pbb_module(SYSCLK_CRCCU_REGS);
    3614:	f04f 0004 	mov.w	r0, #4
    3618:	f642 7191 	movw	r1, #12177	; 0x2f91
    361c:	f2c0 0100 	movt	r1, #0
    3620:	4788      	blx	r1
		break;
    3622:	bd08      	pop	{r3, pc}
    3624:	f04f 0001 	mov.w	r0, #1
    3628:	f04f 0103 	mov.w	r1, #3
    362c:	f642 53fd 	movw	r3, #11773	; 0x2dfd
    3630:	f2c0 0300 	movt	r3, #0
    3634:	4798      	blx	r3

	case USBC_ADDR:
		sysclk_enable_hsb_module(SYSCLK_USBC_DATA);
		sysclk_enable_pbb_module(SYSCLK_USBC_REGS);
    3636:	f04f 0005 	mov.w	r0, #5
    363a:	f642 7291 	movw	r2, #12177	; 0x2f91
    363e:	f2c0 0200 	movt	r2, #0
    3642:	4790      	blx	r2
		break;
    3644:	bd08      	pop	{r3, pc}

	case PEVC_ADDR:
		sysclk_enable_pbb_module(SYSCLK_PEVC);
    3646:	f04f 0006 	mov.w	r0, #6
    364a:	f642 7191 	movw	r1, #12177	; 0x2f91
    364e:	f2c0 0100 	movt	r1, #0
    3652:	4788      	blx	r1
		break;
    3654:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbc_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_PBC, module_index);
    3656:	f04f 0004 	mov.w	r0, #4
    365a:	f04f 0100 	mov.w	r1, #0
    365e:	f642 53fd 	movw	r3, #11773	; 0x2dfd
    3662:	f2c0 0300 	movt	r3, #0
    3666:	4798      	blx	r3
    3668:	bd08      	pop	{r3, pc}
    366a:	f04f 0004 	mov.w	r0, #4
    366e:	f04f 0101 	mov.w	r1, #1
    3672:	f642 53fd 	movw	r3, #11773	; 0x2dfd
    3676:	f2c0 0300 	movt	r3, #0
    367a:	4798      	blx	r3
    367c:	bd08      	pop	{r3, pc}
    367e:	f04f 0004 	mov.w	r0, #4
    3682:	f04f 0102 	mov.w	r1, #2
    3686:	f642 53fd 	movw	r3, #11773	; 0x2dfd
    368a:	f2c0 0300 	movt	r3, #0
    368e:	4798      	blx	r3
    3690:	bd08      	pop	{r3, pc}
    3692:	f04f 0004 	mov.w	r0, #4
    3696:	f04f 0103 	mov.w	r1, #3
    369a:	f642 52fd 	movw	r2, #11773	; 0x2dfd
    369e:	f2c0 0200 	movt	r2, #0
    36a2:	4790      	blx	r2
    36a4:	bd08      	pop	{r3, pc}
    36a6:	f04f 0004 	mov.w	r0, #4
    36aa:	4601      	mov	r1, r0
    36ac:	f642 53fd 	movw	r3, #11773	; 0x2dfd
    36b0:	f2c0 0300 	movt	r3, #0
    36b4:	4798      	blx	r3
    36b6:	bd08      	pop	{r3, pc}
 * \brief Enable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pbd_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_PBD, module_index);
    36b8:	f04f 0005 	mov.w	r0, #5
    36bc:	f04f 0100 	mov.w	r1, #0
    36c0:	f642 52fd 	movw	r2, #11773	; 0x2dfd
    36c4:	f2c0 0200 	movt	r2, #0
    36c8:	4790      	blx	r2
    36ca:	bd08      	pop	{r3, pc}
    36cc:	f04f 0005 	mov.w	r0, #5
    36d0:	f04f 0101 	mov.w	r1, #1
    36d4:	f642 53fd 	movw	r3, #11773	; 0x2dfd
    36d8:	f2c0 0300 	movt	r3, #0
    36dc:	4798      	blx	r3
    36de:	bd08      	pop	{r3, pc}
    36e0:	f04f 0005 	mov.w	r0, #5
    36e4:	f04f 0102 	mov.w	r1, #2
    36e8:	f642 52fd 	movw	r2, #11773	; 0x2dfd
    36ec:	f2c0 0200 	movt	r2, #0
    36f0:	4790      	blx	r2
    36f2:	bd08      	pop	{r3, pc}
    36f4:	f04f 0005 	mov.w	r0, #5
    36f8:	f04f 0103 	mov.w	r1, #3
    36fc:	f642 53fd 	movw	r3, #11773	; 0x2dfd
    3700:	f2c0 0300 	movt	r3, #0
    3704:	4798      	blx	r3
    3706:	bd08      	pop	{r3, pc}
    3708:	f04f 0005 	mov.w	r0, #5
    370c:	f04f 0104 	mov.w	r1, #4
    3710:	f642 52fd 	movw	r2, #11773	; 0x2dfd
    3714:	f2c0 0200 	movt	r2, #0
    3718:	4790      	blx	r2
    371a:	bd08      	pop	{r3, pc}
    371c:	f04f 0005 	mov.w	r0, #5
    3720:	4601      	mov	r1, r0
    3722:	f642 53fd 	movw	r3, #11773	; 0x2dfd
    3726:	f2c0 0300 	movt	r3, #0
    372a:	4798      	blx	r3
    372c:	bd08      	pop	{r3, pc}
    372e:	bf00      	nop

00003730 <sysclk_disable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be disabled also.
 *
 * \param module Pointer to the module's base address.
 */
void sysclk_disable_peripheral_clock(const volatile void *module)
{
    3730:	b508      	push	{r3, lr}
	switch ((uintptr_t)module) {
    3732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3736:	f2c4 0307 	movt	r3, #16391	; 0x4007
    373a:	4298      	cmp	r0, r3
    373c:	f000 8231 	beq.w	3ba2 <sysclk_disable_peripheral_clock+0x472>
    3740:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    3744:	f2c4 0107 	movt	r1, #16391	; 0x4007
    3748:	4288      	cmp	r0, r1
    374a:	f200 80bb 	bhi.w	38c4 <sysclk_disable_peripheral_clock+0x194>
    374e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    3752:	f2c4 0202 	movt	r2, #16386	; 0x4002
    3756:	4290      	cmp	r0, r2
    3758:	f000 81cb 	beq.w	3af2 <sysclk_disable_peripheral_clock+0x3c2>
    375c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3760:	f2c4 0302 	movt	r3, #16386	; 0x4002
    3764:	4298      	cmp	r0, r3
    3766:	d851      	bhi.n	380c <sysclk_disable_peripheral_clock+0xdc>
    3768:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    376c:	f2c4 0101 	movt	r1, #16385	; 0x4001
    3770:	4288      	cmp	r0, r1
    3772:	f000 8196 	beq.w	3aa2 <sysclk_disable_peripheral_clock+0x372>
    3776:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    377a:	f2c4 0201 	movt	r2, #16385	; 0x4001
    377e:	4290      	cmp	r0, r2
    3780:	d820      	bhi.n	37c4 <sysclk_disable_peripheral_clock+0x94>
    3782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3786:	f2c4 0300 	movt	r3, #16384	; 0x4000
    378a:	4298      	cmp	r0, r3
    378c:	f000 8171 	beq.w	3a72 <sysclk_disable_peripheral_clock+0x342>
    3790:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    3794:	f2c4 0100 	movt	r1, #16384	; 0x4000
    3798:	4288      	cmp	r0, r1
    379a:	d804      	bhi.n	37a6 <sysclk_disable_peripheral_clock+0x76>
    379c:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    37a0:	f040 82f3 	bne.w	3d8a <sysclk_disable_peripheral_clock+0x65a>
    37a4:	e15d      	b.n	3a62 <sysclk_disable_peripheral_clock+0x332>
    37a6:	f04f 0300 	mov.w	r3, #0
    37aa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    37ae:	4298      	cmp	r0, r3
    37b0:	f000 8167 	beq.w	3a82 <sysclk_disable_peripheral_clock+0x352>
    37b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    37b8:	f2c4 0101 	movt	r1, #16385	; 0x4001
    37bc:	4288      	cmp	r0, r1
    37be:	f040 82e4 	bne.w	3d8a <sysclk_disable_peripheral_clock+0x65a>
    37c2:	e166      	b.n	3a92 <sysclk_disable_peripheral_clock+0x362>
    37c4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    37c8:	f2c4 0201 	movt	r2, #16385	; 0x4001
    37cc:	4290      	cmp	r0, r2
    37ce:	f000 8178 	beq.w	3ac2 <sysclk_disable_peripheral_clock+0x392>
    37d2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    37d6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    37da:	4298      	cmp	r0, r3
    37dc:	d807      	bhi.n	37ee <sysclk_disable_peripheral_clock+0xbe>
    37de:	f44f 4104 	mov.w	r1, #33792	; 0x8400
    37e2:	f2c4 0101 	movt	r1, #16385	; 0x4001
    37e6:	4288      	cmp	r0, r1
    37e8:	f040 82cf 	bne.w	3d8a <sysclk_disable_peripheral_clock+0x65a>
    37ec:	e161      	b.n	3ab2 <sysclk_disable_peripheral_clock+0x382>
    37ee:	f44f 4344 	mov.w	r3, #50176	; 0xc400
    37f2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    37f6:	4298      	cmp	r0, r3
    37f8:	f000 816b 	beq.w	3ad2 <sysclk_disable_peripheral_clock+0x3a2>
    37fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    3800:	f2c4 0102 	movt	r1, #16386	; 0x4002
    3804:	4288      	cmp	r0, r1
    3806:	f040 82c0 	bne.w	3d8a <sysclk_disable_peripheral_clock+0x65a>
    380a:	e16a      	b.n	3ae2 <sysclk_disable_peripheral_clock+0x3b2>
    380c:	f04f 0300 	mov.w	r3, #0
    3810:	f2c4 0304 	movt	r3, #16388	; 0x4004
    3814:	4298      	cmp	r0, r3
    3816:	f000 8194 	beq.w	3b42 <sysclk_disable_peripheral_clock+0x412>
    381a:	f04f 0100 	mov.w	r1, #0
    381e:	f2c4 0104 	movt	r1, #16388	; 0x4004
    3822:	4288      	cmp	r0, r1
    3824:	d823      	bhi.n	386e <sysclk_disable_peripheral_clock+0x13e>
    3826:	f04f 0200 	mov.w	r2, #0
    382a:	f2c4 0203 	movt	r2, #16387	; 0x4003
    382e:	4290      	cmp	r0, r2
    3830:	f000 816f 	beq.w	3b12 <sysclk_disable_peripheral_clock+0x3e2>
    3834:	f04f 0300 	mov.w	r3, #0
    3838:	f2c4 0303 	movt	r3, #16387	; 0x4003
    383c:	4298      	cmp	r0, r3
    383e:	d807      	bhi.n	3850 <sysclk_disable_peripheral_clock+0x120>
    3840:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    3844:	f2c4 0102 	movt	r1, #16386	; 0x4002
    3848:	4288      	cmp	r0, r1
    384a:	f040 829e 	bne.w	3d8a <sysclk_disable_peripheral_clock+0x65a>
    384e:	e158      	b.n	3b02 <sysclk_disable_peripheral_clock+0x3d2>
    3850:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3854:	f2c4 0303 	movt	r3, #16387	; 0x4003
    3858:	4298      	cmp	r0, r3
    385a:	f000 8162 	beq.w	3b22 <sysclk_disable_peripheral_clock+0x3f2>
    385e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
    3862:	f2c4 0103 	movt	r1, #16387	; 0x4003
    3866:	4288      	cmp	r0, r1
    3868:	f040 828f 	bne.w	3d8a <sysclk_disable_peripheral_clock+0x65a>
    386c:	e161      	b.n	3b32 <sysclk_disable_peripheral_clock+0x402>
    386e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    3872:	f2c4 0206 	movt	r2, #16390	; 0x4006
    3876:	4290      	cmp	r0, r2
    3878:	f000 817b 	beq.w	3b72 <sysclk_disable_peripheral_clock+0x442>
    387c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3880:	f2c4 0306 	movt	r3, #16390	; 0x4006
    3884:	4298      	cmp	r0, r3
    3886:	d80e      	bhi.n	38a6 <sysclk_disable_peripheral_clock+0x176>
    3888:	f04f 0100 	mov.w	r1, #0
    388c:	f2c4 0106 	movt	r1, #16390	; 0x4006
    3890:	4288      	cmp	r0, r1
    3892:	f000 815e 	beq.w	3b52 <sysclk_disable_peripheral_clock+0x422>
    3896:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    389a:	f2c4 0206 	movt	r2, #16390	; 0x4006
    389e:	4290      	cmp	r0, r2
    38a0:	f040 8273 	bne.w	3d8a <sysclk_disable_peripheral_clock+0x65a>
    38a4:	e15d      	b.n	3b62 <sysclk_disable_peripheral_clock+0x432>
    38a6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    38aa:	f2c4 0206 	movt	r2, #16390	; 0x4006
    38ae:	4290      	cmp	r0, r2
    38b0:	f000 8167 	beq.w	3b82 <sysclk_disable_peripheral_clock+0x452>
    38b4:	f04f 0300 	mov.w	r3, #0
    38b8:	f2c4 0307 	movt	r3, #16391	; 0x4007
    38bc:	4298      	cmp	r0, r3
    38be:	f040 8264 	bne.w	3d8a <sysclk_disable_peripheral_clock+0x65a>
    38c2:	e166      	b.n	3b92 <sysclk_disable_peripheral_clock+0x462>
    38c4:	f04f 0300 	mov.w	r3, #0
    38c8:	f2c4 030e 	movt	r3, #16398	; 0x400e
    38cc:	4298      	cmp	r0, r3
    38ce:	f000 81dc 	beq.w	3c8a <sysclk_disable_peripheral_clock+0x55a>
    38d2:	f04f 0100 	mov.w	r1, #0
    38d6:	f2c4 010e 	movt	r1, #16398	; 0x400e
    38da:	4288      	cmp	r0, r1
    38dc:	d85b      	bhi.n	3996 <sysclk_disable_peripheral_clock+0x266>
    38de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    38e2:	f2c4 020a 	movt	r2, #16394	; 0x400a
    38e6:	4290      	cmp	r0, r2
    38e8:	f000 818c 	beq.w	3c04 <sysclk_disable_peripheral_clock+0x4d4>
    38ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    38f0:	f2c4 030a 	movt	r3, #16394	; 0x400a
    38f4:	4298      	cmp	r0, r3
    38f6:	d823      	bhi.n	3940 <sysclk_disable_peripheral_clock+0x210>
    38f8:	f04f 0100 	mov.w	r1, #0
    38fc:	f2c4 0108 	movt	r1, #16392	; 0x4008
    3900:	4288      	cmp	r0, r1
    3902:	f000 815e 	beq.w	3bc2 <sysclk_disable_peripheral_clock+0x492>
    3906:	f04f 0200 	mov.w	r2, #0
    390a:	f2c4 0208 	movt	r2, #16392	; 0x4008
    390e:	4290      	cmp	r0, r2
    3910:	d807      	bhi.n	3922 <sysclk_disable_peripheral_clock+0x1f2>
    3912:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3916:	f2c4 0307 	movt	r3, #16391	; 0x4007
    391a:	4298      	cmp	r0, r3
    391c:	f040 8235 	bne.w	3d8a <sysclk_disable_peripheral_clock+0x65a>
    3920:	e147      	b.n	3bb2 <sysclk_disable_peripheral_clock+0x482>
    3922:	f04f 0200 	mov.w	r2, #0
    3926:	f2c4 020a 	movt	r2, #16394	; 0x400a
    392a:	4290      	cmp	r0, r2
    392c:	f000 8151 	beq.w	3bd2 <sysclk_disable_peripheral_clock+0x4a2>
    3930:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3934:	f2c4 030a 	movt	r3, #16394	; 0x400a
    3938:	4298      	cmp	r0, r3
    393a:	f040 8226 	bne.w	3d8a <sysclk_disable_peripheral_clock+0x65a>
    393e:	e150      	b.n	3be2 <sysclk_disable_peripheral_clock+0x4b2>
    3940:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    3944:	f2c4 010a 	movt	r1, #16394	; 0x400a
    3948:	4288      	cmp	r0, r1
    394a:	f000 8185 	beq.w	3c58 <sysclk_disable_peripheral_clock+0x528>
    394e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    3952:	f2c4 030a 	movt	r3, #16394	; 0x400a
    3956:	4298      	cmp	r0, r3
    3958:	d80e      	bhi.n	3978 <sysclk_disable_peripheral_clock+0x248>
    395a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    395e:	f2c4 020a 	movt	r2, #16394	; 0x400a
    3962:	4290      	cmp	r0, r2
    3964:	f000 8156 	beq.w	3c14 <sysclk_disable_peripheral_clock+0x4e4>
    3968:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    396c:	f2c4 010a 	movt	r1, #16394	; 0x400a
    3970:	4288      	cmp	r0, r1
    3972:	f040 820a 	bne.w	3d8a <sysclk_disable_peripheral_clock+0x65a>
    3976:	e15e      	b.n	3c36 <sysclk_disable_peripheral_clock+0x506>
    3978:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
    397c:	f2c4 020a 	movt	r2, #16394	; 0x400a
    3980:	4290      	cmp	r0, r2
    3982:	f000 817a 	beq.w	3c7a <sysclk_disable_peripheral_clock+0x54a>
    3986:	f04f 0300 	mov.w	r3, #0
    398a:	f2c4 030b 	movt	r3, #16395	; 0x400b
    398e:	4298      	cmp	r0, r3
    3990:	f040 81fb 	bne.w	3d8a <sysclk_disable_peripheral_clock+0x65a>
    3994:	e05b      	b.n	3a4e <sysclk_disable_peripheral_clock+0x31e>
    3996:	f04f 0300 	mov.w	r3, #0
    399a:	f2c4 030f 	movt	r3, #16399	; 0x400f
    399e:	4298      	cmp	r0, r3
    39a0:	f000 81a4 	beq.w	3cec <sysclk_disable_peripheral_clock+0x5bc>
    39a4:	f04f 0200 	mov.w	r2, #0
    39a8:	f2c4 020f 	movt	r2, #16399	; 0x400f
    39ac:	4290      	cmp	r0, r2
    39ae:	d823      	bhi.n	39f8 <sysclk_disable_peripheral_clock+0x2c8>
    39b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    39b4:	f2c4 010e 	movt	r1, #16398	; 0x400e
    39b8:	4288      	cmp	r0, r1
    39ba:	f000 817a 	beq.w	3cb2 <sysclk_disable_peripheral_clock+0x582>
    39be:	f44f 6300 	mov.w	r3, #2048	; 0x800
    39c2:	f2c4 030e 	movt	r3, #16398	; 0x400e
    39c6:	4298      	cmp	r0, r3
    39c8:	d807      	bhi.n	39da <sysclk_disable_peripheral_clock+0x2aa>
    39ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
    39ce:	f2c4 020e 	movt	r2, #16398	; 0x400e
    39d2:	4290      	cmp	r0, r2
    39d4:	f040 81d9 	bne.w	3d8a <sysclk_disable_peripheral_clock+0x65a>
    39d8:	e161      	b.n	3c9e <sysclk_disable_peripheral_clock+0x56e>
    39da:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    39de:	f2c4 010e 	movt	r1, #16398	; 0x400e
    39e2:	4288      	cmp	r0, r1
    39e4:	f000 816f 	beq.w	3cc6 <sysclk_disable_peripheral_clock+0x596>
    39e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    39ec:	f2c4 020e 	movt	r2, #16398	; 0x400e
    39f0:	4290      	cmp	r0, r2
    39f2:	f040 81ca 	bne.w	3d8a <sysclk_disable_peripheral_clock+0x65a>
    39f6:	e170      	b.n	3cda <sysclk_disable_peripheral_clock+0x5aa>
    39f8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    39fc:	f2c4 010f 	movt	r1, #16399	; 0x400f
    3a00:	4288      	cmp	r0, r1
    3a02:	f000 8191 	beq.w	3d28 <sysclk_disable_peripheral_clock+0x5f8>
    3a06:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    3a0a:	f2c4 020f 	movt	r2, #16399	; 0x400f
    3a0e:	4290      	cmp	r0, r2
    3a10:	d80e      	bhi.n	3a30 <sysclk_disable_peripheral_clock+0x300>
    3a12:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3a16:	f2c4 030f 	movt	r3, #16399	; 0x400f
    3a1a:	4298      	cmp	r0, r3
    3a1c:	f000 8170 	beq.w	3d00 <sysclk_disable_peripheral_clock+0x5d0>
    3a20:	f44f 6100 	mov.w	r1, #2048	; 0x800
    3a24:	f2c4 010f 	movt	r1, #16399	; 0x400f
    3a28:	4288      	cmp	r0, r1
    3a2a:	f040 81ae 	bne.w	3d8a <sysclk_disable_peripheral_clock+0x65a>
    3a2e:	e171      	b.n	3d14 <sysclk_disable_peripheral_clock+0x5e4>
    3a30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    3a34:	f2c4 010f 	movt	r1, #16399	; 0x400f
    3a38:	4288      	cmp	r0, r1
    3a3a:	f000 817f 	beq.w	3d3c <sysclk_disable_peripheral_clock+0x60c>
    3a3e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
    3a42:	f2c4 020f 	movt	r2, #16399	; 0x400f
    3a46:	4290      	cmp	r0, r2
    3a48:	f040 819f 	bne.w	3d8a <sysclk_disable_peripheral_clock+0x65a>
    3a4c:	e180      	b.n	3d50 <sysclk_disable_peripheral_clock+0x620>
 * \brief Disable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_HSB, module_index);
    3a4e:	f04f 0001 	mov.w	r0, #1
    3a52:	f04f 0109 	mov.w	r1, #9
    3a56:	f642 6265 	movw	r2, #11877	; 0x2e65
    3a5a:	f2c0 0200 	movt	r2, #0
    3a5e:	4790      	blx	r2
    3a60:	e17e      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>
	case AESA_ADDR:
		sysclk_disable_hsb_module(SYSCLK_AESA_HSB);
		break;

	case IISC_ADDR:
		sysclk_disable_pba_module(SYSCLK_IISC);
    3a62:	f04f 0000 	mov.w	r0, #0
    3a66:	f642 7231 	movw	r2, #12081	; 0x2f31
    3a6a:	f2c0 0200 	movt	r2, #0
    3a6e:	4790      	blx	r2
		break;
    3a70:	e176      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>

	case SPI_ADDR:
		sysclk_disable_pba_module(SYSCLK_SPI);
    3a72:	f04f 0001 	mov.w	r0, #1
    3a76:	f642 7131 	movw	r1, #12081	; 0x2f31
    3a7a:	f2c0 0100 	movt	r1, #0
    3a7e:	4788      	blx	r1
		break;
    3a80:	e16e      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>

	case TC0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TC0);
    3a82:	f04f 0002 	mov.w	r0, #2
    3a86:	f642 7331 	movw	r3, #12081	; 0x2f31
    3a8a:	f2c0 0300 	movt	r3, #0
    3a8e:	4798      	blx	r3
		break;
    3a90:	e166      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>

	case TC1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TC1);
    3a92:	f04f 0003 	mov.w	r0, #3
    3a96:	f642 7231 	movw	r2, #12081	; 0x2f31
    3a9a:	f2c0 0200 	movt	r2, #0
    3a9e:	4790      	blx	r2
		break;
    3aa0:	e15e      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>

	case TWIM0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM0);
    3aa2:	f04f 0004 	mov.w	r0, #4
    3aa6:	f642 7231 	movw	r2, #12081	; 0x2f31
    3aaa:	f2c0 0200 	movt	r2, #0
    3aae:	4790      	blx	r2
		break;
    3ab0:	e156      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>

	case TWIS0_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIS0);
    3ab2:	f04f 0005 	mov.w	r0, #5
    3ab6:	f642 7231 	movw	r2, #12081	; 0x2f31
    3aba:	f2c0 0200 	movt	r2, #0
    3abe:	4790      	blx	r2
		break;
    3ac0:	e14e      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>

	case TWIM1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM1);
    3ac2:	f04f 0006 	mov.w	r0, #6
    3ac6:	f642 7131 	movw	r1, #12081	; 0x2f31
    3aca:	f2c0 0100 	movt	r1, #0
    3ace:	4788      	blx	r1
		break;
    3ad0:	e146      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>

	case TWIS1_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIS1);
    3ad2:	f04f 0007 	mov.w	r0, #7
    3ad6:	f642 7331 	movw	r3, #12081	; 0x2f31
    3ada:	f2c0 0300 	movt	r3, #0
    3ade:	4798      	blx	r3
		break;
    3ae0:	e13e      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>

	case USART0_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART0);
    3ae2:	f04f 0008 	mov.w	r0, #8
    3ae6:	f642 7231 	movw	r2, #12081	; 0x2f31
    3aea:	f2c0 0200 	movt	r2, #0
    3aee:	4790      	blx	r2
		break;
    3af0:	e136      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>

	case USART1_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART1);
    3af2:	f04f 0009 	mov.w	r0, #9
    3af6:	f642 7231 	movw	r2, #12081	; 0x2f31
    3afa:	f2c0 0200 	movt	r2, #0
    3afe:	4790      	blx	r2
		break;
    3b00:	e12e      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>

	case USART2_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART2);
    3b02:	f04f 000a 	mov.w	r0, #10
    3b06:	f642 7231 	movw	r2, #12081	; 0x2f31
    3b0a:	f2c0 0200 	movt	r2, #0
    3b0e:	4790      	blx	r2
		break;
    3b10:	e126      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>

	case USART3_ADDR:
		sysclk_disable_pba_module(SYSCLK_USART3);
    3b12:	f04f 000b 	mov.w	r0, #11
    3b16:	f642 7131 	movw	r1, #12081	; 0x2f31
    3b1a:	f2c0 0100 	movt	r1, #0
    3b1e:	4788      	blx	r1
		break;
    3b20:	e11e      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>

	case ADCIFE_ADDR:
		sysclk_disable_pba_module(SYSCLK_ADCIFE);
    3b22:	f04f 000c 	mov.w	r0, #12
    3b26:	f642 7331 	movw	r3, #12081	; 0x2f31
    3b2a:	f2c0 0300 	movt	r3, #0
    3b2e:	4798      	blx	r3
		break;
    3b30:	e116      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>

	case DACC_ADDR:
		sysclk_disable_pba_module(SYSCLK_DACC);
    3b32:	f04f 000d 	mov.w	r0, #13
    3b36:	f642 7231 	movw	r2, #12081	; 0x2f31
    3b3a:	f2c0 0200 	movt	r2, #0
    3b3e:	4790      	blx	r2
		break;
    3b40:	e10e      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>

	case ACIFC_ADDR:
		sysclk_disable_pba_module(SYSCLK_ACIFC);
    3b42:	f04f 000e 	mov.w	r0, #14
    3b46:	f642 7131 	movw	r1, #12081	; 0x2f31
    3b4a:	f2c0 0100 	movt	r1, #0
    3b4e:	4788      	blx	r1
		break;
    3b50:	e106      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>

	case GLOC_ADDR:
		sysclk_disable_pba_module(SYSCLK_GLOC);
    3b52:	f04f 000f 	mov.w	r0, #15
    3b56:	f642 7131 	movw	r1, #12081	; 0x2f31
    3b5a:	f2c0 0100 	movt	r1, #0
    3b5e:	4788      	blx	r1
		break;
    3b60:	e0fe      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>

	case ABDACB_ADDR:
		sysclk_disable_pba_module(SYSCLK_ABDACB);
    3b62:	f04f 0010 	mov.w	r0, #16
    3b66:	f642 7331 	movw	r3, #12081	; 0x2f31
    3b6a:	f2c0 0300 	movt	r3, #0
    3b6e:	4798      	blx	r3
		break;
    3b70:	e0f6      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>

	case TRNG_ADDR:
		sysclk_disable_pba_module(SYSCLK_TRNG);
    3b72:	f04f 0011 	mov.w	r0, #17
    3b76:	f642 7331 	movw	r3, #12081	; 0x2f31
    3b7a:	f2c0 0300 	movt	r3, #0
    3b7e:	4798      	blx	r3
		break;
    3b80:	e0ee      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>

	case PARC_ADDR:
		sysclk_disable_pba_module(SYSCLK_PARC);
    3b82:	f04f 0012 	mov.w	r0, #18
    3b86:	f642 7231 	movw	r2, #12081	; 0x2f31
    3b8a:	f2c0 0200 	movt	r2, #0
    3b8e:	4790      	blx	r2
		break;
    3b90:	e0e6      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>

	case CATB_ADDR:
		sysclk_disable_pba_module(SYSCLK_CATB);
    3b92:	f04f 0013 	mov.w	r0, #19
    3b96:	f642 7131 	movw	r1, #12081	; 0x2f31
    3b9a:	f2c0 0100 	movt	r1, #0
    3b9e:	4788      	blx	r1
		break;
    3ba0:	e0de      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>

	case TWIM2_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM2);
    3ba2:	f04f 0015 	mov.w	r0, #21
    3ba6:	f642 7131 	movw	r1, #12081	; 0x2f31
    3baa:	f2c0 0100 	movt	r1, #0
    3bae:	4788      	blx	r1
		break;
    3bb0:	e0d6      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>

	case TWIM3_ADDR:
		sysclk_disable_pba_module(SYSCLK_TWIM3);
    3bb2:	f04f 0016 	mov.w	r0, #22
    3bb6:	f642 7131 	movw	r1, #12081	; 0x2f31
    3bba:	f2c0 0100 	movt	r1, #0
    3bbe:	4788      	blx	r1
		break;
    3bc0:	e0ce      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>

	case LCDCA_ADDR:
		sysclk_disable_pba_module(SYSCLK_LCDCA);
    3bc2:	f04f 0017 	mov.w	r0, #23
    3bc6:	f642 7231 	movw	r2, #12081	; 0x2f31
    3bca:	f2c0 0200 	movt	r2, #0
    3bce:	4790      	blx	r2
		break;
    3bd0:	e0c6      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>

	case HFLASHC_ADDR:
		sysclk_disable_pbb_module(SYSCLK_HFLASHC_REGS);
    3bd2:	f04f 0000 	mov.w	r0, #0
    3bd6:	f642 73f1 	movw	r3, #12273	; 0x2ff1
    3bda:	f2c0 0300 	movt	r3, #0
    3bde:	4798      	blx	r3
		break;
    3be0:	e0be      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>
    3be2:	f04f 0001 	mov.w	r0, #1
    3be6:	f04f 0102 	mov.w	r1, #2
    3bea:	f642 6265 	movw	r2, #11877	; 0x2e65
    3bee:	f2c0 0200 	movt	r2, #0
    3bf2:	4790      	blx	r2

	case HCACHE_ADDR:
		sysclk_disable_hsb_module(SYSCLK_HRAMC1_DATA);
		sysclk_disable_pbb_module(SYSCLK_HRAMC1_REGS);
    3bf4:	f04f 0001 	mov.w	r0, #1
    3bf8:	f642 71f1 	movw	r1, #12273	; 0x2ff1
    3bfc:	f2c0 0100 	movt	r1, #0
    3c00:	4788      	blx	r1
		break;
    3c02:	e0ad      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>

	case HMATRIX_ADDR:
		sysclk_disable_pbb_module(SYSCLK_HMATRIX);
    3c04:	f04f 0002 	mov.w	r0, #2
    3c08:	f642 71f1 	movw	r1, #12273	; 0x2ff1
    3c0c:	f2c0 0100 	movt	r1, #0
    3c10:	4788      	blx	r1
		break;
    3c12:	e0a5      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>
    3c14:	f04f 0001 	mov.w	r0, #1
    3c18:	f04f 0100 	mov.w	r1, #0
    3c1c:	f642 6365 	movw	r3, #11877	; 0x2e65
    3c20:	f2c0 0300 	movt	r3, #0
    3c24:	4798      	blx	r3

	case PDCA_ADDR:
		sysclk_disable_hsb_module(SYSCLK_PDCA_HSB);
		sysclk_disable_pbb_module(SYSCLK_PDCA_PB);
    3c26:	f04f 0003 	mov.w	r0, #3
    3c2a:	f642 71f1 	movw	r1, #12273	; 0x2ff1
    3c2e:	f2c0 0100 	movt	r1, #0
    3c32:	4788      	blx	r1
		break;
    3c34:	e094      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>
    3c36:	f04f 0001 	mov.w	r0, #1
    3c3a:	f04f 0104 	mov.w	r1, #4
    3c3e:	f642 6365 	movw	r3, #11877	; 0x2e65
    3c42:	f2c0 0300 	movt	r3, #0
    3c46:	4798      	blx	r3

	case CRCCU_ADDR:
		sysclk_disable_hsb_module(SYSCLK_CRCCU_DATA);
		sysclk_disable_pbb_module(SYSCLK_CRCCU_REGS);
    3c48:	f04f 0004 	mov.w	r0, #4
    3c4c:	f642 72f1 	movw	r2, #12273	; 0x2ff1
    3c50:	f2c0 0200 	movt	r2, #0
    3c54:	4790      	blx	r2
		break;
    3c56:	e083      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>
    3c58:	f04f 0001 	mov.w	r0, #1
    3c5c:	f04f 0103 	mov.w	r1, #3
    3c60:	f642 6365 	movw	r3, #11877	; 0x2e65
    3c64:	f2c0 0300 	movt	r3, #0
    3c68:	4798      	blx	r3

	case USBC_ADDR:
		sysclk_disable_hsb_module(SYSCLK_USBC_DATA);
		sysclk_disable_pbb_module(SYSCLK_USBC_REGS);
    3c6a:	f04f 0005 	mov.w	r0, #5
    3c6e:	f642 72f1 	movw	r2, #12273	; 0x2ff1
    3c72:	f2c0 0200 	movt	r2, #0
    3c76:	4790      	blx	r2
		break;
    3c78:	e072      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>

	case PEVC_ADDR:
		sysclk_disable_pbb_module(SYSCLK_PEVC);
    3c7a:	f04f 0006 	mov.w	r0, #6
    3c7e:	f642 71f1 	movw	r1, #12273	; 0x2ff1
    3c82:	f2c0 0100 	movt	r1, #0
    3c86:	4788      	blx	r1
		break;
    3c88:	e06a      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>
 * \brief Disable a module clock derived from the PBC clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbc_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_PBC, module_index);
    3c8a:	f04f 0004 	mov.w	r0, #4
    3c8e:	f04f 0100 	mov.w	r1, #0
    3c92:	f642 6365 	movw	r3, #11877	; 0x2e65
    3c96:	f2c0 0300 	movt	r3, #0
    3c9a:	4798      	blx	r3
    3c9c:	e060      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>
    3c9e:	f04f 0004 	mov.w	r0, #4
    3ca2:	f04f 0101 	mov.w	r1, #1
    3ca6:	f642 6365 	movw	r3, #11877	; 0x2e65
    3caa:	f2c0 0300 	movt	r3, #0
    3cae:	4798      	blx	r3
    3cb0:	e056      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>
    3cb2:	f04f 0004 	mov.w	r0, #4
    3cb6:	f04f 0102 	mov.w	r1, #2
    3cba:	f642 6365 	movw	r3, #11877	; 0x2e65
    3cbe:	f2c0 0300 	movt	r3, #0
    3cc2:	4798      	blx	r3
    3cc4:	e04c      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>
    3cc6:	f04f 0004 	mov.w	r0, #4
    3cca:	f04f 0103 	mov.w	r1, #3
    3cce:	f642 6265 	movw	r2, #11877	; 0x2e65
    3cd2:	f2c0 0200 	movt	r2, #0
    3cd6:	4790      	blx	r2
    3cd8:	e042      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>
    3cda:	f04f 0004 	mov.w	r0, #4
    3cde:	4601      	mov	r1, r0
    3ce0:	f642 6365 	movw	r3, #11877	; 0x2e65
    3ce4:	f2c0 0300 	movt	r3, #0
    3ce8:	4798      	blx	r3
    3cea:	e039      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>
 * \brief Disable a module clock derived from the PBD clock
 * \param module_index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_disable_pbd_module(uint32_t module_index)
{
	sysclk_priv_disable_module(PM_CLK_GRP_PBD, module_index);
    3cec:	f04f 0005 	mov.w	r0, #5
    3cf0:	f04f 0100 	mov.w	r1, #0
    3cf4:	f642 6265 	movw	r2, #11877	; 0x2e65
    3cf8:	f2c0 0200 	movt	r2, #0
    3cfc:	4790      	blx	r2
    3cfe:	e02f      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>
    3d00:	f04f 0005 	mov.w	r0, #5
    3d04:	f04f 0101 	mov.w	r1, #1
    3d08:	f642 6365 	movw	r3, #11877	; 0x2e65
    3d0c:	f2c0 0300 	movt	r3, #0
    3d10:	4798      	blx	r3
    3d12:	e025      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>
    3d14:	f04f 0005 	mov.w	r0, #5
    3d18:	f04f 0102 	mov.w	r1, #2
    3d1c:	f642 6265 	movw	r2, #11877	; 0x2e65
    3d20:	f2c0 0200 	movt	r2, #0
    3d24:	4790      	blx	r2
    3d26:	e01b      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>
    3d28:	f04f 0005 	mov.w	r0, #5
    3d2c:	f04f 0103 	mov.w	r1, #3
    3d30:	f642 6365 	movw	r3, #11877	; 0x2e65
    3d34:	f2c0 0300 	movt	r3, #0
    3d38:	4798      	blx	r3
    3d3a:	e011      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>
    3d3c:	f04f 0005 	mov.w	r0, #5
    3d40:	f04f 0104 	mov.w	r1, #4
    3d44:	f642 6265 	movw	r2, #11877	; 0x2e65
    3d48:	f2c0 0200 	movt	r2, #0
    3d4c:	4790      	blx	r2
    3d4e:	e007      	b.n	3d60 <sysclk_disable_peripheral_clock+0x630>
    3d50:	f04f 0005 	mov.w	r0, #5
    3d54:	4601      	mov	r1, r0
    3d56:	f642 6365 	movw	r3, #11877	; 0x2e65
    3d5a:	f2c0 0300 	movt	r3, #0
    3d5e:	4798      	blx	r3
	}

	// Disable PBA divided clock if possible.
#define PBADIV_CLKSRC_MASK (SYSCLK_TC0 | SYSCLK_TC1 \
		| SYSCLK_USART0 | SYSCLK_USART1 | SYSCLK_USART2 | SYSCLK_USART3)
	if ((PM->PM_PBAMASK & PBADIV_CLKSRC_MASK) == 0) {
    3d60:	f04f 0000 	mov.w	r0, #0
    3d64:	f2c4 000e 	movt	r0, #16398	; 0x400e
    3d68:	6a82      	ldr	r2, [r0, #40]	; 0x28
    3d6a:	f012 0f0b 	tst.w	r2, #11
    3d6e:	d10c      	bne.n	3d8a <sysclk_disable_peripheral_clock+0x65a>
 */
static inline void sysclk_disable_pba_divmask(uint32_t mask)
{
	uint32_t temp_mask;

	temp_mask = PM->PM_PBADIVMASK;
    3d70:	f04f 0300 	mov.w	r3, #0
    3d74:	f2c4 030e 	movt	r3, #16398	; 0x400e
    3d78:	6c19      	ldr	r1, [r3, #64]	; 0x40
	temp_mask &= ~mask;
    3d7a:	f021 007f 	bic.w	r0, r1, #127	; 0x7f
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    3d7e:	f04f 0240 	mov.w	r2, #64	; 0x40
    3d82:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    3d86:	659a      	str	r2, [r3, #88]	; 0x58
			| PM_UNLOCK_ADDR((uint32_t)&PM->PM_PBADIVMASK - (uint32_t)PM);
	PM->PM_PBADIVMASK = temp_mask;
    3d88:	6418      	str	r0, [r3, #64]	; 0x40
    3d8a:	bd08      	pop	{r3, pc}

00003d8c <sysclk_set_source>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3d8c:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3d90:	b672      	cpsid	i
    3d92:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    3d96:	f240 03d4 	movw	r3, #212	; 0xd4
    3d9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    3d9e:	f04f 0100 	mov.w	r1, #0
    3da2:	7019      	strb	r1, [r3, #0]
{
	irqflags_t flags;
	Assert(src <= SYSCLK_SRC_RC1M);

	flags = cpu_irq_save();
	PM->PM_UNLOCK = PM_UNLOCK_KEY(0xAAu)
    3da4:	460b      	mov	r3, r1
    3da6:	f2c4 030e 	movt	r3, #16398	; 0x400e
    3daa:	f04f 412a 	mov.w	r1, #2852126720	; 0xaa000000
    3dae:	6599      	str	r1, [r3, #88]	; 0x58
		| PM_UNLOCK_ADDR((uint32_t)&PM->PM_MCCTRL - (uint32_t)PM);
	PM->PM_MCCTRL = src;
    3db0:	6018      	str	r0, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3db2:	b94a      	cbnz	r2, 3dc8 <sysclk_set_source+0x3c>
		cpu_irq_enable();
    3db4:	f240 00d4 	movw	r0, #212	; 0xd4
    3db8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3dbc:	f04f 0201 	mov.w	r2, #1
    3dc0:	7002      	strb	r2, [r0, #0]
    3dc2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3dc6:	b662      	cpsie	i
    3dc8:	4770      	bx	lr
    3dca:	bf00      	nop

00003dcc <sysclk_enable_usb>:
 * \pre The USB generic clock must be configured to 48MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
    3dcc:	b500      	push	{lr}
    3dce:	b083      	sub	sp, #12
	// Note: the SYSCLK_PBB_BRIDGE clock is enabled by
	// sysclk_enable_pbb_module().
	sysclk_enable_pbb_module(SYSCLK_USBC_REGS);
    3dd0:	f04f 0005 	mov.w	r0, #5
    3dd4:	f642 7391 	movw	r3, #12177	; 0x2f91
    3dd8:	f2c0 0300 	movt	r3, #0
    3ddc:	4798      	blx	r3
 * \brief Enable a module clock derived from the HSB clock
 * \param module_index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(uint32_t module_index)
{
	sysclk_priv_enable_module(PM_CLK_GRP_HSB, module_index);
    3dde:	f04f 0001 	mov.w	r0, #1
    3de2:	f04f 0103 	mov.w	r1, #3
    3de6:	f642 52fd 	movw	r2, #11773	; 0x2dfd
    3dea:	f2c0 0200 	movt	r2, #0
    3dee:	4790      	blx	r2
extern void pll_disable(uint32_t pll_id);

static inline bool pll_is_locked(uint32_t pll_id)
{
	Assert(pll_id < NR_PLLS);
	return !!(SCIF->SCIF_PCLKSR & (1U << (6 + pll_id)));
    3df0:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3df4:	f2c4 000e 	movt	r0, #16398	; 0x400e
    3df8:	6941      	ldr	r1, [r0, #20]

static inline void pll_enable_config_defaults(uint32_t pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    3dfa:	f011 0f40 	tst.w	r1, #64	; 0x40
    3dfe:	d12a      	bne.n	3e56 <sysclk_enable_usb+0x8a>
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
    3e00:	f44f 6300 	mov.w	r3, #2048	; 0x800
    3e04:	f2c4 030e 	movt	r3, #16398	; 0x400e
    3e08:	695a      	ldr	r2, [r3, #20]

static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
    3e0a:	f012 0f01 	tst.w	r2, #1
    3e0e:	d10c      	bne.n	3e2a <sysclk_enable_usb+0x5e>
static inline void osc_enable(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
    3e10:	f642 5005 	movw	r0, #11525	; 0x2d05
    3e14:	f2c0 0000 	movt	r0, #0
    3e18:	4780      	blx	r0
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
    3e1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    3e1e:	f2c4 010e 	movt	r1, #16398	; 0x400e
    3e22:	694b      	ldr	r3, [r1, #20]
    3e24:	f013 0f01 	tst.w	r3, #1
    3e28:	d0fb      	beq.n	3e22 <sysclk_enable_usb+0x56>
	}

	Assert(mul > MUL_MIN && mul <= MUL_MAX);
	Assert(divide > DIV_MIN && divide <= DIV_MAX);

	cfg->ctrl |= ((mul - 1) << SCIF_PLL_PLLMUL_Pos)
    3e2a:	f44f 7288 	mov.w	r2, #272	; 0x110
    3e2e:	f6c3 7207 	movt	r2, #16135	; 0x3f07
    3e32:	a802      	add	r0, sp, #8
    3e34:	f840 2d04 	str.w	r2, [r0, #-4]!
#endif
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
    3e38:	f04f 0100 	mov.w	r1, #0
    3e3c:	f642 539d 	movw	r3, #11677	; 0x2d9d
    3e40:	f2c0 0300 	movt	r3, #0
    3e44:	4798      	blx	r3
extern void pll_disable(uint32_t pll_id);

static inline bool pll_is_locked(uint32_t pll_id)
{
	Assert(pll_id < NR_PLLS);
	return !!(SCIF->SCIF_PCLKSR & (1U << (6 + pll_id)));
    3e46:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3e4a:	f2c4 000e 	movt	r0, #16398	; 0x400e
    3e4e:	6941      	ldr	r1, [r0, #20]
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
    3e50:	f011 0f40 	tst.w	r1, #64	; 0x40
    3e54:	d0fb      	beq.n	3e4e <sysclk_enable_usb+0x82>
}

static inline void genclk_enable(const struct genclk_config *cfg,
		uint32_t id)
{
	 SCIF->SCIF_GCCTRL[id].SCIF_GCCTRL = cfg->ctrl | SCIF_GCCTRL_CEN;
    3e56:	f44f 6300 	mov.w	r3, #2048	; 0x800
    3e5a:	f2c4 030e 	movt	r3, #16398	; 0x400e
    3e5e:	f241 0201 	movw	r2, #4097	; 0x1001
    3e62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	sysclk_enable_hsb_module(SYSCLK_USBC_DATA);

	genclk_enable_config(7, CONFIG_USBCLK_SOURCE, CONFIG_USBCLK_DIV);
}
    3e66:	b003      	add	sp, #12
    3e68:	bd00      	pop	{pc}
    3e6a:	bf00      	nop

00003e6c <sysclk_init>:
   genclk_disable(7);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
    3e6c:	b530      	push	{r4, r5, lr}
    3e6e:	b083      	sub	sp, #12
	uint32_t ps_value = 0;
	bool is_fwu_enabled = false;

#if CONFIG_HCACHE_ENABLE == 1
	/* Enable HCACHE */
	sysclk_enable_peripheral_clock(HCACHE);
    3e70:	f44f 6480 	mov.w	r4, #1024	; 0x400
    3e74:	f2c4 040a 	movt	r4, #16394	; 0x400a
    3e78:	4620      	mov	r0, r4
    3e7a:	f243 0351 	movw	r3, #12369	; 0x3051
    3e7e:	f2c0 0300 	movt	r3, #0
    3e82:	4798      	blx	r3
	HCACHE->HCACHE_CTRL = HCACHE_CTRL_CEN_YES;
    3e84:	f04f 0001 	mov.w	r0, #1
    3e88:	60a0      	str	r0, [r4, #8]
	while (!(HCACHE->HCACHE_SR & HCACHE_SR_CSTS_EN));
    3e8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3e8e:	f2c4 020a 	movt	r2, #16394	; 0x400a
    3e92:	68d1      	ldr	r1, [r2, #12]
    3e94:	f011 0f01 	tst.w	r1, #1
    3e98:	d0fb      	beq.n	3e92 <sysclk_init+0x26>
extern void pll_disable(uint32_t pll_id);

static inline bool pll_is_locked(uint32_t pll_id)
{
	Assert(pll_id < NR_PLLS);
	return !!(SCIF->SCIF_PCLKSR & (1U << (6 + pll_id)));
    3e9a:	f44f 6500 	mov.w	r5, #2048	; 0x800
    3e9e:	f2c4 050e 	movt	r5, #16398	; 0x400e
    3ea2:	696c      	ldr	r4, [r5, #20]

static inline void pll_enable_config_defaults(uint32_t pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
    3ea4:	f014 0f40 	tst.w	r4, #64	; 0x40
    3ea8:	d12a      	bne.n	3f00 <sysclk_init+0x94>
    3eaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
    3eae:	f2c4 030e 	movt	r3, #16398	; 0x400e
    3eb2:	6958      	ldr	r0, [r3, #20]

static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
    3eb4:	f010 0f01 	tst.w	r0, #1
    3eb8:	d10c      	bne.n	3ed4 <sysclk_init+0x68>
static inline void osc_enable(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
    3eba:	f642 5205 	movw	r2, #11525	; 0x2d05
    3ebe:	f2c0 0200 	movt	r2, #0
    3ec2:	4790      	blx	r2
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(SCIF->SCIF_PCLKSR & SCIF_PCLKSR_OSC0RDY);
    3ec4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    3ec8:	f2c4 010e 	movt	r1, #16398	; 0x400e
    3ecc:	694d      	ldr	r5, [r1, #20]
    3ece:	f015 0f01 	tst.w	r5, #1
    3ed2:	d0fb      	beq.n	3ecc <sysclk_init+0x60>
	}

	Assert(mul > MUL_MIN && mul <= MUL_MAX);
	Assert(divide > DIV_MIN && divide <= DIV_MAX);

	cfg->ctrl |= ((mul - 1) << SCIF_PLL_PLLMUL_Pos)
    3ed4:	f44f 7488 	mov.w	r4, #272	; 0x110
    3ed8:	f6c3 7407 	movt	r4, #16135	; 0x3f07
    3edc:	a802      	add	r0, sp, #8
    3ede:	f840 4d04 	str.w	r4, [r0, #-4]!
#endif
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
    3ee2:	f04f 0100 	mov.w	r1, #0
    3ee6:	f642 539d 	movw	r3, #11677	; 0x2d9d
    3eea:	f2c0 0300 	movt	r3, #0
    3eee:	4798      	blx	r3
extern void pll_disable(uint32_t pll_id);

static inline bool pll_is_locked(uint32_t pll_id)
{
	Assert(pll_id < NR_PLLS);
	return !!(SCIF->SCIF_PCLKSR & (1U << (6 + pll_id)));
    3ef0:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3ef4:	f2c4 000e 	movt	r0, #16398	; 0x400e
    3ef8:	6942      	ldr	r2, [r0, #20]
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
    3efa:	f012 0f40 	tst.w	r2, #64	; 0x40
    3efe:	d0fb      	beq.n	3ef8 <sysclk_init+0x8c>
#endif
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLL0) {
		pll_enable_config_defaults(0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz(), ps_value, is_fwu_enabled);
    3f00:	f44f 40d8 	mov.w	r0, #27648	; 0x6c00
    3f04:	f2c0 20dc 	movt	r0, #732	; 0x2dc
    3f08:	f04f 0100 	mov.w	r1, #0
    3f0c:	460a      	mov	r2, r1
    3f0e:	f244 357d 	movw	r5, #17277	; 0x437d
    3f12:	f2c0 0500 	movt	r5, #0
    3f16:	47a8      	blx	r5
		sysclk_set_source(SYSCLK_SRC_PLL0);
    3f18:	f04f 0002 	mov.w	r0, #2
    3f1c:	f643 518d 	movw	r1, #15757	; 0x3d8d
    3f20:	f2c0 0100 	movt	r1, #0
    3f24:	4788      	blx	r1
	if (!no_halt) {
		bpm_power_scaling_cpu(bpm, ps_value);
		return true;
	}

	return bpm_power_scaling_cpu_failsafe(bpm, ps_value, 240000);
    3f26:	f04f 0000 	mov.w	r0, #0
    3f2a:	f2c4 000f 	movt	r0, #16399	; 0x400f
    3f2e:	f04f 0100 	mov.w	r1, #0
    3f32:	f64a 1280 	movw	r2, #43392	; 0xa980
    3f36:	f2c0 0203 	movt	r2, #3
    3f3a:	f244 2439 	movw	r4, #16953	; 0x4239
    3f3e:	f2c0 0400 	movt	r4, #0
    3f42:	47a0      	blx	r4
		Assert(false);
	}

	/* Automatically switch to low power mode */
	bpm_configure_power_scaling(BPM, ps_value, BPM_PSCM_CPU_NOT_HALT);
	while ((bpm_get_status(BPM) & BPM_SR_PSOK) == 0);
    3f44:	f04f 0400 	mov.w	r4, #0
    3f48:	f2c4 040f 	movt	r4, #16399	; 0x400f
    3f4c:	f244 25cd 	movw	r5, #17101	; 0x42cd
    3f50:	f2c0 0500 	movt	r5, #0
    3f54:	4620      	mov	r0, r4
    3f56:	47a8      	blx	r5
    3f58:	f010 0f01 	tst.w	r0, #1
    3f5c:	d0fa      	beq.n	3f54 <sysclk_init+0xe8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3f5e:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    3f62:	b672      	cpsid	i
    3f64:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    3f68:	f240 00d4 	movw	r0, #212	; 0xd4
    3f6c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    3f70:	f04f 0200 	mov.w	r2, #0
    3f74:	7002      	strb	r2, [r0, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    3f76:	b92b      	cbnz	r3, 3f84 <sysclk_init+0x118>
		cpu_irq_enable();
    3f78:	f04f 0301 	mov.w	r3, #1
    3f7c:	7003      	strb	r3, [r0, #0]
    3f7e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    3f82:	b662      	cpsie	i

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
    3f84:	b003      	add	sp, #12
    3f86:	bd30      	pop	{r4, r5, pc}

00003f88 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_disable_pin(pin);\
	} while (0)

void board_init(void)
{
    3f88:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f8a:	b087      	sub	sp, #28
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	struct wdt_dev_inst wdt_inst;
	struct wdt_config   wdt_cfg;

	wdt_get_config_defaults(&wdt_cfg);
    3f8c:	4668      	mov	r0, sp
    3f8e:	f244 43a9 	movw	r3, #17577	; 0x44a9
    3f92:	f2c0 0300 	movt	r3, #0
    3f96:	4798      	blx	r3
	wdt_init(&wdt_inst, WDT, &wdt_cfg);
    3f98:	a804      	add	r0, sp, #16
    3f9a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    3f9e:	f2c4 010f 	movt	r1, #16399	; 0x400f
    3fa2:	466a      	mov	r2, sp
    3fa4:	f244 44c5 	movw	r4, #17605	; 0x44c5
    3fa8:	f2c0 0400 	movt	r4, #0
    3fac:	47a0      	blx	r4
	wdt_disable(&wdt_inst);
    3fae:	a804      	add	r0, sp, #16
    3fb0:	f244 5191 	movw	r1, #17809	; 0x4591
    3fb4:	f2c0 0100 	movt	r1, #0
    3fb8:	4788      	blx	r1
}

__always_inline static void arch_ioport_init(void)
{
	sysclk_enable_peripheral_clock(GPIO);
    3fba:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    3fbe:	f2c4 000e 	movt	r0, #16398	; 0x400e
    3fc2:	f243 0251 	movw	r2, #12369	; 0x3051
    3fc6:	f2c0 0200 	movt	r2, #0
    3fca:	4790      	blx	r2
    3fcc:	f04f 0201 	mov.w	r2, #1
    3fd0:	f04f 0300 	mov.w	r3, #0
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    3fd4:	4614      	mov	r4, r2
    3fd6:	e003      	b.n	3fe0 <board_init+0x58>
    3fd8:	f103 0301 	add.w	r3, r3, #1
    3fdc:	f102 0201 	add.w	r2, r2, #1
	// Put all pins to default state (input & pull-up)
	uint32_t pin;

	for (pin = PIN_PA00; pin <= PIN_PC31; pin ++) {
		// Skip output pins to configure later
		if (pin == LED0_GPIO || pin == LCD_BL_GPIO
    3fe0:	2b4a      	cmp	r3, #74	; 0x4a
    3fe2:	d0f9      	beq.n	3fd8 <board_init+0x50>
    3fe4:	2b4e      	cmp	r3, #78	; 0x4e
    3fe6:	d0f7      	beq.n	3fd8 <board_init+0x50>
#ifdef CONF_BOARD_RS485
		|| pin == RS485_USART_CTS_PIN
    3fe8:	2b48      	cmp	r3, #72	; 0x48
    3fea:	d0f5      	beq.n	3fd8 <board_init+0x50>
#endif
		/* PA02 is not configured as it is driven by hardware
		configuration */
		|| pin == PIN_PA02) {
    3fec:	2b02      	cmp	r3, #2
    3fee:	d0f3      	beq.n	3fd8 <board_init+0x50>
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
    3ff0:	ea4f 1053 	mov.w	r0, r3, lsr #5

__always_inline static volatile GpioPort *arch_ioport_port_to_base(
		ioport_port_t port)
{
	return (volatile GpioPort *)(GPIO_ADDR
		+ port * sizeof(GpioPort));
    3ff4:	f500 1500 	add.w	r5, r0, #2097152	; 0x200000
    3ff8:	f505 66e1 	add.w	r6, r5, #1800	; 0x708
    3ffc:	ea4f 2746 	mov.w	r7, r6, lsl #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
    4000:	f003 011f 	and.w	r1, r3, #31
    4004:	fa04 f001 	lsl.w	r0, r4, r1
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    4008:	64b8      	str	r0, [r7, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    400a:	f8c7 0164 	str.w	r0, [r7, #356]	; 0x164
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
    400e:	6778      	str	r0, [r7, #116]	; 0x74

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    4010:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    4014:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    4018:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    401c:	61b8      	str	r0, [r7, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    401e:	62b8      	str	r0, [r7, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    4020:	63b8      	str	r0, [r7, #56]	; 0x38
	ioport_init();

	// Put all pins to default state (input & pull-up)
	uint32_t pin;

	for (pin = PIN_PA00; pin <= PIN_PC31; pin ++) {
    4022:	2a5f      	cmp	r2, #95	; 0x5f
    4024:	d9d8      	bls.n	3fd8 <board_init+0x50>

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    4026:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    402a:	f2c4 030e 	movt	r3, #16398	; 0x400e
    402e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    4032:	645c      	str	r4, [r3, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    4034:	f8c3 4168 	str.w	r4, [r3, #360]	; 0x168
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    4038:	659c      	str	r4, [r3, #88]	; 0x58
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    403a:	f04f 0208 	mov.w	r2, #8
    403e:	679a      	str	r2, [r3, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    4040:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    4044:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    4048:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
    404c:	615a      	str	r2, [r3, #20]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    404e:	629a      	str	r2, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    4050:	639a      	str	r2, [r3, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    4052:	609a      	str	r2, [r3, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    4054:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    4058:	f2c4 020e 	movt	r2, #16398	; 0x400e
    405c:	f04f 0140 	mov.w	r1, #64	; 0x40
    4060:	6791      	str	r1, [r2, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    4062:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    4066:	f8c2 10c8 	str.w	r1, [r2, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    406a:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    406e:	6191      	str	r1, [r2, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
    4070:	6251      	str	r1, [r2, #36]	; 0x24

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    4072:	6391      	str	r1, [r2, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    4074:	6091      	str	r1, [r2, #8]

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    4076:	f44f 4580 	mov.w	r5, #16384	; 0x4000
    407a:	645d      	str	r5, [r3, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    407c:	f8c3 5168 	str.w	r5, [r3, #360]	; 0x168
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    4080:	659d      	str	r5, [r3, #88]	; 0x58
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    4082:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
    4086:	6796      	str	r6, [r2, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    4088:	f8c2 6088 	str.w	r6, [r2, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    408c:	f8c2 60c8 	str.w	r6, [r2, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    4090:	f8c2 6108 	str.w	r6, [r2, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    4094:	6196      	str	r6, [r2, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    4096:	6296      	str	r6, [r2, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    4098:	6396      	str	r6, [r2, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    409a:	6096      	str	r6, [r2, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    409c:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
    40a0:	6797      	str	r7, [r2, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    40a2:	f8c2 7088 	str.w	r7, [r2, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    40a6:	f8c2 70c8 	str.w	r7, [r2, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    40aa:	f8c2 7108 	str.w	r7, [r2, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    40ae:	6197      	str	r7, [r2, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    40b0:	6297      	str	r7, [r2, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    40b2:	6397      	str	r7, [r2, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    40b4:	6097      	str	r7, [r2, #8]
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    40b6:	f44f 5090 	mov.w	r0, #4608	; 0x1200
    40ba:	f2c4 000e 	movt	r0, #16398	; 0x400e
    40be:	f04f 0520 	mov.w	r5, #32
    40c2:	6485      	str	r5, [r0, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    40c4:	f8c0 5164 	str.w	r5, [r0, #356]	; 0x164

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    40c8:	f44f 7780 	mov.w	r7, #256	; 0x100
    40cc:	645f      	str	r7, [r3, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    40ce:	f8c3 7168 	str.w	r7, [r3, #360]	; 0x168

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    40d2:	655f      	str	r7, [r3, #84]	; 0x54
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERC = arch_ioport_pin_to_mask(pin);
    40d4:	f04f 0480 	mov.w	r4, #128	; 0x80
    40d8:	649c      	str	r4, [r3, #72]	; 0x48
		// Always enable the Schmitt trigger for input pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERS = arch_ioport_pin_to_mask(pin);
    40da:	f8c3 4164 	str.w	r4, [r3, #356]	; 0x164
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    40de:	f44f 6600 	mov.w	r6, #2048	; 0x800
    40e2:	679e      	str	r6, [r3, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    40e4:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    40e8:	f8c3 60c8 	str.w	r6, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    40ec:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
    40f0:	615e      	str	r6, [r3, #20]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    40f2:	629e      	str	r6, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    40f4:	639e      	str	r6, [r3, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    40f6:	609e      	str	r6, [r3, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    40f8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    40fc:	6798      	str	r0, [r3, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    40fe:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    4102:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    4106:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
    410a:	6158      	str	r0, [r3, #20]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    410c:	6298      	str	r0, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    410e:	6398      	str	r0, [r3, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    4110:	6098      	str	r0, [r3, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    4112:	f04f 0004 	mov.w	r0, #4
    4116:	6798      	str	r0, [r3, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    4118:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    411c:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    4120:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    4124:	6198      	str	r0, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
    4126:	6258      	str	r0, [r3, #36]	; 0x24

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    4128:	6398      	str	r0, [r3, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    412a:	6098      	str	r0, [r3, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    412c:	6794      	str	r4, [r2, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    412e:	f8c2 4088 	str.w	r4, [r2, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    4132:	f8c2 40c8 	str.w	r4, [r2, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    4136:	f8c2 4108 	str.w	r4, [r2, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
    413a:	6154      	str	r4, [r2, #20]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    413c:	6294      	str	r4, [r2, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    413e:	6394      	str	r4, [r2, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    4140:	6094      	str	r4, [r2, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    4142:	f04f 0610 	mov.w	r6, #16
    4146:	679e      	str	r6, [r3, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    4148:	f8c3 6088 	str.w	r6, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    414c:	f8c3 60c8 	str.w	r6, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    4150:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    4154:	619e      	str	r6, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    4156:	629e      	str	r6, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    4158:	639e      	str	r6, [r3, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    415a:	609e      	str	r6, [r3, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    415c:	679d      	str	r5, [r3, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    415e:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    4162:	f8c3 50c8 	str.w	r5, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    4166:	f8c3 5108 	str.w	r5, [r3, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    416a:	619d      	str	r5, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    416c:	629d      	str	r5, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    416e:	639d      	str	r5, [r3, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    4170:	609d      	str	r5, [r3, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    4172:	6799      	str	r1, [r3, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    4174:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    4178:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    417c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    4180:	6199      	str	r1, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    4182:	6299      	str	r1, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    4184:	6399      	str	r1, [r3, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    4186:	6099      	str	r1, [r3, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    4188:	6790      	str	r0, [r2, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    418a:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    418e:	f8c2 00c8 	str.w	r0, [r2, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    4192:	f8c2 0108 	str.w	r0, [r2, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
    4196:	6150      	str	r0, [r2, #20]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    4198:	6290      	str	r0, [r2, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    419a:	6390      	str	r0, [r2, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    419c:	6090      	str	r0, [r2, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    419e:	f04f 0501 	mov.w	r5, #1
    41a2:	679d      	str	r5, [r3, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    41a4:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    41a8:	f8c3 50c8 	str.w	r5, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    41ac:	f8c3 5108 	str.w	r5, [r3, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    41b0:	619d      	str	r5, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    41b2:	629d      	str	r5, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    41b4:	639d      	str	r5, [r3, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    41b6:	609d      	str	r5, [r3, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    41b8:	f04f 0502 	mov.w	r5, #2
    41bc:	679d      	str	r5, [r3, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    41be:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    41c2:	f8c3 50c8 	str.w	r5, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    41c6:	f8c3 5108 	str.w	r5, [r3, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    41ca:	619d      	str	r5, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    41cc:	629d      	str	r5, [r3, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    41ce:	639d      	str	r5, [r3, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    41d0:	609d      	str	r5, [r3, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    41d2:	6798      	str	r0, [r3, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    41d4:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    41d8:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    41dc:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    41e0:	6198      	str	r0, [r3, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
    41e2:	6258      	str	r0, [r3, #36]	; 0x24

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    41e4:	6398      	str	r0, [r3, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    41e6:	6098      	str	r0, [r3, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    41e8:	6794      	str	r4, [r2, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    41ea:	f8c2 4088 	str.w	r4, [r2, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    41ee:	f8c2 40c8 	str.w	r4, [r2, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    41f2:	f8c2 4108 	str.w	r4, [r2, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
    41f6:	6154      	str	r4, [r2, #20]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    41f8:	6294      	str	r4, [r2, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    41fa:	6394      	str	r4, [r2, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    41fc:	6094      	str	r4, [r2, #8]
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    41fe:	6791      	str	r1, [r2, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    4200:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    4204:	f8c2 10c8 	str.w	r1, [r2, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    4208:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
	}
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
    420c:	6151      	str	r1, [r2, #20]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    420e:	6291      	str	r1, [r2, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    4210:	6391      	str	r1, [r2, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    4212:	6091      	str	r1, [r2, #8]

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	if (dir == IOPORT_DIR_OUTPUT) {
		arch_ioport_pin_to_base(pin)->GPIO_ODERS = arch_ioport_pin_to_mask(pin);
    4214:	645f      	str	r7, [r3, #68]	; 0x44
		// Always disable the Schmitt trigger for output pins.
		arch_ioport_pin_to_base(pin)->GPIO_STERC = arch_ioport_pin_to_mask(pin);
    4216:	f8c3 7168 	str.w	r7, [r3, #360]	; 0x168
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
	} else {
		arch_ioport_pin_to_base(pin)->GPIO_OVRC = arch_ioport_pin_to_mask(pin);
    421a:	659f      	str	r7, [r3, #88]	; 0x58
	volatile GpioPort *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->GPIO_PUERS = mask;
	} else {
		base->GPIO_PUERC = mask;
    421c:	6791      	str	r1, [r2, #120]	; 0x78

#ifdef IOPORT_MODE_PULLDOWN
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->GPIO_PDERS = mask;
	} else {
		base->GPIO_PDERC = mask;
    421e:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
#endif

	if (mode & IOPORT_MODE_GLITCH_FILTER) {
		base->GPIO_GFERS = mask;
	} else {
		base->GPIO_GFERC = mask;
    4222:	f8c2 10c8 	str.w	r1, [r2, #200]	; 0xc8

#ifdef IOPORT_MODE_DRIVE_STRENGTH
	if (mode & IOPORT_MODE_DRIVE_STRENGTH) {
		base->GPIO_ODCR0S = mask;
	} else {
		base->GPIO_ODCR0C = mask;
    4226:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
#endif

	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->GPIO_PMR0S = mask;
	} else {
		base->GPIO_PMR0C = mask;
    422a:	6191      	str	r1, [r2, #24]
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->GPIO_PMR1S = mask;
	} else {
		base->GPIO_PMR1C = mask;
    422c:	6291      	str	r1, [r2, #40]	; 0x28

#ifdef IOPORT_MODE_MUX_BIT2
	if (mode & IOPORT_MODE_MUX_BIT2) {
		base->GPIO_PMR2S = mask;
	} else {
		base->GPIO_PMR2C = mask;
    422e:	6391      	str	r1, [r2, #56]	; 0x38
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->GPIO_GPERC = mask;
    4230:	6091      	str	r1, [r2, #8]

#ifdef CONF_BOARD_ABDACB_PORT
	ioport_set_pin_peripheral_mode(ABDACB_AUDIO0_PIN, ABDACB_AUDIO0_MUX);
	ioport_set_pin_peripheral_mode(ABDACB_AUDIO1_PIN, ABDACB_AUDIO1_MUX);
#endif
}
    4232:	b007      	add	sp, #28
    4234:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4236:	bf00      	nop

00004238 <bpm_power_scaling_cpu_failsafe>:
}


bool bpm_power_scaling_cpu_failsafe(Bpm *bpm, uint32_t ps_value,
	uint32_t timeout)
{
    4238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t pmcon = 0;

	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;
    423c:	69c4      	ldr	r4, [r0, #28]

	/* Clear last PS Value & Write new one */
	pmcon &= ~BPM_PMCON_PS_Msk;
    423e:	f024 0503 	bic.w	r5, r4, #3
	pmcon |= BPM_PMCON_PS(ps_value);
    4242:	f045 030c 	orr.w	r3, r5, #12
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4246:	f3ef 8610 	mrs	r6, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    424a:	b672      	cpsid	i
    424c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
    4250:	f04f 0500 	mov.w	r5, #0
    4254:	f240 07d4 	movw	r7, #212	; 0xd4
    4258:	f2c2 0700 	movt	r7, #8192	; 0x2000
    425c:	703d      	strb	r5, [r7, #0]
	uint32_t ctrl, load, val;
	/* Avoid interrupt while flash halt */
	flags = cpu_irq_save();

	/* Save SysTick */
	val = SysTick->VAL;
    425e:	f24e 0410 	movw	r4, #57360	; 0xe010
    4262:	f2ce 0400 	movt	r4, #57344	; 0xe000
    4266:	f8d4 8008 	ldr.w	r8, [r4, #8]
	ctrl = SysTick->CTRL;
    426a:	6827      	ldr	r7, [r4, #0]
	load = SysTick->LOAD;
    426c:	f8d4 9004 	ldr.w	r9, [r4, #4]
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
    4270:	6062      	str	r2, [r4, #4]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    4272:	f04f 0205 	mov.w	r2, #5
    4276:	6022      	str	r2, [r4, #0]
	/* Read last PM_CON value */
	pmcon = bpm->BPM_PMCON;

	/* Clear last PS Value & Write new one */
	pmcon &= ~BPM_PMCON_PS_Msk;
	pmcon |= BPM_PMCON_PS(ps_value);
    4278:	f001 0103 	and.w	r1, r1, #3
	load = SysTick->LOAD;
	/* Setup SysTick & start counting */
	SysTick->LOAD = timeout;
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;

	b_psok = bpm_ps_no_halt_exec(bpm, pmcon);
    427c:	4319      	orrs	r1, r3
    427e:	f240 0301 	movw	r3, #1
    4282:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4286:	4798      	blx	r3

	/* Restore SysTick */
	SysTick->CTRL = 0;
    4288:	6025      	str	r5, [r4, #0]
	SysTick->LOAD = load;
    428a:	f8c4 9004 	str.w	r9, [r4, #4]
	SysTick->VAL = val;
    428e:	f8c4 8008 	str.w	r8, [r4, #8]
	SysTick->CTRL = ctrl;
    4292:	6027      	str	r7, [r4, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    4294:	b94e      	cbnz	r6, 42aa <bpm_power_scaling_cpu_failsafe+0x72>
		cpu_irq_enable();
    4296:	f240 01d4 	movw	r1, #212	; 0xd4
    429a:	f2c2 0100 	movt	r1, #8192	; 0x2000
    429e:	f04f 0201 	mov.w	r2, #1
    42a2:	700a      	strb	r2, [r1, #0]
    42a4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    42a8:	b662      	cpsie	i

	cpu_irq_restore(flags);
	return b_psok;
}
    42aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    42ae:	bf00      	nop

000042b0 <bpm_enable_fast_wakeup>:
	bpm->BPM_PMCON = pmcon;
}

void bpm_enable_fast_wakeup(Bpm *bpm)
{
	uint32_t pmcon = bpm->BPM_PMCON | BPM_PMCON_FASTWKUP;
    42b0:	69c1      	ldr	r1, [r0, #28]
    42b2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
	BPM_UNLOCK(PMCON);
    42b6:	f04f 0300 	mov.w	r3, #0
    42ba:	f2c4 030f 	movt	r3, #16399	; 0x400f
    42be:	f04f 021c 	mov.w	r2, #28
    42c2:	f6ca 2200 	movt	r2, #43520	; 0xaa00
    42c6:	619a      	str	r2, [r3, #24]
	bpm->BPM_PMCON = pmcon;
    42c8:	61c1      	str	r1, [r0, #28]
    42ca:	4770      	bx	lr

000042cc <bpm_get_status>:
	bpm->BPM_ICR = sources;
}

uint32_t bpm_get_status(Bpm *bpm)
{
	return bpm->BPM_SR;
    42cc:	6940      	ldr	r0, [r0, #20]
}
    42ce:	4770      	bx	lr

000042d0 <flashcalw_set_wait_state>:
 * \param wait_state The number of wait states of flash read accesses: \c 0 to
 *                   \c 1.
 */
void flashcalw_set_wait_state(uint32_t wait_state)
{
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    42d0:	f04f 0300 	mov.w	r3, #0
    42d4:	f2c4 030a 	movt	r3, #16394	; 0x400a
    42d8:	6819      	ldr	r1, [r3, #0]
    42da:	f021 0240 	bic.w	r2, r1, #64	; 0x40
			| (wait_state ? FLASHCALW_FCR_FWS_1 :
    42de:	2800      	cmp	r0, #0
    42e0:	bf14      	ite	ne
    42e2:	2040      	movne	r0, #64	; 0x40
    42e4:	2000      	moveq	r0, #0
    42e6:	4310      	orrs	r0, r2
 * \param wait_state The number of wait states of flash read accesses: \c 0 to
 *                   \c 1.
 */
void flashcalw_set_wait_state(uint32_t wait_state)
{
	HFLASHC->FLASHCALW_FCR = (HFLASHC->FLASHCALW_FCR & ~FLASHCALW_FCR_FWS)
    42e8:	f04f 0300 	mov.w	r3, #0
    42ec:	f2c4 030a 	movt	r3, #16394	; 0x400a
    42f0:	6018      	str	r0, [r3, #0]
    42f2:	4770      	bx	lr

000042f4 <flashcalw_is_ready>:
 *
 * \return Whether the FLASHCALW is ready to run a new command.
 */
bool flashcalw_is_ready(void)
{
	return ((HFLASHC->FLASHCALW_FSR & FLASHCALW_FSR_FRDY) != 0);
    42f4:	f04f 0300 	mov.w	r3, #0
    42f8:	f2c4 030a 	movt	r3, #16394	; 0x400a
    42fc:	6898      	ldr	r0, [r3, #8]
}
    42fe:	f000 0001 	and.w	r0, r0, #1
    4302:	4770      	bx	lr

00004304 <flashcalw_default_wait_until_ready>:
/*! \brief Waits actively until the FLASHCALW is ready to run a new command.
 *
 * This is the default function assigned to \ref flashcalw_wait_until_ready.
 */
void flashcalw_default_wait_until_ready(void)
{
    4304:	b510      	push	{r4, lr}
	while (!flashcalw_is_ready()) {
    4306:	f244 24f5 	movw	r4, #17141	; 0x42f5
    430a:	f2c0 0400 	movt	r4, #0
    430e:	47a0      	blx	r4
    4310:	2800      	cmp	r0, #0
    4312:	d0fc      	beq.n	430e <flashcalw_default_wait_until_ready+0xa>
	}
}
    4314:	bd10      	pop	{r4, pc}
    4316:	bf00      	nop

00004318 <flashcalw_issue_command>:
 *
 * \note The FLASHCALW error status returned by \ref flashcalw_is_lock_error and
 *       \ref flashcalw_is_programming_error is updated.
 */
void flashcalw_issue_command(uint32_t command, int page_number)
{
    4318:	b538      	push	{r3, r4, r5, lr}
    431a:	4605      	mov	r5, r0
    431c:	460c      	mov	r4, r1
	uint32_t tempo;

	flashcalw_wait_until_ready();
    431e:	f240 03d8 	movw	r3, #216	; 0xd8
    4322:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4326:	6818      	ldr	r0, [r3, #0]
    4328:	4780      	blx	r0
	tempo = HFLASHC->FLASHCALW_FCMD;
    432a:	f04f 0100 	mov.w	r1, #0
    432e:	f2c4 010a 	movt	r1, #16394	; 0x400a
    4332:	684a      	ldr	r2, [r1, #4]
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
	if (page_number >= 0) {
    4334:	2c00      	cmp	r4, #0
    4336:	db07      	blt.n	4348 <flashcalw_issue_command+0x30>
		tempo = (FLASHCALW_FCMD_KEY_KEY
				| FLASHCALW_FCMD_PAGEN(page_number) | command);
    4338:	f045 4525 	orr.w	r5, r5, #2768240640	; 0xa5000000
    433c:	ea4f 2404 	mov.w	r4, r4, lsl #8
    4340:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	flashcalw_wait_until_ready();
	tempo = HFLASHC->FLASHCALW_FCMD;
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
	if (page_number >= 0) {
		tempo = (FLASHCALW_FCMD_KEY_KEY
    4344:	4325      	orrs	r5, r4
    4346:	e004      	b.n	4352 <flashcalw_issue_command+0x3a>
	uint32_t tempo;

	flashcalw_wait_until_ready();
	tempo = HFLASHC->FLASHCALW_FCMD;
	/* Clear the command bitfield. */
	tempo &= ~FLASHCALW_FCMD_CMD_Msk;
    4348:	f022 033f 	bic.w	r3, r2, #63	; 0x3f
	if (page_number >= 0) {
		tempo = (FLASHCALW_FCMD_KEY_KEY
				| FLASHCALW_FCMD_PAGEN(page_number) | command);
	} else {
		tempo |= (FLASHCALW_FCMD_KEY_KEY | command);
    434c:	f043 4025 	orr.w	r0, r3, #2768240640	; 0xa5000000
    4350:	4305      	orrs	r5, r0
	}

	HFLASHC->FLASHCALW_FCMD = tempo;
    4352:	f04f 0100 	mov.w	r1, #0
    4356:	f2c4 010a 	movt	r1, #16394	; 0x400a
    435a:	604d      	str	r5, [r1, #4]
 *          the driver's API which instead presents \ref flashcalw_is_lock_error
 *          and \ref flashcalw_is_programming_error.
 */
static uint32_t flashcalw_get_error_status(void)
{
	return HFLASHC->FLASHCALW_FSR &
    435c:	688a      	ldr	r2, [r1, #8]
    435e:	f002 000c 	and.w	r0, r2, #12
	} else {
		tempo |= (FLASHCALW_FCMD_KEY_KEY | command);
	}

	HFLASHC->FLASHCALW_FCMD = tempo;
	flashcalw_error_status = flashcalw_get_error_status();
    4362:	f240 73a8 	movw	r3, #1960	; 0x7a8
    4366:	f2c2 0300 	movt	r3, #8192	; 0x2000
    436a:	6018      	str	r0, [r3, #0]
	flashcalw_wait_until_ready();
    436c:	f240 01d8 	movw	r1, #216	; 0xd8
    4370:	f2c2 0100 	movt	r1, #8192	; 0x2000
    4374:	680a      	ldr	r2, [r1, #0]
    4376:	4790      	blx	r2
    4378:	bd38      	pop	{r3, r4, r5, pc}
    437a:	bf00      	nop

0000437c <flashcalw_set_flash_waitstate_and_readmode>:
 * \param ps_value Power Scaling mode value (0, 1)
 * \param is_fwu_enabled (boolean), Is fast wakeup mode enabled or not
 */
void flashcalw_set_flash_waitstate_and_readmode(uint32_t cpu_f_hz,
		uint32_t ps_value, bool is_fwu_enabled)
{
    437c:	b508      	push	{r3, lr}
	}

	/* Enable the high-speed read mode. */
	flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN, -1);
#else
	if (ps_value == 0) {
    437e:	2900      	cmp	r1, #0
    4380:	d156      	bne.n	4430 <flashcalw_set_flash_waitstate_and_readmode+0xb4>
		if (cpu_f_hz > FLASH_FREQ_PS0_FWS_0_MAX_FREQ) {
    4382:	f64a 0380 	movw	r3, #43136	; 0xa880
    4386:	f2c0 1312 	movt	r3, #274	; 0x112
    438a:	4298      	cmp	r0, r3
    438c:	d927      	bls.n	43de <flashcalw_set_flash_waitstate_and_readmode+0x62>
			// > 18MHz
			if (cpu_f_hz <= FLASH_FREQ_PS0_FWS_1_MAX_FREQ) {
    438e:	f44f 43a2 	mov.w	r3, #20736	; 0x5100
    4392:	f2c0 2325 	movt	r3, #549	; 0x225
    4396:	4298      	cmp	r0, r3
    4398:	d810      	bhi.n	43bc <flashcalw_set_flash_waitstate_and_readmode+0x40>
				// <= 36MHz
				/* Set a wait-state, disable the high-speed read
				 * mode. */
				flashcalw_set_wait_state(1);
    439a:	f04f 0001 	mov.w	r0, #1
    439e:	f244 23d1 	movw	r3, #17105	; 0x42d1
    43a2:	f2c0 0300 	movt	r3, #0
    43a6:	4798      	blx	r3
				flashcalw_issue_command(
    43a8:	f04f 0011 	mov.w	r0, #17
    43ac:	f04f 31ff 	mov.w	r1, #4294967295
    43b0:	f244 3219 	movw	r2, #17177	; 0x4319
    43b4:	f2c0 0200 	movt	r2, #0
    43b8:	4790      	blx	r2
    43ba:	bd08      	pop	{r3, pc}
						FLASHCALW_FCMD_CMD_HSDIS, -1);
			} else {
				// > 36 MHz
				/* Set a wait-state, enable the high-speed read
				mode. */
				flashcalw_set_wait_state(1);
    43bc:	f04f 0001 	mov.w	r0, #1
    43c0:	f244 21d1 	movw	r1, #17105	; 0x42d1
    43c4:	f2c0 0100 	movt	r1, #0
    43c8:	4788      	blx	r1
				flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSEN,
    43ca:	f04f 0010 	mov.w	r0, #16
    43ce:	f04f 31ff 	mov.w	r1, #4294967295
    43d2:	f244 3219 	movw	r2, #17177	; 0x4319
    43d6:	f2c0 0200 	movt	r2, #0
    43da:	4790      	blx	r2
    43dc:	bd08      	pop	{r3, pc}
						-1);
			}
		} else { // <= 18MHz
			if((is_fwu_enabled == true) &&
    43de:	b1b2      	cbz	r2, 440e <flashcalw_set_flash_waitstate_and_readmode+0x92>
    43e0:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
    43e4:	f2c0 01b7 	movt	r1, #183	; 0xb7
    43e8:	4288      	cmp	r0, r1
    43ea:	d810      	bhi.n	440e <flashcalw_set_flash_waitstate_and_readmode+0x92>
				(cpu_f_hz <= FLASH_FREQ_PS1_FWS_1_FWU_MAX_FREQ))
			{
				// <= 12MHz
				/* Set a wait-state, disable the high-speed read
				mode. */
				flashcalw_set_wait_state(1);
    43ec:	f04f 0001 	mov.w	r0, #1
    43f0:	f244 21d1 	movw	r1, #17105	; 0x42d1
    43f4:	f2c0 0100 	movt	r1, #0
    43f8:	4788      	blx	r1
				flashcalw_issue_command(
    43fa:	f04f 0011 	mov.w	r0, #17
    43fe:	f04f 31ff 	mov.w	r1, #4294967295
    4402:	f244 3219 	movw	r2, #17177	; 0x4319
    4406:	f2c0 0200 	movt	r2, #0
    440a:	4790      	blx	r2
    440c:	bd08      	pop	{r3, pc}
						FLASHCALW_FCMD_CMD_HSDIS, -1);
			} else {
				/* No wait-state, disable the high-speed read
				mode */
				flashcalw_set_wait_state(0);
    440e:	f04f 0000 	mov.w	r0, #0
    4412:	f244 22d1 	movw	r2, #17105	; 0x42d1
    4416:	f2c0 0200 	movt	r2, #0
    441a:	4790      	blx	r2
				flashcalw_issue_command(
    441c:	f04f 0011 	mov.w	r0, #17
    4420:	f04f 31ff 	mov.w	r1, #4294967295
    4424:	f244 3319 	movw	r3, #17177	; 0x4319
    4428:	f2c0 0300 	movt	r3, #0
    442c:	4798      	blx	r3
    442e:	bd08      	pop	{r3, pc}
					FLASHCALW_FCMD_CMD_HSDIS, -1);
			}
		}
	} else { /* ps_value == 1 */
		if (cpu_f_hz > FLASH_FREQ_PS0_FWS_0_MAX_FREQ) { /* > 8MHz */
    4430:	f64a 0380 	movw	r3, #43136	; 0xa880
    4434:	f2c0 1312 	movt	r3, #274	; 0x112
    4438:	4298      	cmp	r0, r3
			/* Set a wait-state. */
			flashcalw_set_wait_state(1);
    443a:	bf8c      	ite	hi
    443c:	2001      	movhi	r0, #1
		} else {
			/* No wait-state. */
			flashcalw_set_wait_state(0);
    443e:	2000      	movls	r0, #0
    4440:	f244 21d1 	movw	r1, #17105	; 0x42d1
    4444:	f2c0 0100 	movt	r1, #0
    4448:	4788      	blx	r1
		}

		/* Disable the high-speed read mode. */
		flashcalw_issue_command(FLASHCALW_FCMD_CMD_HSDIS, -1);
    444a:	f04f 0011 	mov.w	r0, #17
    444e:	f04f 31ff 	mov.w	r1, #4294967295
    4452:	f244 3219 	movw	r2, #17177	; 0x4319
    4456:	f2c0 0200 	movt	r2, #0
    445a:	4790      	blx	r2
    445c:	bd08      	pop	{r3, pc}
    445e:	bf00      	nop

00004460 <wdt_set_ctrl>:
 *        to the WatchDog Timer key.
 *
 * \param ctrl  Value to set the WatchDog Timer Control register to.
 */
static void wdt_set_ctrl(uint32_t ctrl)
{
    4460:	b082      	sub	sp, #8
	volatile uint32_t dly;

	/* Calculate delay for internal synchronization, see 44.1.2 WDT errata */
	if ((WDT->WDT_CTRL & WDT_CTRL_CSSEL) == WDT_CLK_SRC_RCSYS) {
    4462:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    4466:	f2c4 030f 	movt	r3, #16399	; 0x400f
    446a:	6819      	ldr	r1, [r3, #0]
    446c:	f411 3f00 	tst.w	r1, #131072	; 0x20000
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RCSYS_NOMINAL_HZ);
    4470:	bf0c      	ite	eq
    4472:	f240 3143 	movweq	r1, #835	; 0x343
	} else { /* WDT_CLK_SRC_32K */
		dly = div_ceil(sysclk_get_cpu_hz() * 2, OSC_RC32K_NOMINAL_HZ);
    4476:	f640 3172 	movwne	r1, #2930	; 0xb72
    447a:	9101      	str	r1, [sp, #4]
	}
	dly >>= 3; /* ~8 cycles for one while loop */
    447c:	9a01      	ldr	r2, [sp, #4]
    447e:	ea4f 03d2 	mov.w	r3, r2, lsr #3
    4482:	9301      	str	r3, [sp, #4]
	while(dly--);
    4484:	9901      	ldr	r1, [sp, #4]
    4486:	f101 32ff 	add.w	r2, r1, #4294967295
    448a:	9201      	str	r2, [sp, #4]
    448c:	2900      	cmp	r1, #0
    448e:	d1f9      	bne.n	4484 <wdt_set_ctrl+0x24>
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_FIRST_KEY);
    4490:	f040 41aa 	orr.w	r1, r0, #1426063360	; 0x55000000
    4494:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    4498:	f2c4 030f 	movt	r3, #16399	; 0x400f
    449c:	6019      	str	r1, [r3, #0]
	WDT->WDT_CTRL = ctrl | WDT_CTRL_KEY(WDT_SECOND_KEY);
    449e:	f040 402a 	orr.w	r0, r0, #2852126720	; 0xaa000000
    44a2:	6018      	str	r0, [r3, #0]
}
    44a4:	b002      	add	sp, #8
    44a6:	4770      	bx	lr

000044a8 <wdt_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(cfg);

	/* Default configuration values */
	cfg->clk_src = WDT_CLK_SRC_RCSYS;
    44a8:	f04f 0300 	mov.w	r3, #0
    44ac:	6003      	str	r3, [r0, #0]
	cfg->wdt_mode = WDT_MODE_BASIC;
    44ae:	6043      	str	r3, [r0, #4]
	cfg->timeout_period = WDT_PERIOD_131072_CLK;
    44b0:	f04f 0210 	mov.w	r2, #16
    44b4:	7202      	strb	r2, [r0, #8]
	cfg->window_period = WDT_PERIOD_NONE;
    44b6:	7243      	strb	r3, [r0, #9]
	cfg->disable_flash_cali = true;
    44b8:	f04f 0101 	mov.w	r1, #1
    44bc:	7281      	strb	r1, [r0, #10]
	cfg->disable_wdt_after_reset = true;
    44be:	72c1      	strb	r1, [r0, #11]
	cfg->always_on = false;
    44c0:	7303      	strb	r3, [r0, #12]
    44c2:	4770      	bx	lr

000044c4 <wdt_init>:
 */
bool wdt_init(
		struct wdt_dev_inst *const dev_inst,
		Wdt *const wdt,
		struct wdt_config *const cfg)
{
    44c4:	b538      	push	{r3, r4, r5, lr}
    44c6:	460c      	mov	r4, r1
    44c8:	4615      	mov	r5, r2
	/* Sanity check arguments */
	Assert(dev_inst);
	Assert(wdt);
	Assert(cfg);

	dev_inst->hw_dev = wdt;
    44ca:	6001      	str	r1, [r0, #0]
	dev_inst->wdt_cfg = cfg;
    44cc:	6042      	str	r2, [r0, #4]

	/* Enable APB clock for WDT */
	sysclk_enable_peripheral_clock(wdt);
    44ce:	4608      	mov	r0, r1
    44d0:	f243 0351 	movw	r3, #12369	; 0x3051
    44d4:	f2c0 0300 	movt	r3, #0
    44d8:	4798      	blx	r3

	/* Check SFV bit: if SFV bit is set, Control Register is locked */
	if (wdt->WDT_CTRL & WDT_CTRL_SFV) {
    44da:	6820      	ldr	r0, [r4, #0]
    44dc:	f010 0f08 	tst.w	r0, #8
    44e0:	d152      	bne.n	4588 <wdt_init+0xc4>
		return false;
	}

	/* Disable the WDT */
	if (wdt->WDT_CTRL & WDT_CTRL_EN) {
    44e2:	6821      	ldr	r1, [r4, #0]
    44e4:	f011 0f01 	tst.w	r1, #1
    44e8:	d00b      	beq.n	4502 <wdt_init+0x3e>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    44ea:	6822      	ldr	r2, [r4, #0]
    44ec:	f022 0001 	bic.w	r0, r2, #1
    44f0:	f244 4361 	movw	r3, #17505	; 0x4461
    44f4:	f2c0 0300 	movt	r3, #0
    44f8:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    44fa:	6820      	ldr	r0, [r4, #0]
    44fc:	f010 0f01 	tst.w	r0, #1
    4500:	d1fb      	bne.n	44fa <wdt_init+0x36>
		}
	}
	/* Disable the WDT clock */
	if (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    4502:	6821      	ldr	r1, [r4, #0]
    4504:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    4508:	d00b      	beq.n	4522 <wdt_init+0x5e>
		wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_CEN);
    450a:	6822      	ldr	r2, [r4, #0]
    450c:	f422 3080 	bic.w	r0, r2, #65536	; 0x10000
    4510:	f244 4361 	movw	r3, #17505	; 0x4461
    4514:	f2c0 0300 	movt	r3, #0
    4518:	4798      	blx	r3
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
    451a:	6820      	ldr	r0, [r4, #0]
    451c:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    4520:	d1fb      	bne.n	451a <wdt_init+0x56>
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    4522:	6869      	ldr	r1, [r5, #4]
    4524:	682a      	ldr	r2, [r5, #0]
    4526:	ea41 0302 	orr.w	r3, r1, r2
			cfg->wdt_mode |
			WDT_CTRL_PSEL(cfg->timeout_period) |
    452a:	7a28      	ldrb	r0, [r5, #8]
    452c:	ea4f 2100 	mov.w	r1, r0, lsl #8
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
			cfg->wdt_mode |
    4530:	f401 52f8 	and.w	r2, r1, #7936	; 0x1f00
    4534:	ea43 0002 	orr.w	r0, r3, r2
			WDT_CTRL_PSEL(cfg->timeout_period) |
			WDT_CTRL_TBAN(cfg->window_period) |
    4538:	7a6b      	ldrb	r3, [r5, #9]
    453a:	ea4f 4183 	mov.w	r1, r3, lsl #18
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
			cfg->wdt_mode |
			WDT_CTRL_PSEL(cfg->timeout_period) |
    453e:	f401 02f8 	and.w	r2, r1, #8126464	; 0x7c0000
    4542:	4310      	orrs	r0, r2
			WDT_CTRL_TBAN(cfg->window_period) |
    4544:	7aab      	ldrb	r3, [r5, #10]
    4546:	2b00      	cmp	r3, #0
    4548:	bf14      	ite	ne
    454a:	2180      	movne	r1, #128	; 0x80
    454c:	2100      	moveq	r1, #0
    454e:	4308      	orrs	r0, r1
		while (wdt->WDT_CTRL & WDT_CTRL_CEN) {
		}
	}

	/* Initialize the WDT with new configurations */
	wdt_set_ctrl(cfg->clk_src |
    4550:	7aed      	ldrb	r5, [r5, #11]
    4552:	2d00      	cmp	r5, #0
    4554:	bf14      	ite	ne
    4556:	2202      	movne	r2, #2
    4558:	2200      	moveq	r2, #0
    455a:	4310      	orrs	r0, r2
    455c:	f244 4561 	movw	r5, #17505	; 0x4461
    4560:	f2c0 0500 	movt	r5, #0
    4564:	47a8      	blx	r5
			WDT_CTRL_PSEL(cfg->timeout_period) |
			WDT_CTRL_TBAN(cfg->window_period) |
			(cfg->disable_flash_cali ? WDT_CTRL_FCD : 0) |
			(cfg->disable_wdt_after_reset ? WDT_CTRL_DAR : 0)
	);
	wdt_set_ctrl(wdt->WDT_CTRL | WDT_CTRL_CEN);
    4566:	6820      	ldr	r0, [r4, #0]
    4568:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
    456c:	47a8      	blx	r5
	while (!(wdt->WDT_CTRL & WDT_CTRL_CEN)) {
    456e:	6823      	ldr	r3, [r4, #0]
    4570:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4574:	d0fb      	beq.n	456e <wdt_init+0xaa>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    4576:	4620      	mov	r0, r4
    4578:	f243 7131 	movw	r1, #14129	; 0x3731
    457c:	f2c0 0100 	movt	r1, #0
    4580:	4788      	blx	r1

	return true;
    4582:	f04f 0001 	mov.w	r0, #1
    4586:	bd38      	pop	{r3, r4, r5, pc}
	/* Enable APB clock for WDT */
	sysclk_enable_peripheral_clock(wdt);

	/* Check SFV bit: if SFV bit is set, Control Register is locked */
	if (wdt->WDT_CTRL & WDT_CTRL_SFV) {
		return false;
    4588:	f04f 0000 	mov.w	r0, #0

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);

	return true;
}
    458c:	bd38      	pop	{r3, r4, r5, pc}
    458e:	bf00      	nop

00004590 <wdt_disable>:
 * \brief Disable the WDT module.
 *
 * \param dev_inst    Device structure pointer.
 */
void wdt_disable(struct wdt_dev_inst *const dev_inst)
{
    4590:	b510      	push	{r4, lr}
	Wdt *wdt = dev_inst->hw_dev;
    4592:	6804      	ldr	r4, [r0, #0]

	/* Disable the WDT */
	wdt_set_ctrl(wdt->WDT_CTRL & ~WDT_CTRL_EN);
    4594:	6820      	ldr	r0, [r4, #0]
    4596:	f020 0001 	bic.w	r0, r0, #1
    459a:	f244 4361 	movw	r3, #17505	; 0x4461
    459e:	f2c0 0300 	movt	r3, #0
    45a2:	4798      	blx	r3
	while (wdt->WDT_CTRL & WDT_CTRL_EN) {
    45a4:	6821      	ldr	r1, [r4, #0]
    45a6:	f011 0f01 	tst.w	r1, #1
    45aa:	d1fb      	bne.n	45a4 <wdt_disable+0x14>
	}

	/* Disable APB clock for WDT */
	sysclk_disable_peripheral_clock(wdt);
    45ac:	4620      	mov	r0, r4
    45ae:	f243 7231 	movw	r2, #14129	; 0x3731
    45b2:	f2c0 0200 	movt	r2, #0
    45b6:	4790      	blx	r2
    45b8:	bd10      	pop	{r4, pc}
    45ba:	bf00      	nop

000045bc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    45bc:	e7fe      	b.n	45bc <Dummy_Handler>
    45be:	bf00      	nop

000045c0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    45c0:	b538      	push	{r3, r4, r5, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
    45c2:	f240 0300 	movw	r3, #0
    45c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    45ca:	f644 12c0 	movw	r2, #18880	; 0x49c0
    45ce:	f2c0 0200 	movt	r2, #0
    45d2:	429a      	cmp	r2, r3
    45d4:	d003      	beq.n	45de <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
    45d6:	4839      	ldr	r0, [pc, #228]	; (46bc <Reset_Handler+0xfc>)
    45d8:	4939      	ldr	r1, [pc, #228]	; (46c0 <Reset_Handler+0x100>)
    45da:	4281      	cmp	r1, r0
    45dc:	d304      	bcc.n	45e8 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    45de:	4b39      	ldr	r3, [pc, #228]	; (46c4 <Reset_Handler+0x104>)
    45e0:	4a39      	ldr	r2, [pc, #228]	; (46c8 <Reset_Handler+0x108>)
    45e2:	429a      	cmp	r2, r3
    45e4:	d325      	bcc.n	4632 <Reset_Handler+0x72>
    45e6:	e042      	b.n	466e <Reset_Handler+0xae>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
    45e8:	4d38      	ldr	r5, [pc, #224]	; (46cc <Reset_Handler+0x10c>)
    45ea:	4c39      	ldr	r4, [pc, #228]	; (46d0 <Reset_Handler+0x110>)
    45ec:	1b63      	subs	r3, r4, r5
    45ee:	f023 0503 	bic.w	r5, r3, #3
    45f2:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
    45f6:	f240 0200 	movw	r2, #0
    45fa:	f2c2 0200 	movt	r2, #8192	; 0x2000
    45fe:	f644 11c0 	movw	r1, #18880	; 0x49c0
    4602:	f2c0 0100 	movt	r1, #0
    4606:	f105 0004 	add.w	r0, r5, #4
    460a:	f3c5 0480 	ubfx	r4, r5, #2, #1
    460e:	585d      	ldr	r5, [r3, r1]
    4610:	509d      	str	r5, [r3, r2]
    4612:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    4616:	4283      	cmp	r3, r0
    4618:	d146      	bne.n	46a8 <Reset_Handler+0xe8>
    461a:	e7e0      	b.n	45de <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
    461c:	585d      	ldr	r5, [r3, r1]
    461e:	509d      	str	r5, [r3, r2]
    4620:	f103 0304 	add.w	r3, r3, #4
    4624:	585c      	ldr	r4, [r3, r1]
    4626:	509c      	str	r4, [r3, r2]
    4628:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    462c:	4283      	cmp	r3, r0
    462e:	d1f5      	bne.n	461c <Reset_Handler+0x5c>
    4630:	e7d5      	b.n	45de <Reset_Handler+0x1e>
    4632:	4d28      	ldr	r5, [pc, #160]	; (46d4 <Reset_Handler+0x114>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
    4634:	4928      	ldr	r1, [pc, #160]	; (46d8 <Reset_Handler+0x118>)
    4636:	1b48      	subs	r0, r1, r5
    4638:	f020 0403 	bic.w	r4, r0, #3
    463c:	f240 5320 	movw	r3, #1312	; 0x520
    4640:	f2c2 0300 	movt	r3, #8192	; 0x2000
    4644:	18e2      	adds	r2, r4, r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
    4646:	f04f 0100 	mov.w	r1, #0
    464a:	1b50      	subs	r0, r2, r5
    464c:	f1a0 0004 	sub.w	r0, r0, #4
    4650:	f3c0 0480 	ubfx	r4, r0, #2, #1
    4654:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    4658:	4295      	cmp	r5, r2
    465a:	d11e      	bne.n	469a <Reset_Handler+0xda>
    465c:	e007      	b.n	466e <Reset_Handler+0xae>
    465e:	f105 0304 	add.w	r3, r5, #4
		*pDest++ = 0;
    4662:	6069      	str	r1, [r5, #4]
    4664:	f105 0508 	add.w	r5, r5, #8
    4668:	6059      	str	r1, [r3, #4]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    466a:	4295      	cmp	r5, r2
    466c:	d1f7      	bne.n	465e <Reset_Handler+0x9e>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) &_sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    466e:	f240 0500 	movw	r5, #0
    4672:	f2c0 0500 	movt	r5, #0
    4676:	f025 027f 	bic.w	r2, r5, #127	; 0x7f
    467a:	f44f 416d 	mov.w	r1, #60672	; 0xed00
    467e:	f2ce 0100 	movt	r1, #57344	; 0xe000
    4682:	608a      	str	r2, [r1, #8]

	/* Initialize the C library */
	__libc_init_array();
    4684:	f644 00fd 	movw	r0, #18685	; 0x48fd
    4688:	f2c0 0000 	movt	r0, #0
    468c:	4780      	blx	r0

	/* Branch to main function */
	main();
    468e:	f642 4495 	movw	r4, #11413	; 0x2c95
    4692:	f2c0 0400 	movt	r4, #0
    4696:	47a0      	blx	r4
    4698:	e7fe      	b.n	4698 <Reset_Handler+0xd8>
    469a:	2c00      	cmp	r4, #0
    469c:	d0df      	beq.n	465e <Reset_Handler+0x9e>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
    469e:	f845 1f04 	str.w	r1, [r5, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
    46a2:	4295      	cmp	r5, r2
    46a4:	d1db      	bne.n	465e <Reset_Handler+0x9e>
    46a6:	e7e2      	b.n	466e <Reset_Handler+0xae>
    46a8:	2c00      	cmp	r4, #0
    46aa:	d0b7      	beq.n	461c <Reset_Handler+0x5c>
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
    46ac:	585c      	ldr	r4, [r3, r1]
    46ae:	509c      	str	r4, [r3, r2]
    46b0:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
    46b4:	4283      	cmp	r3, r0
    46b6:	d1b1      	bne.n	461c <Reset_Handler+0x5c>
    46b8:	e791      	b.n	45de <Reset_Handler+0x1e>
    46ba:	bf00      	nop
    46bc:	20000510 	.word	0x20000510
    46c0:	20000000 	.word	0x20000000
    46c4:	2000093c 	.word	0x2000093c
    46c8:	20000520 	.word	0x20000520
    46cc:	20000004 	.word	0x20000004
    46d0:	20000513 	.word	0x20000513
    46d4:	2000051c 	.word	0x2000051c
    46d8:	20000937 	.word	0x20000937

000046dc <lcdca_init>:
 */ 

#include "LcdDisplay.h"

void lcdca_init(void)
{
    46dc:	b570      	push	{r4, r5, r6, lr}
    46de:	b084      	sub	sp, #16
	// LCDCA Controller initialization
	// - Clock,
	// - Connect to C42364A glass LCD component,
	// - Timing: 64 Hz frame rate & low power waveform, FC0, FC1, FC2
	// - Interrupt: off
	lcdca_clk_init();
    46e0:	f241 4351 	movw	r3, #5201	; 0x1451
    46e4:	f2c0 0300 	movt	r3, #0
    46e8:	4798      	blx	r3
	lcdca_cfg.port_mask = PORT_MASK;
    46ea:	f04f 0028 	mov.w	r0, #40	; 0x28
    46ee:	f88d 0004 	strb.w	r0, [sp, #4]
	lcdca_cfg.x_bias = false;
    46f2:	f04f 0400 	mov.w	r4, #0
    46f6:	f88d 4005 	strb.w	r4, [sp, #5]
	lcdca_cfg.lp_wave = true;
    46fa:	f04f 0601 	mov.w	r6, #1
    46fe:	f88d 6006 	strb.w	r6, [sp, #6]
	lcdca_cfg.duty_type = LCD_DUTY;
    4702:	f88d 4007 	strb.w	r4, [sp, #7]
	lcdca_cfg.lcd_pres = false;
    4706:	f88d 4008 	strb.w	r4, [sp, #8]
	lcdca_cfg.lcd_clkdiv = 3;
    470a:	f04f 0103 	mov.w	r1, #3
    470e:	f88d 1009 	strb.w	r1, [sp, #9]
	lcdca_cfg.fc0 = 16;
    4712:	f04f 0210 	mov.w	r2, #16
    4716:	f88d 200a 	strb.w	r2, [sp, #10]
	lcdca_cfg.fc1 = 2;
    471a:	f04f 0502 	mov.w	r5, #2
    471e:	f88d 500b 	strb.w	r5, [sp, #11]
	lcdca_cfg.fc2 = 6;
    4722:	f04f 0306 	mov.w	r3, #6
    4726:	f88d 300c 	strb.w	r3, [sp, #12]
	lcdca_cfg.contrast = LCD_CONTRAST_LEVEL;
    472a:	f04f 001e 	mov.w	r0, #30
    472e:	f88d 000d 	strb.w	r0, [sp, #13]
	lcdca_set_config(&lcdca_cfg);
    4732:	a801      	add	r0, sp, #4
    4734:	f241 5129 	movw	r1, #5417	; 0x1529
    4738:	f2c0 0100 	movt	r1, #0
    473c:	4788      	blx	r1
	lcdca_enable();
    473e:	f241 4291 	movw	r2, #5265	; 0x1491
    4742:	f2c0 0200 	movt	r2, #0
    4746:	4790      	blx	r2
	lcdca_enable_timer(LCDCA_TIMER_FC0);
    4748:	4620      	mov	r0, r4
    474a:	f241 54b1 	movw	r4, #5553	; 0x15b1
    474e:	f2c0 0400 	movt	r4, #0
    4752:	47a0      	blx	r4
	lcdca_enable_timer(LCDCA_TIMER_FC1);
    4754:	4630      	mov	r0, r6
    4756:	47a0      	blx	r4
	lcdca_enable_timer(LCDCA_TIMER_FC2);
    4758:	4628      	mov	r0, r5
    475a:	47a0      	blx	r4

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	if (level) {
		arch_ioport_pin_to_base(pin)->GPIO_OVRS = arch_ioport_pin_to_mask(pin);
    475c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    4760:	f2c4 030e 	movt	r3, #16398	; 0x400e
    4764:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    4768:	6558      	str	r0, [r3, #84]	; 0x54
	
	// Turn on LCD back light
	ioport_set_pin_level(LCD_BL_GPIO, IOPORT_PIN_LEVEL_HIGH);
}
    476a:	b004      	add	sp, #16
    476c:	bd70      	pop	{r4, r5, r6, pc}
    476e:	bf00      	nop

00004770 <LcdWrite>:

void LcdWrite(const char *str){
    4770:	b510      	push	{r4, lr}
    4772:	b082      	sub	sp, #8
    4774:	4602      	mov	r2, r0
	lcdca_write_packet(LCDCA_TDG_14SEG4COM, FIRST_14SEG_4C, (const uint8_t*)str, WIDTH_14SEG_4C, DIR_14SEG_4C);
    4776:	f04f 0301 	mov.w	r3, #1
    477a:	9300      	str	r3, [sp, #0]
    477c:	f04f 0002 	mov.w	r0, #2
    4780:	f04f 0124 	mov.w	r1, #36	; 0x24
    4784:	f04f 0307 	mov.w	r3, #7
    4788:	f241 641d 	movw	r4, #5661	; 0x161d
    478c:	f2c0 0400 	movt	r4, #0
    4790:	47a0      	blx	r4
    4792:	b002      	add	sp, #8
    4794:	bd10      	pop	{r4, pc}
    4796:	bf00      	nop

00004798 <usbCdcEnable>:

char str[8];
int count;
bool usbCdcEnable(uint8_t port){
	for(int c=0;c<8;c++){
		str[c]=0;
    4798:	f640 1234 	movw	r2, #2356	; 0x934
    479c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    47a0:	f04f 0300 	mov.w	r3, #0
    47a4:	7013      	strb	r3, [r2, #0]
    47a6:	7053      	strb	r3, [r2, #1]
    47a8:	7093      	strb	r3, [r2, #2]
    47aa:	70d3      	strb	r3, [r2, #3]
    47ac:	7113      	strb	r3, [r2, #4]
    47ae:	7153      	strb	r3, [r2, #5]
    47b0:	7193      	strb	r3, [r2, #6]
    47b2:	71d3      	strb	r3, [r2, #7]
	}
	count=0;
    47b4:	f640 1030 	movw	r0, #2352	; 0x930
    47b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    47bc:	6003      	str	r3, [r0, #0]
	return true;
}
    47be:	f04f 0001 	mov.w	r0, #1
    47c2:	4770      	bx	lr

000047c4 <usbReceive>:

void usbCdcDisable(uint8_t port){
	
}

void usbReceive(uint8_t port){
    47c4:	b538      	push	{r3, r4, r5, lr}
	if (udi_cdc_is_rx_ready()) {
    47c6:	f640 0395 	movw	r3, #2197	; 0x895
    47ca:	f2c0 0300 	movt	r3, #0
    47ce:	4798      	blx	r3
    47d0:	b330      	cbz	r0, 4820 <usbReceive+0x5c>
		// Transmit next data
		str[count] = udi_cdc_getc();
    47d2:	f640 1430 	movw	r4, #2352	; 0x930
    47d6:	f2c2 0400 	movt	r4, #8192	; 0x2000
    47da:	6825      	ldr	r5, [r4, #0]
    47dc:	f640 1071 	movw	r0, #2417	; 0x971
    47e0:	f2c0 0000 	movt	r0, #0
    47e4:	4780      	blx	r0
    47e6:	f640 1234 	movw	r2, #2356	; 0x934
    47ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    47ee:	5550      	strb	r0, [r2, r5]
		count++;
    47f0:	6823      	ldr	r3, [r4, #0]
    47f2:	f103 0301 	add.w	r3, r3, #1
		if(count>=7){
    47f6:	2b06      	cmp	r3, #6
    47f8:	dc01      	bgt.n	47fe <usbReceive+0x3a>

void usbReceive(uint8_t port){
	if (udi_cdc_is_rx_ready()) {
		// Transmit next data
		str[count] = udi_cdc_getc();
		count++;
    47fa:	6023      	str	r3, [r4, #0]
    47fc:	e006      	b.n	480c <usbReceive+0x48>
		if(count>=7){
			count=0;
    47fe:	f640 1030 	movw	r0, #2352	; 0x930
    4802:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4806:	f04f 0200 	mov.w	r2, #0
    480a:	6002      	str	r2, [r0, #0]
		}
		LcdWrite(str);
    480c:	f640 1034 	movw	r0, #2356	; 0x934
    4810:	f2c2 0000 	movt	r0, #8192	; 0x2000
    4814:	f244 7371 	movw	r3, #18289	; 0x4771
    4818:	f2c0 0300 	movt	r3, #0
    481c:	4798      	blx	r3
    481e:	bd38      	pop	{r3, r4, r5, pc}
		}else{
		LcdWrite("F");
    4820:	f644 1090 	movw	r0, #18832	; 0x4990
    4824:	f2c0 0000 	movt	r0, #0
    4828:	f244 7171 	movw	r1, #18289	; 0x4771
    482c:	f2c0 0100 	movt	r1, #0
    4830:	4788      	blx	r1
    4832:	bd38      	pop	{r3, r4, r5, pc}

00004834 <__register_exitproc>:
    4834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4838:	4698      	mov	r8, r3
    483a:	4b23      	ldr	r3, [pc, #140]	; (48c8 <__register_exitproc+0x94>)
    483c:	681c      	ldr	r4, [r3, #0]
    483e:	4606      	mov	r6, r0
    4840:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    4844:	460f      	mov	r7, r1
    4846:	4691      	mov	r9, r2
    4848:	b918      	cbnz	r0, 4852 <__register_exitproc+0x1e>
    484a:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
    484e:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    4852:	6841      	ldr	r1, [r0, #4]
    4854:	291f      	cmp	r1, #31
    4856:	dd16      	ble.n	4886 <__register_exitproc+0x52>
    4858:	481c      	ldr	r0, [pc, #112]	; (48cc <__register_exitproc+0x98>)
    485a:	b918      	cbnz	r0, 4864 <__register_exitproc+0x30>
    485c:	f04f 30ff 	mov.w	r0, #4294967295
    4860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4864:	f44f 70c8 	mov.w	r0, #400	; 0x190
    4868:	f3af 8000 	nop.w
    486c:	2800      	cmp	r0, #0
    486e:	d0f5      	beq.n	485c <__register_exitproc+0x28>
    4870:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    4874:	2500      	movs	r5, #0
    4876:	6045      	str	r5, [r0, #4]
    4878:	6002      	str	r2, [r0, #0]
    487a:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    487e:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
    4882:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
    4886:	b1b6      	cbz	r6, 48b6 <__register_exitproc+0x82>
    4888:	6844      	ldr	r4, [r0, #4]
    488a:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
    488e:	2201      	movs	r2, #1
    4890:	eb00 0384 	add.w	r3, r0, r4, lsl #2
    4894:	fa02 f204 	lsl.w	r2, r2, r4
    4898:	4311      	orrs	r1, r2
    489a:	2e02      	cmp	r6, #2
    489c:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
    48a0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    48a4:	461c      	mov	r4, r3
    48a6:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
    48aa:	d104      	bne.n	48b6 <__register_exitproc+0x82>
    48ac:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
    48b0:	431a      	orrs	r2, r3
    48b2:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
    48b6:	6841      	ldr	r1, [r0, #4]
    48b8:	1c8b      	adds	r3, r1, #2
    48ba:	1c4a      	adds	r2, r1, #1
    48bc:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    48c0:	6042      	str	r2, [r0, #4]
    48c2:	2000      	movs	r0, #0
    48c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    48c8:	00004994 	.word	0x00004994
    48cc:	00000000 	.word	0x00000000

000048d0 <__libc_fini_array>:
    48d0:	b570      	push	{r4, r5, r6, lr}
    48d2:	4b08      	ldr	r3, [pc, #32]	; (48f4 <__libc_fini_array+0x24>)
    48d4:	4c08      	ldr	r4, [pc, #32]	; (48f8 <__libc_fini_array+0x28>)
    48d6:	1ae0      	subs	r0, r4, r3
    48d8:	1084      	asrs	r4, r0, #2
    48da:	eb03 0684 	add.w	r6, r3, r4, lsl #2
    48de:	2500      	movs	r5, #0
    48e0:	3d04      	subs	r5, #4
    48e2:	b11c      	cbz	r4, 48ec <__libc_fini_array+0x1c>
    48e4:	5972      	ldr	r2, [r6, r5]
    48e6:	4790      	blx	r2
    48e8:	3c01      	subs	r4, #1
    48ea:	e7f9      	b.n	48e0 <__libc_fini_array+0x10>
    48ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    48f0:	f000 b85e 	b.w	49b0 <_fini>
    48f4:	000049bc 	.word	0x000049bc
    48f8:	000049c0 	.word	0x000049c0

000048fc <__libc_init_array>:
    48fc:	b538      	push	{r3, r4, r5, lr}
    48fe:	4d0e      	ldr	r5, [pc, #56]	; (4938 <__libc_init_array+0x3c>)
    4900:	4b0e      	ldr	r3, [pc, #56]	; (493c <__libc_init_array+0x40>)
    4902:	1ae8      	subs	r0, r5, r3
    4904:	1085      	asrs	r5, r0, #2
    4906:	2400      	movs	r4, #0
    4908:	42ac      	cmp	r4, r5
    490a:	d005      	beq.n	4918 <__libc_init_array+0x1c>
    490c:	490b      	ldr	r1, [pc, #44]	; (493c <__libc_init_array+0x40>)
    490e:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
    4912:	4790      	blx	r2
    4914:	3401      	adds	r4, #1
    4916:	e7f7      	b.n	4908 <__libc_init_array+0xc>
    4918:	f000 f840 	bl	499c <_init>
    491c:	4908      	ldr	r1, [pc, #32]	; (4940 <__libc_init_array+0x44>)
    491e:	4a09      	ldr	r2, [pc, #36]	; (4944 <__libc_init_array+0x48>)
    4920:	1a54      	subs	r4, r2, r1
    4922:	10a5      	asrs	r5, r4, #2
    4924:	2400      	movs	r4, #0
    4926:	42ac      	cmp	r4, r5
    4928:	d005      	beq.n	4936 <__libc_init_array+0x3a>
    492a:	4b05      	ldr	r3, [pc, #20]	; (4940 <__libc_init_array+0x44>)
    492c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    4930:	4780      	blx	r0
    4932:	3401      	adds	r4, #1
    4934:	e7f7      	b.n	4926 <__libc_init_array+0x2a>
    4936:	bd38      	pop	{r3, r4, r5, pc}
    4938:	000049a8 	.word	0x000049a8
    493c:	000049a8 	.word	0x000049a8
    4940:	000049a8 	.word	0x000049a8
    4944:	000049b0 	.word	0x000049b0

00004948 <memcpy>:
    4948:	b510      	push	{r4, lr}
    494a:	2300      	movs	r3, #0
    494c:	4293      	cmp	r3, r2
    494e:	d003      	beq.n	4958 <memcpy+0x10>
    4950:	5ccc      	ldrb	r4, [r1, r3]
    4952:	54c4      	strb	r4, [r0, r3]
    4954:	3301      	adds	r3, #1
    4956:	e7f9      	b.n	494c <memcpy+0x4>
    4958:	bd10      	pop	{r4, pc}

0000495a <memset>:
    495a:	1882      	adds	r2, r0, r2
    495c:	4603      	mov	r3, r0
    495e:	4293      	cmp	r3, r2
    4960:	d002      	beq.n	4968 <memset+0xe>
    4962:	f803 1b01 	strb.w	r1, [r3], #1
    4966:	e7fa      	b.n	495e <memset+0x4>
    4968:	4770      	bx	lr
	...

0000496c <register_fini>:
    496c:	4b02      	ldr	r3, [pc, #8]	; (4978 <register_fini+0xc>)
    496e:	b113      	cbz	r3, 4976 <register_fini+0xa>
    4970:	4802      	ldr	r0, [pc, #8]	; (497c <register_fini+0x10>)
    4972:	f000 b805 	b.w	4980 <atexit>
    4976:	4770      	bx	lr
    4978:	00000000 	.word	0x00000000
    497c:	000048d1 	.word	0x000048d1

00004980 <atexit>:
    4980:	4601      	mov	r1, r0
    4982:	2000      	movs	r0, #0
    4984:	4602      	mov	r2, r0
    4986:	4603      	mov	r3, r0
    4988:	f7ff bf54 	b.w	4834 <__register_exitproc>
    498c:	00347748 	.word	0x00347748
    4990:	00000046 	.word	0x00000046

00004994 <_global_impure_ptr>:
    4994:	200000e8 00000043                       ... C...

0000499c <_init>:
    499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    499e:	bf00      	nop
    49a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    49a2:	bc08      	pop	{r3}
    49a4:	469e      	mov	lr, r3
    49a6:	4770      	bx	lr

000049a8 <__init_array_start>:
    49a8:	0000496d 	.word	0x0000496d

000049ac <__frame_dummy_init_array_entry>:
    49ac:	000001f9                                ....

000049b0 <_fini>:
    49b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49b2:	bf00      	nop
    49b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    49b6:	bc08      	pop	{r3}
    49b8:	469e      	mov	lr, r3
    49ba:	4770      	bx	lr

000049bc <__fini_array_start>:
    49bc:	000001d1 	.word	0x000001d1

Disassembly of section .relocate:

20000000 <bpm_ps_no_halt_exec>:
 */
RAMFUNC bool bpm_ps_no_halt_exec(Bpm *bpm, uint32_t pmcon)
{
	bool b_psok = false;
	bool b_timeout = false;
	BPM_UNLOCK(PMCON);
20000000:	f04f 0300 	mov.w	r3, #0
20000004:	f2c4 030f 	movt	r3, #16399	; 0x400f
20000008:	f04f 021c 	mov.w	r2, #28
2000000c:	f6ca 2200 	movt	r2, #43520	; 0xaa00
20000010:	619a      	str	r2, [r3, #24]
	bpm->BPM_PMCON = pmcon;
20000012:	61c1      	str	r1, [r0, #28]
	do {
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
20000014:	f04f 0100 	mov.w	r1, #0
20000018:	f2c4 010f 	movt	r1, #16399	; 0x400f
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
2000001c:	f24e 0210 	movw	r2, #57360	; 0xe010
20000020:	f2ce 0200 	movt	r2, #57344	; 0xe000
	bool b_psok = false;
	bool b_timeout = false;
	BPM_UNLOCK(PMCON);
	bpm->BPM_PMCON = pmcon;
	do {
		b_psok = (BPM->BPM_SR & BPM_SR_PSOK);
20000024:	6948      	ldr	r0, [r1, #20]
		b_timeout = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
20000026:	6813      	ldr	r3, [r2, #0]
20000028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
	} while (!b_psok && !b_timeout);
2000002c:	f010 0001 	ands.w	r0, r0, #1
20000030:	d101      	bne.n	20000036 <bpm_ps_no_halt_exec+0x36>
20000032:	2b00      	cmp	r3, #0
20000034:	d0f6      	beq.n	20000024 <bpm_ps_no_halt_exec+0x24>
	return b_psok;
}
20000036:	4770      	bx	lr

20000038 <udi_api_cdc_data>:
20000038:	07d9 0000 054d 0000 0245 0000 024d 0000     ....M...E...M...
20000048:	04f5 0000                                   ....

2000004c <udi_api_cdc_comm>:
2000004c:	057d 0000 0231 0000 0255 0000 024d 0000     }...1...U...M...
2000005c:	0000 0000                                   ....

20000060 <udc_config>:
20000060:	0078 2000 0070 2000                         x.. p.. 

20000068 <udi_apis>:
20000068:	004c 2000 0038 2000                         L.. 8.. 

20000070 <udc_config_fs>:
20000070:	008c 2000 0068 2000                         ... h.. 

20000078 <udc_device_desc>:
20000078:	0112 0200 0002 4000 03eb 2404 0100 0000     .......@...$....
20000088:	0100 0000                                   ....

2000008c <udc_desc_fs>:
2000008c:	0209 0043 0102 c000 0932 0004 0100 0202     ..C.....2.......
2000009c:	0001 2405 1000 0401 0224 0502 0624 0100     ...$....$...$...
200000ac:	2405 0301 0701 8305 4003 1000 0409 0001     .$.......@......
200000bc:	0a02 0000 0700 8105 4002 0000 0507 0202     .........@......
200000cc:	0040 0000                                   @...

200000d0 <udc_string_desc_languageid>:
200000d0:	0304 0409                                   ....

200000d4 <g_interrupt_enabled>:
200000d4:	0001 0000                                   ....

200000d8 <flashcalw_wait_until_ready>:
200000d8:	4305 0000 0000 0000                         .C......

200000e0 <_impure_ptr>:
200000e0:	00e8 2000 0000 0000                         ... ....

200000e8 <impure_data>:
200000e8:	0000 0000 03d4 2000 043c 2000 04a4 2000     ....... <.. ... 
	...
2000011c:	4998 0000 0000 0000 0000 0000 0000 0000     .I..............
	...
20000190:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200001a0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
